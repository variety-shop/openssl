#!/usr/bin/make -f
# -*- Makefile -*-
magic_startup_code=a; ORIG_CWD=$(pwd); cd $(dirname "$0") && exec make ORIG_CWD=${ORIG_CWD} ORIG_AKM_DIRNAME=$(dirname "$0") -f "$(basename $0)" "$@"
### DO NOT EDIT ABOVE ################################################

C := openssl

### DO NOT EDIT BELOW ################################################
all: build

P := $(if $P,$P,$(patsubst %/,%,$(dir $(if $(filter /%,$(firstword $(MAKEFILE_LIST))),$(firstword $(MAKEFILE_LIST)),$(abspath $(firstword $(shell bash -c pwd) $(CURDIR))/$(firstword $(MAKEFILE_LIST)))))))
PROG := $C

BASE_PATH := $(firstword $(BASE_PATH) $(patsubst %/$C,%,$P))
REF_PATH := $(firstword $(REF_PATH) NoValidPath)
$P/PROG := $P/$(PROG)
AKAMAKE := $(firstword $(AKAMAKE) $(wildcard $(BASE_PATH)/Akamake $(REF_PATH)/Akamake))

ifeq ($(AKAMAKE),)
$(error Cannot find Akamake path; check definitions or checkout of Akamake)
endif

ifndef ATTR_ONLY
-include $(AKAMAKE)/akamake-env.mak
endif
### DO NOT EDIT ABOVE ################################################

# We need this earlier than most akamake files
$P/%: P := $P

# This wraps most of this Akamake file
ifndef ATTR_ONLY

ifeq ($(LD_LIBRARY_PATH),)
LD_LIBRARY_PATH := $(COMMON)/lib
else ifeq ($(findstring $(COMMON)/lib,$(LD_LIBRARY_PATH)),)
LD_LIBRARY_PATH := $(LD_LIBRARY_PATH):$(COMMON)/lib
endif # ifeq ($(LD_LIBRARY_PATH),)
export LD_LIBRARY_PATH

ifndef MASTER
# Compiling OpenSSL as the master/standalone mode

$(call assert_min_version,Akamake,5.0.6)

# We are setting to "all", so just set it, ignoring libcrypto.a
$P/OPENSSL-TARGET := all
$P/BUILDENV.linux.OPENSSL_LINKAGE-master := shared
ifeq ($(BUILDENV.BASEOS),linux)
ifndef BUILDENV.OPENSSL_LINKAGE-master
BUILDENV.OPENSSL_LINKAGE-master := shared
endif # ifndef BUILDENV.OPENSSL_LINKAGE-master
else # ifeq ($(BUILDENV.BASEOS),linux)
$P/NOSHARED := $($P/NOSHARED) non-linux
ifndef BUILDENV.OPENSSL_LINKAGE-master
BUILDENV.OPENSSL_LINKAGE-master := static
endif # ifndef BUILDENV.OPENSSL_LINKAGE-master
endif # ifeq ($(BUILDENV.BASEOS),linux)

$P/CONFIGFEATURES := $($P/CONFIGFEATURES) \
	enable-bf \
	enable-cast \
	enable-md4 \
	enable-psk \
	enable-rc2 \
	enable-rc4 \
	enable-rmd160 \
	enable-tls1 \
	enable-tls1_1 \
	enable-tls1_2 \
	enable-tls1_3

else # ifndef MASTER
# Compiling OpenSSL as a component

$(call assert_min_version,Akamake,5.0.6)
# If akamai_lib is here, make sure it's at least 6.5
ifneq ($(call have-C,akamai_lib),)
$(call assert_min_version,akamai_lib,6.5)
endif # ifneq ($(call have-C,akamai_lib),)

# We need to determine whether we're building static libraries or shared libraries.
#
# The result of this will be stored in $P/BUILDENV.OPENSSL_LINKAGE-master,
# automatically by Akamake if Akamake supports it, and by inline compatability
# logic otherwise.
#
# Due to the dual-pronged mechanism for opting for static libraries (both set
# the buildenv variable and dep-comp on openssl/enable/static), we also need to
# have some logic to check for internal consistency.  In particular:
#
# (1) If we're building statically, the master component has to both DEP-COMP on
#     openssl/enable/static and set $P/BUILDENV.linux.OPENSSL_LINKAGE-master
#     to static.  If only one of those has happened, we set $P/ONLY-ONE-SET
#     and print a pretty error message later on.  This check has to be split
#     into a few different prongs, each commented separately.
#
# (2) If some non-master component wants to force static builds, they are supposed
#     to set $P/BUILDENV.linux.OPENSSL_LINKAGE-supported to static and also
#     DEP-COMP on openssl/enable/static.  We don't implement the -supported
#     buildenv logic ourselves, so that will have to wait until Akamake grows
#     support for OPENSSL_LINKAGE.  $P/BUILDENV.OPENSSL_LINKAGE-master is used
#     to control what libraries are exported (but $P/NOSHARED is used in the
#     configure rule), so this case will get a somewhat opaque error message
#     about the library not being available to export.

# Akamake will gain support for the OPENSSL_LINKAGE buildenv at some point
# around 4.5 or 4.6 we hope, but we don't need to use a version check since we
# can just check whether the variable it will define is already defined.

ifdef BUILDENV.OPENSSL_LINKAGE-master

# This case is where Akamake has done the work for us (still not in Akamake 5)
ifeq ($(strip $(BUILDENV.OPENSSL_LINKAGE-master)),static)
$P/NOSHARED := $($P/NOSHARED) BUILDENV.OPENSSL_LINKAGE-master
# Enforce rule (1) -- if BUILDENV.OPENSSL_LINKAGE-master is set, $(MASTER) had better
# be directly DEP-COMPing on openssl/enable/static; otherwise, it's an error.
ifneq ($(strip $(filter openssl/enable/static,$($(MASTER)/DEP-COMPS))),openssl/enable/static)
$P/ONLY-ONE-SET := $$P/BUILDENV.linux.OPENSSL_LINKAGE-master
endif # ifneq ($(strip $(filter openssl/enable/static,$($(MASTER)/DEP-COMPS))),openssl/enable/static)
endif # ifeq ($(strip $(BUILDENV.OPENSSL_LINKAGE-master)),static)

else # ifdef BUILDENV.OPENSSL_LINKAGE-master

# This is where we implement compatibility logic because we can't depend on
# a new-enough Akamake.  (In particular, a new-enough Akamake doesn't exist
# at the time of this writing.)  We mostly only care about linux, since
# windows has its own library scheme anyway, and OS X is not a platform where
# there is a particular need for shared libraries.

ifeq ($(BUILDENV.BASEOS),linux)

# We have to fake up some of the BUILDENV logic that would be in Akamake.
# We can take a bit of a shortcut, since our documented requirement is that the
# master component do both of setting $P/BUILDENV.linux.OPENSSL_LINKAGE-master
# to static, and DEP-COMP on openssl/enable/static.  To do only one of those
# but not the other is an error, so we set $P/ONLY-ONE-SET and print a pretty
# error message later on.
# Set BUILDENV.OPENSSL_LINKAGE-master with the result of our calculation so that
# that variable can be used as the conditional later in the file.

ifeq ($(filter openssl/enable/static,$($(MASTER)/DEP-COMPS)),openssl/enable/static)

$P/NOSHARED := $($P/NOSHARED) $(MASTER)
ifneq ($(strip $($(MASTER)/BUILDENV.$(BUILDENV.BASEOS).OPENSSL_LINKAGE-master)),static)
# In this case, the master component DEP-COMPs on openssl/enable static but did not
# set $P/BUILDENV.linux.OPENSSL_LINKAGE-master to static, which violates
# condition (1), so we set $P/ONLY-ONE-SET and print a pretty error message later.
$P/ONLY-ONE-SET := openssl/enable/static
endif # ifneq ($(strip $($(MASTER)/BUILDENV.$(BUILDENV.BASEOS).OPENSSL_LINKAGE-master)),static)
BUILDENV.OPENSSL_LINKAGE-master := static

else # ifeq ($(filter openssl/enable/static,$($(MASTER)/DEP-COMPS)),openssl/enable/static)
BUILDENV.OPENSSL_LINKAGE-master := shared
endif # ifeq ($(filter openssl/enable/static,$($(MASTER)/DEP-COMPS)),openssl/enable/static)

# One last consistency check for condition (1) -- we have to catch the other case,
# where the master component sets $P/BUILDENV.linux.OPENSSL_LINKAGE-master to
# static but fails to DEP-COMP on openssl/enable/static
ifeq ($(strip $($(MASTER)/BUILDENV.$(BUILDENV.BASEOS).OPENSSL_LINKAGE-master)),static)
ifneq ($(filter openssl/enable/static,$($(MASTER)/DEP-COMPS)),openssl/enable/static)
$P/ONLY-ONE-SET := $$P/BUILDENV.OPENSSL_LINKAGE-master
endif # ifneq ($(filter openssl/enable/static,$($(MASTER)/DEP-COMPS)),openssl/enable/static)
endif # ifeq ($(strip $($(MASTER)/BUILDENV.$(BUILDENV.BASEOS).OPENSSL_LINKAGE-master)),static)

else # ifeq ($(BUILDENV.BASEOS),linux)

# Shared library is only supported on linux

BUILDENV.OPENSSL_LINKAGE-master := static
# $P/NOSHARED is not used for windows, but is used for macos
$P/NOSHARED := $($P/NOSHARED) non-linux

endif # ifeq ($(BUILDENV.BASEOS),linux)

endif # ifdef BUILDENV.OPENSSL_LINKAGE-master

ifdef $P/ONLY-ONE-SET
# Report the error
ERROR := Only $($P/ONLY-ONE-SET) was defined but not the other
define MESSAGE
*** OpenSSL $(call get_ci_version,$C) defaults to using shared libraries,
*** but the master component can opt to fail back to static linkage by doing both of
*** DEP-COMPing on openssl/enable/static and setting:
***
*** $$P/BUILDENV.linux.OPENSSL_LINKAGE-master := static
***
*** Please refer to:
***
*** https://collaborate.akamai.com/confluence/display/OPENSSL/Shared+Library+Support
***
*** for additional support.
endef
$(call alog-multiline-info,ERROR,buildenv,$C,$(ERROR),$(MESSAGE))
$(error $(ERROR))
endif # ifdef $P/ONLY-ONE-SET

# Check that the master component has opted in to shard or static; don't
# let it sneak by on a "default shared" behavior.
# Do this after the ONLY-ONE-SET checks, since that's an internal inconsistency
# in the build setup and should be resolved first.
ifeq ($(filter $(NOBUILD_TARGETS),$(MAKECMDGOALS)),)
ifeq ($(BUILDENV.BASEOS),linux)
ifndef $(MASTER)/BUILDENV.$(BUILDENV.BASEOS).OPENSSL_LINKAGE-master
ERROR := Must opt in/out of openssl shared linkage
define MESSAGE
*** The 7.x series of openssl components is designed to generate shared
*** libraries for libcrypto and libssl.  This has several advantages for
*** component owners, described at
***
*** https://collaborate.akamai.com/confluence/display/OPENSSL/Shared+Library+Support
***
*** However, components using shared libraries from openssl will roll at
*** runtime unless the corresponding openssl-suite is included in the
*** release being installed.  Please notify your release manager that you
*** are including openssl shared libraries and of the need to include
*** openssl-suite in the release, and set:
***
*** $$P/BUILDENV.linux.OPENSSL_LINKAGE-master := shared
***
*** to disable this message.  Alternately, use the instructions on the
*** Confluence page to revert to static linkage.
endef
$(call alog-multiline-info,ERROR,buildenv,$C,$(ERROR),$(MESSAGE))
$(error $(ERROR))
endif # ifndef $(MASTER)/BUILDENV.$(BUILDENV.BASEOS).OPENSSL_LINKAGE-master
endif # ifeq ($(BUILDENV.BASEOS),linux)
endif # ifeq ($(filter $(NOBUILD_TARGETS),$(MAKECMDGOALS)),)

# Set the make target for shared/static appropriately
ifeq ($(BUILDENV.OPENSSL_LINKAGE-master),shared)
# We are setting to "all", so just set it, ignoring libcrypto.a
$P/OPENSSL-TARGET := all
else # ifeq ($(BUILDENV.OPENSSL_LINKAGE-master),shared)
# We want to set to libcrypto.a, but only if not already set to "all"
$P/OPENSSL-TARGET := $(if $(findstring all,$($P/OPENSSL-TARGET)),all,libcrypto.a)
endif # ifeq ($(BUILDENV.OPENSSL_LINKAGE-master),shared)

endif # ifndef MASTER
# master/component check done

# BUILDENV.OPENSSL_LINKAGE-master will now always be set (ifndef ATTR_ONLY)

# Master components must choose to use shared or static openssl.  For the
# shared build, other components do not get to modify the list of configured
# features.  If specific openssl/enable/feature knobs are needed outside of the
# set enabled here, then the master component must DEP-COMP on
# openssl/enable/static and set
# $P/BUILDENV.$(BUILDENV.BASEOS).OPENSSL_LINKAGE-master to static to force a
# static build, which will use the $P/CONFIGFEATURES that are adjusted by
# openssl/enable/foo, instead of the $P/SHAREDFEATURES defined here.
# Reasons why certain options are enabled:
# postgresql9.1: cast bf
# stunnel, pubcookie: egd
# mod_php5/php5: rc4 (default:openssl_open/openssl_seal) md4 ripemd (openssl_sign)
$P/SHAREDFEATURES := \
	enable-akamai-rsalg \
	enable-akamai-ghost \
	enable-bf \
	enable-cast \
	enable-dso \
	enable-dtls1 \
	enable-dtls1_2 \
	enable-egd \
	enable-md4 \
	enable-psk \
	enable-rc2 \
	enable-rc4 \
	enable-rmd160 \
	enable-shared \
	enable-tls1 \
	enable-tls1_1 \
	enable-tls1_2 \
	enable-tls1_3 \
	enable-weak-ssl-ciphers

ifeq ($(AKAMAKE-LINUX-BUILD-64),1)
$P/SHAREDFEATURES := $($P/SHAREDFEATURES) enable-ec_nistp_64_gcc_128
endif # ifeq ($(AKAMAKE-LINUX-BUILD-64),1)

ifeq ($(AKARELEASE_PLATFORM),btf-anaconda)
$P/configure.ts : CFLAGS += -fPIC
endif # ifeq ($(AKARELEASE_PLATFORM),btf-anaconda)

ifdef GCOV
$P/configure.ts : CFLAGS += -ftest-coverage -fprofile-arcs
endif # ifdef GCOV

ifdef ASAN_BUILD
$P/configure.ts : CFLAGS += -no-fomit-frame-pointer
endif # ifdef ASAN_BUILD

#  HEADERS-LOCAL-DIRECTORY: relative directory of exported interface headers
# HEADERS-COMMON-DIRECTORY: destination directory in common/include for
#                            exported interface headers
$P/HEADERS-LOCAL-DIRECTORY := include/openssl
$P/HEADERS-COMMON-DIRECTORY := openssl

# $P/configure.ts-generated headers to be exported
$P/CONFIG-GEN-HEADERS := opensslconf.h

# Static headers to be exported
$P/STATIC-HEADERS := $(subst $(call get-headers-local-path)/,,$(wildcard $(call get-headers-local-path)/*.h))
# Remove opensslconf.h, as it is created/updated with all the others
$P/STATIC-HEADERS := $(patsubst opensslconf.h,,$($P/STATIC-HEADERS))

ifndef AKAMAKE-COMMON-BUILD
# $P/HEADERS: List of export header files (relative to HEADERS_LOCAL_DIRECTORY)
$P/HEADERS := $($P/CONFIG-GEN-HEADERS) $($P/STATIC-HEADERS)
else # ifndef AKAMAKE-COMMON-BUILD
$P/HEADERS :=
endif # ifndef AKAMAKE-COMMON-BUILD
$P/HEADERS:

#     LIBS_LOCAL_DIRECTORY: relative directory of exported library files
$P/LIBS-LOCAL-DIRECTORY :=

# $P/EXP-LIBS: List of exported library files (relative to LIBS_LOCAL_DICTORY)

EXT_SO_VER = $(EXT_SO).111.0.0

ifndef AKAMAKE-COMMON-BUILD

ifeq ($(strip $(BUILDENV.OPENSSL_LINKAGE-master)),static)
# STATIC definitiions

$P/EXP-LIBS := libcrypto$(EXT_A) libssl$(EXT_A)
$P/EXP-TREES := dist
$P/EXP-TREE-dist := $($P/EXP-LIBS)

else # ifeq ($(strip $(BUILDENV.OPENSSL_LINKAGE-master)),static)
ifeq ($(strip $(BUILDENV.OPENSSL_LINKAGE-master)),shared)
# SHARED definitions

$P/EXP-LIBS := libssl$(EXT_SO) libcrypto$(EXT_SO)
$P/EXP-LIBS := $($P/EXP-LIBS) $(patsubst %$(EXT_SO),%$(EXT_SO_VER),$($P/EXP-LIBS))
$P/EXP-TREES := dist
$P/EXP-TREE-dist := $($P/EXP-LIBS)
$(call declare-so-deps, ssl, crypto)
$(call declare-so-deps, crypto, dl)
$(call declare-so-deps, crypto, pthread)

# EXPLICIT RULES for some files

$(COMMON)/lib/libssl$(EXT_A): $(COMMON)/lib/libssl$(EXT_SO)
	@$(MKDIR) $(@D)
	@ln -sf $< $@

$(COMMON)/lib/libssl$(EXT_A).dep: $(COMMON)/lib/libssl$(EXT_SO).dep
	@$(MKDIR) $(@D)
	@ln -sf $< $@

$(COMMON)/lib/libcrypto$(EXT_A): $(COMMON)/lib/libcrypto$(EXT_SO)
	@$(MKDIR) $(@D)
	@ln -sf $< $@

$(COMMON)/lib/libcrypto$(EXT_A).dep: $(COMMON)/lib/libcrypto$(EXT_SO).dep
	@$(MKDIR) $(@D)
	@ln -sf $< $@

# Ensure that once a library is linked, its runtime version is also available
# in common/lib, for anything that needs to run during the build
$(COMMON)/lib/libcrypto$(EXT_A).dep: $(COMMON)/lib/libcrypto$(EXT_SO_VER)
$(COMMON)/lib/libssl$(EXT_A).dep: $(COMMON)/lib/libssl$(EXT_SO_VER)

$P/libcrypto$(EXT_SO) $P/libssl$(EXT_SO): $P/build.ts

else # ifeq ($(strip $(BUILDENV.OPENSSL_LINKAGE-master)),shared)

$(error BUILDENV.OPENSSL_LINKAGE-master is $(BUILDENV.OPENSSL_LINKAGE-master), neither static nor shared for !windows)

endif # ifeq ($(strip $(BUILDENV.OPENSSL_LINKAGE-master)),shared)
endif # ifeq ($(strip $(BUILDENV.OPENSSL_LINKAGE-master)),static)

# STATIC and SHARED definitions
$(call declare-lib-deps, ssl, crypto)
$(call declare-lib-deps, crypto, dl)
$(call declare-lib-deps, crypto, pthread)

endif # ifndef AKAMAKE-COMMON-BUILD

$P/DEP-COMPS :=
$P/DEP-LIBS :=
$P/TARGETS :=
$P/SRC :=

ifdef FIPSBUILD
$(error OpenSSL 1.1.1 does not support FIPS)
endif # ifdef FIPSBUILD

ifdef MAKE_PARALLEL
$P/SYSTEM_MAKE = $(MAKE_PARALLEL)
else ifdef MAKE_SERIAL
$P/SYSTEM_MAKE = $(MAKE_SERIAL)
else ifdef SYSTEM_MAKE
$P/SYSTEM_MAKE = $(SYSTEM_MAKE)
else # ifdef SYSTEM_MAKE
$P/SYSTEM_MAKE = make
endif # ifdef MAKE_PARALLEL

#
# clean up rules - outside of the NOBUILD_TARGETS check
#
.PHONY: $P/myclean

$P/CLEAN := $P/myclean

$P/myclean:
	-if [ -f $P/Makefile ]; then $($P/SYSTEM_MAKE) -C $P clean; fi
	-rm -f $P/*.ts
	-rm -rf $P/obj32 $P/lib32 $P/dll_obj32 $P/dll_lib32
	-rm -f $P/*.lib $P/*.dll_lib
	-rm -f $P/buildenv.*
	-rm -f $P/MINFO
	-rm -f $P/Makefile
	-rm -f $P/makefile
	-find $P -name "*.gc??" -delete
	-rm -f $P/akamake-dynamic-build-deps.mak
	-rm -f $P/component-configure
	-rm -f $P/configdata.pm
	-rm -f $P/crypto/include/internal/bn_conf.h
	-rm -f $P/crypto/include/internal/dso_conf.h
	-rm -f $P/include/openssl/opensslconf.h

ifeq ($(filter $(NOBUILD_TARGETS),$(MAKECMDGOALS)),)
ifndef AKAMAKE-COMMON-BUILD

#### LINUX and UNIX ####

# SPOILER ALERT!  Do not read this if you want to spend a long time
# figuring out how config picks a platform!
# akamake-env.mak includes checks for each platform, and assigns the
# platform to $P/BUILDTARGET, which is passed to the ./Configure
# script. ./config is not used

# Configure options
$P/CONFIGURE_PREREQUISITES := $P/Configure $P/build.info $P/akamake

# Next line intentional "=" - krose, 12/10/2001
$P/% : CONFIGURE_SHARED = cd $P && ($(CONFIGURE_ENV) ./Configure $($P/SHAREDFEATURES) $($P/BUILDTARGET))
$P/% : CONFIGURE_STATIC = cd $P && ($(CONFIGURE_ENV) ./Configure $($P/CONFIGFEATURES) $($P/BUILDTARGET))
$P/% : CONFIGURE_STEP = $(if $($P/NOSHARED),$(CONFIGURE_STATIC),$(CONFIGURE_SHARED))
$P/% : GENERATE_BUILD = $($P/SYSTEM_MAKE) -C $P build_generated
$P/% : MAKE_STEP = $($P/SYSTEM_MAKE) -C $P $($P/OPENSSL-TARGET)
$P/% : EXTRA_STEP =
$P/% : TEST_STEP = $($P/SYSTEM_MAKE) -C $P test

#### COMMON ####
$P/third-party: $P/build.ts

$P/component-configure: $P/configure.ts

.DELETE_ON_ERROR: $P/akamake-dynamic-build-deps.mak
$P/akamake-dynamic-build-deps.mak:
	(echo '$$P/build.ts: \' && find $P -name '*.[ch]' | sort | sed -e 's ^$P $$P ;s/$$/ \\/' && echo) >$@

#' Fix for syntax highlighting fail in vim/emacs

ifdef IN_AKAMAKE
$(call include-if-exist,$P/akamake-dynamic-build-deps.mak)
endif # ifdef IN_AKAMAKE

# If building a shared library, detect whether other components have attempted
# to enable features that conflict with the set used for the shared library
# bundle (i.e., $P/SHAREDFEATURES).
# Must used delayed evaluation ('=') since openssl/enable/foo/akamake could set
# $P/NOSHARED at some point after this.
# --bkaduk 2016-03-28
ifeq ($(strip $(BUILDENV.OPENSSL_LINKAGE-master)),shared)
$P/% : CHECK_SHARED_FLAGS = $(if $($P/NOSHARED), $(error The selected feature(s) $(strip $($P/NOSHARED)) are not enabled in the shared OpenSSL library installed by the platform, define $$P/BUILDENV.$(BUILDENV.BASEOS).OPENSSL_LINKAGE-master to static in your akamake file and DEP-COMP on openssl/enable/static to build with the static library),)
else # ifeq ($(strip $(BUILDENV.OPENSSL_LINKAGE-master)),shared)
$P/% : CHECK_SHARED_FLAGS =
endif # ifeq ($(strip $(BUILDENV.OPENSSL_LINKAGE-master)),shared)
# Implement a delayed (build-time) check to enforce that the master component has
# opted in for a static build.  Any component can DEP-COMP on openssl/enable/static
# which would otherwise drop us into an inconsistent state w.r.t. our EXP-LIBS
# and such
$P/% : CHECK_STATIC_FLAGS = $(if $(filter $(BASE_PATH)/openssl/enable/static/,$($(MASTER)/REC-DEP-COMPS)),$(if $(filter shared,$(BUILDENV.OPENSSL_LINKAGE-master)),$(error A component depends on openssl/enable/static but the master component does not; the master component must do so to enable a static openssl build)))

# ./config step
$P/configure.ts: $($P/CONFIGURE_PREREQUISITES)
	@$(CHECK_STATIC_FLAGS)
	@$(CHECK_SHARED_FLAGS)
	$(CONFIGURE_STEP)
	$(GENERATE_BUILD)
	@perl $P/configdata.pm -d
	@echo 'Configure Step: $(CONFIGURE_STEP)' > $@
	@echo 'No Shared: $($P/NOSHARED)' >> $@
	@echo 'Make Step: $(MAKE_STEP)' >> $@
	@perl $P/configdata.pm -d >> $@

$(addprefix $(call get-headers-local-path)/,$($P/CONFIG-GEN-HEADERS)) : $P/configure.ts
	@if [ ! -e $@ ]; then \
		echo '**** ERROR: Header file $@ missing.  Please re-run akamake.'; \
		rm -f $P/configure.ts $P/build.ts ; \
		exit 1; \
	fi
	@touch $@

# make step
$P/build.ts: $P/configure.ts
	$(MAKE_STEP)
	$(EXTRA_STEP)
	@echo "$(MAKE_STEP)" > $@

# if ar cq fails, force creation of an empty archive
$P/libcrypto.a $P/libssl.a: $P/build.ts
	@ar qc $@ || (ar qc $@ $P/crypto/cversion.o && ar d $@ cversion.o)
	@touch $@ # update mtime, possible redundant

.PHONY: $P/mytest

$P/TESTS := $P/mytest

$P/mytest: $P/build.ts
	$(TEST_STEP)
	echo Test successful.

endif # ifndef AKAMAKE-COMMON-BUILD

endif # ifeq ($(filter $(NOBUILD_TARGETS),$(MAKECMDGOALS)),)

endif # ifndef ATTR_ONLY

######################################################################

# BUILD ENVIRONMENT
#
# In this section, you can specify variables that affect the build environment.
# These are just examples of syntax; don't modify or uncomment anything here
# unless you have identified a specific requirement or restriction.

# $P/BUILDENV.<OS or base OS>.<variable>-master := <single value>
# $P/BUILDENV.<OS or base OS>.<variable>-supported := <list of supported values>

# $P/BUILDENV.linux.TARGET_ARCH-master := x86_64
# $P/BUILDENV.linux.TARGET_ARCH-supported := x86_64 i686

$P/BUILDENV.linux.FILE_OFFSET_BITS-master := 32
$P/BUILDENV.linux.FILE_OFFSET_BITS-supported := 32 64

### DO NOT EDIT BELOW ################################################
include $(AKAMAKE)/akamake.m.master
