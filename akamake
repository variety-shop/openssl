#! /bin/sh
# -*- Makefile -*-
magic_startup_code=a; cd `echo "$0" | sed 's@^[^/]*$@.@; s@/[^/]*$@@;'` && exec make -f `basename $0` ${1+"$@"}
#
# This file contains component specific dependency rules.

#
# No operating system (environment) rules are contained here directly.
# They are include from Akamake-env file.  Autoconf stuff takes
# place in the akamake-env file.
#
# Detail discussion: quality.akamai.com/Release/CommonMake.html
#

all: build  # build is defined in Akamake/akamaster.mak


#********************************************************************
#**** Section 1:  establish essential paths and component title ****
#****      TODO:  fill in component directory information
#********************************************************************

# C: name of this component's directory
C := openssl


#********************************************************************
#**** Section 2:  directory construction, load of environment file
#********************************************************************

# akamake definitions, do NOT edit
BASE_PATH := $(firstword $(BASE_PATH) $(subst /$C-xx,,$(CURDIR)-xx))
P := $(BASE_PATH)/$C
REF_PATH := $(firstword $(REF_PATH) NoValidPath)
AKAMAKE := $(firstword $(wildcard $(BASE_PATH)/Akamake) $(REF_PATH)/Akamake)

# This include can come from the standard environment file in
# $(AKAMAKE) directory.  It will automatically load a local
# akamake-env.mak, if it exists.
ifndef ATTR_ONLY
-include $(AKAMAKE)/akamake-env.mak
endif

# We need this earlier than most akamake files
$P/%: P := $P

# Disable OpenSSL ciphers/prototools
# See Configure script to see automatically disabled/enabled features
# Note: no-rc2 breaks the CMS unittests
# Note: no-bf, no-rc5, no-idea breaks ASCI
# Note: no-cast no-ripemd breaks keyagent

ifndef MASTER

# Compiling OpenSSL in standalone mode
# only enable TLSv1, keep DTLSv1/SSLv3/v2 disabled
$P/configure.ts : CONFIGFLAGS := $(filter-out no-bf,$(CONFIGFLAGS)) enable-bf
$P/configure.ts : CONFIGFLAGS := $(filter-out no-cast,$(CONFIGFLAGS)) enable-cast
$P/configure.ts : CONFIGFLAGS := $(filter-out no-md4,$(CONFIGFLAGS)) enable-md4
$P/configure.ts : CONFIGFLAGS := $(filter-out no-psk,$(CONFIGFLAGS)) enable-psk
$P/configure.ts : CONFIGFLAGS := $(filter-out no-rc2,$(CONFIGFLAGS)) enable-rc2
$P/configure.ts : CONFIGFLAGS := $(filter-out no-rc4,$(CONFIGFLAGS)) enable-rc4
$P/configure.ts : CONFIGFLAGS := $(filter-out no-ripemd,$(CONFIGFLAGS)) enable-ripemd
$P/configure.ts : CONFIGFLAGS := $(filter-out no-tls1,$(CONFIGFLAGS)) enable-tls1

OPENSSL-TARGET := $(OPENSSL-TARGET) all

else

# Compiling OpenSSL as a component
OPENSSL-TARGET := $(OPENSSL-TARGET) build_crypto

endif

ifeq ($(AKARELEASE_PLATFORM),btf-anaconda)
AKAMAKE-OPENSSL-WITH-FPIC := 1
endif

ifdef AKAMAKE-LINUX-BUILD-64
AKAMAKE-OPENSSL-WITH-FPIC := 1
endif

ifdef AKAMAKE-OPENSSL-WITH-FPIC
$P/configure.ts : CONFIGFLAGS := $(CONFIGFLAGS) -fPIC
endif

ifdef GCOV
# enable coverage
$P/configure.ts : CONFIGFLAGS := $(CONFIGFLAGS) -ftest-coverage -fprofile-arcs
endif

# NOTE: changes to compiler options (CFLAGS & CXXFLAGS) and
#        addition of operating system specific libraries (LIBS)
#        need to be isolated in a local akamake-env.mak file.
#
# Add search path += statements here for CPPFLAGS (-I options)
#   and LIBS (-L options) IF AND ONLY IF the local akamake-env.mak
#   file is not necessary.  The "$P/% : " prefix is essential.
#
# Also, $P/DEP-LIBS is automatically transformed and added to LIBS.

# $P/% : CPPFLAGS +=
# $P/% : DEFS +=

ifeq ($(MAKECMDGOALS),debug)
# $P/% : DEFS += -DDEBUG
endif
# $P/% : LIBS +=

#********************************************************************
#**** Section 3:  Exported Interface
#****      TODO:  Fill in directory names and header/library files
#********************************************************************

# REMINDER:  All variables, target, and prerequisites need $P prefix
#            Key variables are $P/HEADERS and $P/EXP-LIBS

#  HEADERS-LOCAL-DIRECTORY: relative directory of exported interface headers
# HEADERS-COMMON-DIRECTORY: destination directory in common/include for
#                            exported interface headers
$P/HEADERS-LOCAL-DIRECTORY := include/openssl
$P/HEADERS-COMMON-DIRECTORY := openssl

#     LIBS_LOCAL_DIRECTORY: relative directory of exported library files
$P/LIBS-LOCAL-DIRECTORY :=

# $P/EXP-LIBS: List of exported library files (relative to LIBS_LOCAL_DICTORY)

ifndef AKAMAKE-WIN-BUILD
$P/EXP-LIBS := libopenssl.a libcrypto.a libssl.a
$(call declare-lib-deps, ssl, crypto)
$(call declare-lib-deps, crypto, dl)
else
$P/EXP-LIBS := libopenssl.lib libcrypto.lib libopenssl.dll_lib libcrypto.dll_lib
$(call declare-lib-deps, openssl, crypto)
endif

ifndef quote-sh
quote-sh=$(squote)$(subst $(squote),$(squote)$(dquote)$(squote)$(dquote)$(squote),$1)$(squote)
endif

ifndef include-if-exist
include-if-exist=$(eval -include $1)
endif

ifdef IN_AKAMAKE
ifndef ATTR_ONLY

ifeq ($(filter $(NOBUILD_TARGETS),$(MAKECMDGOALS)),)

# The headers are determined by the output of the configure step. This rule
# creates a makefile with the list of headers, which in combination with the
# $P/headers-defined target causes make to (eventually) restart so we can
# have a properly-populated $P/HEADERS. Because the configure prerequisite is
# order-only, make will restart only if akamake-headers.mak didn't exist
# previously, even if configure is re-run. As a result, adding headers
# without cleaning will result in new headers not being installed.
.DELETE_ON_ERROR: $P/akamake-headers.mak
$P/akamake-headers.mak: | $P/configure.ts
	echo $(call quote-sh,$$P/HEADERS := $(patsubst $P/$($P/HEADERS-LOCAL-DIRECTORY)/%,%,$(shell find $(call quote-sh,$P/$($P/HEADERS-LOCAL-DIRECTORY)) -name '*.h'))) >$@
	echo $(call quote-sh,$$P/HEADERS-MAKEFILE-LOADED := 1) >>$@

endif # ifeq ($(filter $(NOBUILD_TARGETS),$(MAKECMDGOALS)),)

$(call include-if-exist,$P/akamake-headers.mak)

ifeq ($(filter $(NOBUILD_TARGETS),$(MAKECMDGOALS)),)

ifneq ($($P/HEADERS-MAKEFILE-LOADED),)
# Only define this target once the above makefile has been generated, which
# gates everything that uses openssl on that happening.
$P/headers-defined:
endif

$(call headers-installed,$C): | $P/headers-defined
$P/component-configure: | $P/headers-defined

endif # ifeq ($(filter $(NOBUILD_TARGETS),$(MAKECMDGOALS)),)

endif # ifndef ATTR_ONLY
endif # ifdef IN_AKAMAKE

#********************************************************************
#**** Section 4:  Prerequisites (dependencies)
#****      TODO:  List names of component directories AND specific
#****             library files needed for this component's build
#********************************************************************

$P/DEP-COMPS :=
$P/DEP-LIBS :=
$P/TARGETS :=
$P/SRC :=

#$(warning FIPSBUILD is '$(FIPSBUILD)')
ifdef FIPSBUILD
# Include fipscanister build variables.
-include $(call get-component-path,fipscanister)/enable_fips_with_akamai_openssl.mk
$P/DEP-COMPS := $($P/DEP-COMPS) fipscanister
endif

#
# clean up rules
#
.PHONY: $P/clean $P/distclean

ifdef MAKE_PARALLEL
$P/SYSTEM_MAKE = $(MAKE_PARALLEL)
else
ifdef SYSTEM_MAKE
$P/SYSTEM_MAKE = $(SYSTEM_MAKE)
else
$P/SYSTEM_MAKE = make
endif
endif

$P/clean:
	$(CLEAN-LOCAL)
	$(CLEAN-COMMON)
	-$($P/SYSTEM_MAKE) -C $P clean
	-rm -f $P/configure.ts $P/build.ts
	-rm -rf $P/obj32 $P/lib32 $P/dll_obj32 $P/dll_lib32
	-rm -f $P/*.lib $P/*.dll_lib
	-rm -f $P/buildenv.*
	-rm -f $P/MINFO
	-rm -f $P/ms/version32.rc
	-rm -f $P/akamake-dynamic-build-deps.mak
	-rm -f $P/akamake-headers.mak
	-rm -f $P/krb5.h
	-find $P -name "Makefile.save" -delete
	-find $P -name "*.gc??" -delete

$P/distclean:
	$(DISTCLEAN-LOCAL)
	$(DISTCLEAN-COMMON)
	-$($P/SYSTEM_MAKE) -C $P dclean
	-rm -f $P/Makefile
	-rm -f $P/include/openssl
	-rm -f $P/ms/nt.mak $P/ms/ntdll_lib.mak

#********************************************************************
#**** Section 5:  Standard rules for supporting $(COMMON) directory
#********************************************************************



#********************************************************************
#**** Section 6:  Make rules necessary for building binaries, libraries,
#****             derived headers, and third party makefile execution.
#********************************************************************

#
# WARNING:  Do NOT assume that the make is running in the component's
#           subdirectory.  Also do not use $P and $C within the
#           commands for the rules.   The values are invalid by the
#           time the rules execute.  Used Implied Rule variables.

ifeq ($(filter $(NOBUILD_TARGETS),$(MAKECMDGOALS)),)

ifndef AKAMAKE-WIN-BUILD

#### LINUX and UNIX ####

# Figure out NO_FOMIT_FRAME_POINTER status
_openssl_default-if-null = $(if $(strip $(1)),$(1),$(2))
ifeq ($(strip $(MASTER)),)
  # Special case: MASTER is blank in $(MASTER)/akamake.
  # ("/OPENSSL...-master" should be unset anyway, so we would get "no"
  # anyway...  Hmm...)
  $P/OPENSSL_BUILDENV_NO_FOMIT_FRAME_POINTER := no
else
  $P/OPENSSL_BUILDENV_NO_FOMIT_FRAME_POINTER := $(call _openssl_default-if-null, $($(MASTER)/OPENSSL_BUILDENV.$(BUILDENV.OS).NO_FOMIT_FRAME_POINTER-master), $(call _openssl_default-if-null, $($(MASTER)/OPENSSL_BUILDENV.$(BUILDENV.BASEOS).NO_FOMIT_FRAME_POINTER-master), no))
endif

ifneq ($(strip $(OPENSSL_BUILDENV_NO_FOMIT_FRAME_POINTER-master.OVERRIDE)),)
$P/OPENSSL_BUILDENV_NO_FOMIT_FRAME_POINTER := $(OPENSSL_BUILDENV_NO_FOMIT_FRAME_POINTER-master.OVERRIDE)
endif

#  Enforce "yes" or "no" setting; set the _OPTION value, which is
#  actually used in akamake-env.mak.
ifeq ($(strip $($P/OPENSSL_BUILDENV_NO_FOMIT_FRAME_POINTER)),yes)
  $P/OPENSSL_BUILDENV_NO_FOMIT_FRAME_POINTER_OPTION := -no-fomit-frame-pointer
else
  ifeq ($(strip $($P/OPENSSL_BUILDENV_NO_FOMIT_FRAME_POINTER)),no)
    $P/OPENSSL_BUILDENV_NO_FOMIT_FRAME_POINTER_OPTION :=
  else
    $(error Invalid $P/OPENSSL_BUILDENV_NO_FOMIT_FRAME_POINTER: "$($P/OPENSSL_BUILDENV_NO_FOMIT_FRAME_POINTER)")
  endif
endif

ifdef ASAN_BUILD
  $P/OPENSSL_BUILDENV_NO_FOMIT_FRAME_POINTER_OPTION := -no-fomit-frame-pointer
endif

$P/buildenv.NO_FOMIT_FRAME_POINTER.$(strip $($P/OPENSSL_BUILDENV_NO_FOMIT_FRAME_POINTER)):
	if [ ! -e $P/buildenv.NO_FOMIT_FRAME_POINTER.$(strip $($P/OPENSSL_BUILDENV_NO_FOMIT_FRAME_POINTER)) ]; then \
		if [ -e $P/buildenv.NO_FOMIT_FRAME_POINTER.* ]; then \
			echo distcleaning opensssl due to NO_FOMIT_FRAME_POINTER change... ; \
			cd $P && make -f akamake distclean && \
			rm -f $P/buildenv.NO_FOMIT_FRAME_POINTER.* ; \
		fi && \
		touch $P/buildenv.NO_FOMIT_FRAME_POINTER.$(strip $($P/OPENSSL_BUILDENV_NO_FOMIT_FRAME_POINTER)); \
	fi

ifdef FIPSBUILD
#### fipscanister has all the modules precompiled due to compliance reasons, so we'll have to specify which one ####
#### we'll want to use here, this is the same environment detection used in the fipscanister akamake ####

# [jhorsfal 03/09/2017] Updates for GCDS, Removed OS selection code, this should all come from fipscanister variables.

# OS Specific FIPS lib directory
$P/FIPS_LIBDIR = $($(call get-component-path,fipscanister)/FIPS_LIBDIR)
# OS Specific FIPS root
$P/CURRENT_OS_FIPS_DIR = $($(call get-component-path,fipscanister)/FIPSDIR)
# FIPS Linker
$P/FIPSLD = $($(call get-component-path,fipscanister)/FIPSLD)
# FIPS build target
$P/FIPS_BUILD_TARGET = $(call get-component-path,fipscanister)/akamake.auto_os.ts
# Assert minnimum fips version
$(call assert_min_version,fipscanister,2.0.13)

$P/% : FIPSFLAGS = fips --with-fipsdir=$($P/CURRENT_OS_FIPS_DIR) --with-fipslibdir=$($P/FIPS_LIBDIR)

$P/buildenv.FIPS: $($P/FIPS_BUILD_TARGET)
	echo "FIPS build enabled" > $P/buildenv.FIPS
else # ifdef FIPSBUILD
$P/% : FIPSFLAGS =
$P/buildenv.FIPS:
	echo "FIPS build disabled" > $P/buildenv.FIPS
endif # ifdef FIPSBUILD

# SPOILER ALERT!  Do not read this if you want to spend a long time
# figuring out how config picks a platform!  "./config" is an openssl
# script which uses "uname"-type information to choose a platform.  On
# a typical linux system, the answer ends up being "linux-elf".  This
# value is passed on to openssl's Configure script as the first
# argument followed by any additional arguments to ./config.  The
# openssl/akamake-env.mak file matches on several known compiler
# configurations and sets "CONFIGFLAGS" accordingly.  These "options"
# include a platform specification "akamai-..." which is passed to
# ./config.  ./config then runs "./Configure linux-elf akamai-...", so
# this second setting overrides the first one.  -lisiecki, 10/16/2008

# Configure options
$P/CONFIGURE_PREREQUISITES := $P/config $P/Configure $P/Makefile.org $P/akamake $P/buildenv.NO_FOMIT_FRAME_POINTER.$(strip $($P/OPENSSL_BUILDENV_NO_FOMIT_FRAME_POINTER)) $P/buildenv.FIPS

$P/Makefile.org: $P/config $P/Configure

# Define the OPENSSL-CC as the compiler to use
# Use '=' for assignements here
OPENSSL-CC = CC="$(CC)"
ifdef FIPSBUILD
# FIPS requires their own linker to build correctly so we're doing that here - sverasch 7/24/14
OPENSSL-CC = CC="$($P/FIPSLD)" FIPSLD_CC="$(CC)"
endif

# Next line intentional "=" - krose, 12/10/2001
$P/% : MAKE_STEP = $($P/SYSTEM_MAKE) -C $P $(OPENSSL-CC) $(OPENSSL-TARGET)
# configure the system for options
$P/% : CONFIGURE_STEP = cd $P && (./config $(CONFIGFLAGS) $(FIPSFLAGS))
$P/% : DEPEND_STEP = $($P/SYSTEM_MAKE) -C $P $(OPENSSL-CC) depend
$P/% : EXTRA_STEP =
$P/% : TEST_STEP = $($P/SYSTEM_MAKE) -C $P $(OPENSSL-CC) test

else # ifndef AKAMAKE-WIN-BUILD

#### WIN32 ####
ifndef ATTR_ONLY
ifeq ($(filter ActiveState,$(shell perl -v)),)
$(error "WIN32 version of openssl requires use of ActiveState Perl (http://www.ActiveState.com)" )
endif
endif

ifdef AKAMAKE-VC9-BUILD
$P/VC=VC9
ifdef AKAMAKE-WIN64-BUILD
$P/VCFG=akamai-VC-WIN64A
else
$P/VCFG=akamai-VC-WIN32
endif
else
$P/VC=VC7
$P/VCFG=akamai-VC-WIN32
endif

$P/CONFIGURE_PREREQUISITES := $P/Configure $P/Makefile.org $P/akamake $P/util/mk1mf.pl $P/util/mkfiles.pl $P/ms/do_aka_nt.bat
$P/% : CONFIGURE_STEP = cd $P && perl Configure $($P/VCFG) $(CONFIGFLAGS) && ms/do_aka_nt.bat $(CONFIGFLAGS) $($P/VC)
$P/% : DEPEND_STEP := cd $P  && $(NMAKE) -f ms/nt.mak headers
$P/% : MAKE_STEP := cd $P && $(NMAKE) -f ms/nt.mak && $(NMAKE) -f ms/ntdll_lib.mak
$P/% : EXTRA_STEP := \
 cp $P/lib32/libeay32.lib $P/libcrypto.lib && \
 cp $P/lib32/ssleay32.lib $P/libopenssl.lib && \
 cp $P/dll_lib32/libeay32.dll_lib $P/libcrypto.dll_lib && \
 cp $P/dll_lib32/ssleay32.dll_lib $P/libopenssl.dll_lib
$P/% : TEST_STEP := cd $P && $(NMAKE) -f ms/nt.mak test && $(NMAKE) -f ms/ntdll_lib.mak test

endif # ifndef AKAMAKE-WIN-BUILD

#### COMMON ####
$P/third-party: $P/build.ts

$P/component-configure: $P/configure.ts

# ./config step
$P/configure.ts: $($P/CONFIGURE_PREREQUISITES)
	$(CONFIGURE_STEP)
	$(DEPEND_STEP)
	@echo $(CONFIGFLAGS) > $@

.DELETE_ON_ERROR: $P/akamake-dynamic-build-deps.mak
$P/akamake-dynamic-build-deps.mak:
	(echo '$$P/build.ts: \' && find $P -name '*.[ch]' ! -name krb5.h | sort | sed -e 's ^$P $$P ;s/$$/ \\/' && echo) >$@

#' Fix for syntax highlighting fail in vim/emacs

ifdef IN_AKAMAKE
ifndef ATTR_ONLY
$(call include-if-exist,$P/akamake-dynamic-build-deps.mak)
endif # ifndef ATTR_ONLY
endif # ifdef IN_AKAMAKE

# make step
$P/build.ts: $P/configure.ts
	$(MAKE_STEP)
	$(EXTRA_STEP)
	@touch $@

# if ar cq fails, force creation of an empty archive
$P/libcrypto.a $P/libssl.a: $P/build.ts
	@ar qc $@ || (ar qc $@ $P/crypto/cversion.o && ar d $@ cversion.o)
	@touch $@

$P/libopenssl.a: $P/libcrypto.a $P/libssl.a
	rm -f $P/libopenssl.a
	rm -rf $P/libmake-tmp
	mkdir $P/libmake-tmp
	(cd $P/libmake-tmp && ar x $P/libcrypto.a && ar x $P/libssl.a && ar qc $P/libopenssl.a *)
	rm -rf $P/libmake-tmp
	ranlib $P/libopenssl.a

else # ifeq ($(filter $(NOBUILD_TARGETS),$(MAKECMDGOALS)),)

### NON-BUILDS ###########################################################

endif # ifeq ($(filter $(NOBUILD_TARGETS),$(MAKECMDGOALS)),)

# BUILD ENVIRONMENT
#
# In this section, you can specify variables that affect the build
# environment.

$P/BUILDENV.linux-2.4.CC-supported := gcc-2.95 gcc-3.3 gcc-3.4 gcc-4.0 gcc-4.1
$P/BUILDENV.linux-2.4.CC-master := gcc-3.3

$P/BUILDENV.linux-2.4.FILE_OFFSET_BITS-master := 32
$P/BUILDENV.linux-2.4.FILE_OFFSET_BITS-supported := 32 64

$P/BUILDENV.linux.FILE_OFFSET_BITS-master := 32
$P/BUILDENV.linux.FILE_OFFSET_BITS-supported := 32 64

#********************************************************************
#**** Section 7:  Include of master rules, and recursive load of
#****             other components' and .d file make rules.  Also
#****             set up build and unit test automation targets.
#********************************************************************

$P/test: $P/build.ts
	$(TEST_STEP)
	echo Test successful.

ifndef ATTR_ONLY

include $(AKAMAKE)/akamaster.mak

else

dep_comp: $P/DEP-COMPS

$P/DEP-COMPS:
	@echo Akamake $($@)

endif


#********************************************************************
#** Anything placed past this point is probably not going to work. **
#** Especially since $P and $C are no longer valid due to recusive **
#** make file loading in akamaster.                                **
#********************************************************************
P := pbad
C := cbad
