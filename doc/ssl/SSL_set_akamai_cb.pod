=pod

=head1 NAME

SSL_get_akamai_cb, SSL_set_akamai_cb - handle event callback function

=head1 SYNOPSIS

 #include <openssl/ssl.h>

 typedef int (*SSL_AKAMAI_CB)(SSL *ssl, int event, SSL_AKAMAI_CB_DATA *data)

 void SSL_set_akamai_cb(SSL *ssl, SSL_AKAMAI_CB cb);
 SSL_AKAMAI_CB SSL_get_akamai_cb(SSL *ssl);

=head1 DESCRIPTION

SSL_set_akamai_cb() assigns B<cb> to be the Akamai callback,
called when private key operations need to be performed for an SSL object.

When B<cb> is NULL, no callback function is used.

SSL_get_akamai_cb() returns a pointer to the currently set callback
function.

SSL_AKAMAI_CB() is the application defined callback. It is invoked whenever
the SSL object has a task to perform that handles private keys during
the connect/accept handshake period.

If no SSL_AKAMAI_CB() is registered all such tasks are directly executed
by the SSL object.

=head1 CALLBACK ARGUMENTS

The callback is invoked with three arguments: B<SSL*> as the SSL object that needs
the task to be performed. B<event> is the type of event that has needs to
be done (see SSL_AKAMAI_CB_* constants). This value is informative only and the
callback might use it to select which tasks it wants to schedule or refuse.
The third argument is an B<SSL_AKAMAI_CB_DATA> structure containing arguments
necessary for the operation.

=head1 CALLBACK RETURN VALUES

If a callback is registered, its return values are interpreted as follows:

=over 4

=item E<gt>0

The callback successfully performed the operation.

=item Z<>0

The callback does not want to handle the task. The SSL object shall execute the
task itself instead. This de facto results in the same behaviour as if no
callback had been registered. This allows the application to only handle
a subset of the operations (switching on the B<event>, for example).

=item E<lt>0

The callback failed to perform the operation, or some other error.
The SSL object will treat this as an error. If this
happens during handshake, for example, the handshake will fail.

=back

=head1 EVENT TYPES

The following events are currently available for SSL.
Not all events will occur during a given SSL connection. Events vary by
client, server, protocol version, renegotiation attempts and other things. Also,
the list of tasks might vary with each release.

=over 4

=item B<SSL_AKAMAI_CB_SERVER_DECRYPT_KX>

The event indicates that the key exchange message needs to be decrypted.
Supported for RSA encrypted keys.
B<SSL_AKAMAI_CB_DATA.retval> should be set to the length of the decrypted data on success.

=item B<SSL_AKAMAI_CB_CLIENT_SIGN_CERT_VRFY>

The event indicates that the certificate verification message on the client side
needs to be signed.
B<SSL_AKAMAI_CB_DATA.retval> should be set to the length of the signature on success.

=item B<SSL_AKAMAI_CB_SERVER_SIGN_KX>

The event indicates that the key verification message needs to be signed before
before it is sent to the client.
B<SSL_AKAMAI_CB_DATA.retval> should be set to the length of the signature on success.

=item B<SSL_AKAMAI_CB_SERVER_MASTER_SECRET>

The event indicates that the server needs to calculate the master secret for RSALG support.
B<SSL_AKAMAI_CB_DATA.retval> should be set to the master key length on success.

=back

=head1 SSL_AKAMAI_CB_DATA

The SSL_AKAMAI_CB_DATA structure is used to pass data to the callback. The structure is
as follows:

 #define SSL_AKAMAI_CB_DATA_NUM 4
 struct ssl_akamai_cb_data_st {
     const EVP_PKEY* pkey;
     int md_nid;
     void* src[SSL_AKAMAI_CB_DATA_NUM];
     size_t src_len[SSL_AKAMAI_CB_DATA_NUM];
     void* dst;
     size_t dst_len;
     long retval;
 };
 typedef struct ssl_akamai_cb_data_st SSL_AKAMAI_CB_DATA;

The B<pkey> is the public key. B<md> is the message digest type used for signing.
Multiple B<src> and B<src_len>fields are provided, unused fields have B<src>=NULL and B<src_len>=0.
The B<dst_len> indicates the length of the destination buffer. If it is 0, then there
is no specified limit, although the general SSL record size is a practical limit.
The B<retval> field is used to return the actual return value; the length of the signature,
for instance.

=head1 SEE ALSO

L<ssl(3)>

=cut

=head1 COPYRIGHT

Copyright 2000-2016 The OpenSSL Project Authors. All Rights Reserved.

Licensed under the OpenSSL license (the "License").  You may not use
this file except in compliance with the License.  You can obtain a copy
in the file LICENSE in the source distribution or at
L<https://www.openssl.org/source/license.html>.

Copyright (C) 2016 Akamai Technologies. ALL RIGHTS RESERVED.

This code was originally developed by Akamai Technologies and
contributed to the OpenSSL project under the terms of the Corporate
Contributor License Agreement v1.0

=cut
