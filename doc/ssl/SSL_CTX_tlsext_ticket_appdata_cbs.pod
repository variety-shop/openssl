=pod

=head1 NAME

SSL_CTX_tlsext_ticket_appdata_cbs - set a callback for appending appdata to session tickets

=head1 SYNOPSIS

 #include <openssl/ssl.h>

 typedef int (*tlsext_ticket_appdata_size_cb_fn) (SSL *s, void *arg);
 typedef int (*tlsext_ticket_appdata_append_cb_fn) (SSL *s,
                                                    unsigned char* data_ptr,
                                                    int limit_size, void *arg);
 typedef int (*tlsext_ticket_appdata_parse_cb_fn) (SSL *s,
                                                   const unsigned char* data_ptr,
                                                   int size, void *arg);

 void SSL_CTX_tlsext_ticket_appdata_cbs(SSL_CTX *ctx,
                                        tlsext_ticket_appdata_size_cb_fn size_cb,
                                        tlsext_ticket_appdata_append_cb_fn append_cb,
                                        tlsext_ticket_appdata_parse_cb_fn parse_cb,
                                        void *arg);

=head1 DESCRIPTION

SSL_CTX_tlsext_ticket_appdata_cbs() sets three callbacks fuctions to manipulate
and retrieve application data that follows the session ticket. This application
data may be used for additional tracking by a server. Session tickets, defined in
RFC5077 provide an enhanced session resumption capability where the server
implementation is not required to maintain per session state. It only applies
to TLS and there is no SSLv3 nor DTLS implementation.

The callback is available when the OpenSSL library was built with support
for TLS extensions enabled.

The parameter I<arg> is passed to each of the callback functions for additional
context.

The callback function I<size_cb> will be called for every client instigated TLS
session when session ticket extension is presented in the TLS hello
message. It is the responsibility of this function to specify the number of additional
bytes that will be available for application use in the session ticket. The number of bytes is actually
increased by an additional 10 bytes, as there is a unique identifier and application
data length field added to the session ticket. Returning <=0 indicates that no additonal
data should be added to this session ticket.

The callback function I<append_cb> will be called to append application data to the ticket.
The I<data_ptr> agument is the memory location to write the data. The I<limit_size>> argument
is the maximum number of bytes that may be written. The callback must return the number of bytes
appended to the session ticket. Returning <=0 indicates that no additonal data has been added
to this session ticket.

The callback function I<parse_cb> will be called when a session ticket is received and
should be parsed. The I<data_ptr> argument is a pointer to the application data, and the
I<size> argument is the length of the application data. A return value of -3 indicates a
fatal error. A return value of -2 indicates that the ticket is to be dropped. A return value
of 0 indicates success. Any other value is reserved and should not be used.

=head1 NOTES

Session resumption shortcuts the TLS handshake so that the client certificate
negiotation don't occur. It makes up for this by storing client certificate
and all other negotiated state information encrypted within the ticket. In a
resumed session the applications will have all this state information available
exactly as if a full negiotation had occured.

If an attacker can obtain the key used to encrypt a session ticket, they can
obtain the master secret for any ticket using that key and decrypt any traffic
using that session, even if the ciphersuite supports forward secrecy. As
a result, applications may wish to use multiple keys and avoid using long term
keys stored in files.

Applications can use longer keys to maintain a consistent level of security.
For example if a ciphersuite uses 256 bit ciphers but only a 128 bit ticket key
the overall security is only 128 bits because breaking the ticket key will
enable an attacker to obtain the session keys.

=head1 RETURN VALUES

=over

=item size_cb

 <=0 Do not allocate additional session ticket memory
 >0  Number of bytes to allocate for application usage in the session ticket

=item append_cb

 <=0 No data appended to session ticket
 >0  Number of bytes appended to the session ticket

=item parse_cb

 -3 Fatal error
 -2 Drop the ticket
 0  No error

 All other values are reserved

=back

=head1 SEE ALSO

L<ssl(3)>, L<SSL_set_session(3)>,
L<SSL_session_reused(3)>,
L<SSL_CTX_add_session(3)>,
L<SSL_CTX_sess_number(3)>,
L<SSL_CTX_sess_set_get_cb(3)>,
L<SSL_CTX_set_session_id_context(3)>,
L<SSL_CTX_set_tlsext_ticket_key_cb(3)>,

=cut

=head1 COPYRIGHT

Copyright 2000-2016 The OpenSSL Project Authors. All Rights Reserved.

Licensed under the OpenSSL license (the "License").  You may not use
this file except in compliance with the License.  You can obtain a copy
in the file LICENSE in the source distribution or at
L<https://www.openssl.org/source/license.html>.

Copyright (C) 2016 Akamai Technologies. ALL RIGHTS RESERVED.

This code was originally developed by Akamai Technologies and
contributed to the OpenSSL project under the terms of the Corporate
Contributor License Agreement v1.0

=cut
