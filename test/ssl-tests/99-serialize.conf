# Generated with generate_ssl_tests.pl

num_tests = 1955

test-0 = 0-default
test-1 = 1-Server signature algorithms bug
test-2 = 2-verify-cert
test-3 = 3-version-negotiation
test-4 = 4-version-negotiation
test-5 = 5-version-negotiation
test-6 = 6-version-negotiation
test-7 = 7-version-negotiation
test-8 = 8-version-negotiation
test-9 = 9-version-negotiation
test-10 = 10-version-negotiation
test-11 = 11-version-negotiation
test-12 = 12-version-negotiation
test-13 = 13-version-negotiation
test-14 = 14-version-negotiation
test-15 = 15-version-negotiation
test-16 = 16-version-negotiation
test-17 = 17-version-negotiation
test-18 = 18-version-negotiation
test-19 = 19-version-negotiation
test-20 = 20-version-negotiation
test-21 = 21-version-negotiation
test-22 = 22-version-negotiation
test-23 = 23-version-negotiation
test-24 = 24-version-negotiation
test-25 = 25-version-negotiation
test-26 = 26-version-negotiation
test-27 = 27-version-negotiation
test-28 = 28-version-negotiation
test-29 = 29-version-negotiation
test-30 = 30-version-negotiation
test-31 = 31-version-negotiation
test-32 = 32-version-negotiation
test-33 = 33-version-negotiation
test-34 = 34-version-negotiation
test-35 = 35-version-negotiation
test-36 = 36-version-negotiation
test-37 = 37-version-negotiation
test-38 = 38-version-negotiation
test-39 = 39-version-negotiation
test-40 = 40-version-negotiation
test-41 = 41-version-negotiation
test-42 = 42-version-negotiation
test-43 = 43-version-negotiation
test-44 = 44-version-negotiation
test-45 = 45-version-negotiation
test-46 = 46-version-negotiation
test-47 = 47-version-negotiation
test-48 = 48-version-negotiation
test-49 = 49-version-negotiation
test-50 = 50-version-negotiation
test-51 = 51-version-negotiation
test-52 = 52-version-negotiation
test-53 = 53-version-negotiation
test-54 = 54-version-negotiation
test-55 = 55-version-negotiation
test-56 = 56-version-negotiation
test-57 = 57-version-negotiation
test-58 = 58-version-negotiation
test-59 = 59-version-negotiation
test-60 = 60-version-negotiation
test-61 = 61-version-negotiation
test-62 = 62-version-negotiation
test-63 = 63-version-negotiation
test-64 = 64-version-negotiation
test-65 = 65-version-negotiation
test-66 = 66-version-negotiation
test-67 = 67-version-negotiation
test-68 = 68-version-negotiation
test-69 = 69-version-negotiation
test-70 = 70-version-negotiation
test-71 = 71-version-negotiation
test-72 = 72-version-negotiation
test-73 = 73-version-negotiation
test-74 = 74-version-negotiation
test-75 = 75-version-negotiation
test-76 = 76-version-negotiation
test-77 = 77-version-negotiation
test-78 = 78-version-negotiation
test-79 = 79-version-negotiation
test-80 = 80-version-negotiation
test-81 = 81-version-negotiation
test-82 = 82-version-negotiation
test-83 = 83-version-negotiation
test-84 = 84-version-negotiation
test-85 = 85-version-negotiation
test-86 = 86-version-negotiation
test-87 = 87-version-negotiation
test-88 = 88-version-negotiation
test-89 = 89-version-negotiation
test-90 = 90-version-negotiation
test-91 = 91-version-negotiation
test-92 = 92-version-negotiation
test-93 = 93-version-negotiation
test-94 = 94-version-negotiation
test-95 = 95-version-negotiation
test-96 = 96-version-negotiation
test-97 = 97-version-negotiation
test-98 = 98-version-negotiation
test-99 = 99-version-negotiation
test-100 = 100-version-negotiation
test-101 = 101-version-negotiation
test-102 = 102-version-negotiation
test-103 = 103-version-negotiation
test-104 = 104-version-negotiation
test-105 = 105-version-negotiation
test-106 = 106-version-negotiation
test-107 = 107-version-negotiation
test-108 = 108-version-negotiation
test-109 = 109-version-negotiation
test-110 = 110-version-negotiation
test-111 = 111-version-negotiation
test-112 = 112-version-negotiation
test-113 = 113-version-negotiation
test-114 = 114-version-negotiation
test-115 = 115-version-negotiation
test-116 = 116-version-negotiation
test-117 = 117-version-negotiation
test-118 = 118-version-negotiation
test-119 = 119-version-negotiation
test-120 = 120-version-negotiation
test-121 = 121-version-negotiation
test-122 = 122-version-negotiation
test-123 = 123-version-negotiation
test-124 = 124-version-negotiation
test-125 = 125-version-negotiation
test-126 = 126-version-negotiation
test-127 = 127-version-negotiation
test-128 = 128-version-negotiation
test-129 = 129-version-negotiation
test-130 = 130-version-negotiation
test-131 = 131-version-negotiation
test-132 = 132-version-negotiation
test-133 = 133-version-negotiation
test-134 = 134-version-negotiation
test-135 = 135-version-negotiation
test-136 = 136-version-negotiation
test-137 = 137-version-negotiation
test-138 = 138-version-negotiation
test-139 = 139-version-negotiation
test-140 = 140-version-negotiation
test-141 = 141-version-negotiation
test-142 = 142-version-negotiation
test-143 = 143-version-negotiation
test-144 = 144-version-negotiation
test-145 = 145-version-negotiation
test-146 = 146-version-negotiation
test-147 = 147-version-negotiation
test-148 = 148-version-negotiation
test-149 = 149-version-negotiation
test-150 = 150-version-negotiation
test-151 = 151-version-negotiation
test-152 = 152-version-negotiation
test-153 = 153-version-negotiation
test-154 = 154-version-negotiation
test-155 = 155-version-negotiation
test-156 = 156-version-negotiation
test-157 = 157-version-negotiation
test-158 = 158-version-negotiation
test-159 = 159-version-negotiation
test-160 = 160-version-negotiation
test-161 = 161-version-negotiation
test-162 = 162-version-negotiation
test-163 = 163-version-negotiation
test-164 = 164-version-negotiation
test-165 = 165-version-negotiation
test-166 = 166-version-negotiation
test-167 = 167-version-negotiation
test-168 = 168-version-negotiation
test-169 = 169-version-negotiation
test-170 = 170-version-negotiation
test-171 = 171-version-negotiation
test-172 = 172-version-negotiation
test-173 = 173-version-negotiation
test-174 = 174-version-negotiation
test-175 = 175-version-negotiation
test-176 = 176-version-negotiation
test-177 = 177-version-negotiation
test-178 = 178-version-negotiation
test-179 = 179-version-negotiation
test-180 = 180-version-negotiation
test-181 = 181-version-negotiation
test-182 = 182-version-negotiation
test-183 = 183-version-negotiation
test-184 = 184-version-negotiation
test-185 = 185-version-negotiation
test-186 = 186-version-negotiation
test-187 = 187-version-negotiation
test-188 = 188-version-negotiation
test-189 = 189-version-negotiation
test-190 = 190-version-negotiation
test-191 = 191-version-negotiation
test-192 = 192-version-negotiation
test-193 = 193-version-negotiation
test-194 = 194-version-negotiation
test-195 = 195-version-negotiation
test-196 = 196-version-negotiation
test-197 = 197-version-negotiation
test-198 = 198-version-negotiation
test-199 = 199-version-negotiation
test-200 = 200-version-negotiation
test-201 = 201-version-negotiation
test-202 = 202-version-negotiation
test-203 = 203-version-negotiation
test-204 = 204-version-negotiation
test-205 = 205-version-negotiation
test-206 = 206-version-negotiation
test-207 = 207-version-negotiation
test-208 = 208-version-negotiation
test-209 = 209-version-negotiation
test-210 = 210-version-negotiation
test-211 = 211-version-negotiation
test-212 = 212-version-negotiation
test-213 = 213-version-negotiation
test-214 = 214-version-negotiation
test-215 = 215-version-negotiation
test-216 = 216-version-negotiation
test-217 = 217-version-negotiation
test-218 = 218-version-negotiation
test-219 = 219-version-negotiation
test-220 = 220-version-negotiation
test-221 = 221-version-negotiation
test-222 = 222-version-negotiation
test-223 = 223-version-negotiation
test-224 = 224-version-negotiation
test-225 = 225-version-negotiation
test-226 = 226-version-negotiation
test-227 = 227-version-negotiation
test-228 = 228-version-negotiation
test-229 = 229-version-negotiation
test-230 = 230-version-negotiation
test-231 = 231-version-negotiation
test-232 = 232-version-negotiation
test-233 = 233-version-negotiation
test-234 = 234-version-negotiation
test-235 = 235-version-negotiation
test-236 = 236-version-negotiation
test-237 = 237-version-negotiation
test-238 = 238-version-negotiation
test-239 = 239-version-negotiation
test-240 = 240-version-negotiation
test-241 = 241-version-negotiation
test-242 = 242-version-negotiation
test-243 = 243-version-negotiation
test-244 = 244-version-negotiation
test-245 = 245-version-negotiation
test-246 = 246-version-negotiation
test-247 = 247-version-negotiation
test-248 = 248-version-negotiation
test-249 = 249-version-negotiation
test-250 = 250-version-negotiation
test-251 = 251-version-negotiation
test-252 = 252-version-negotiation
test-253 = 253-version-negotiation
test-254 = 254-version-negotiation
test-255 = 255-version-negotiation
test-256 = 256-version-negotiation
test-257 = 257-version-negotiation
test-258 = 258-version-negotiation
test-259 = 259-version-negotiation
test-260 = 260-version-negotiation
test-261 = 261-version-negotiation
test-262 = 262-version-negotiation
test-263 = 263-version-negotiation
test-264 = 264-version-negotiation
test-265 = 265-version-negotiation
test-266 = 266-version-negotiation
test-267 = 267-version-negotiation
test-268 = 268-version-negotiation
test-269 = 269-version-negotiation
test-270 = 270-version-negotiation
test-271 = 271-version-negotiation
test-272 = 272-version-negotiation
test-273 = 273-version-negotiation
test-274 = 274-version-negotiation
test-275 = 275-version-negotiation
test-276 = 276-version-negotiation
test-277 = 277-version-negotiation
test-278 = 278-version-negotiation
test-279 = 279-version-negotiation
test-280 = 280-version-negotiation
test-281 = 281-version-negotiation
test-282 = 282-version-negotiation
test-283 = 283-version-negotiation
test-284 = 284-version-negotiation
test-285 = 285-version-negotiation
test-286 = 286-version-negotiation
test-287 = 287-version-negotiation
test-288 = 288-version-negotiation
test-289 = 289-version-negotiation
test-290 = 290-version-negotiation
test-291 = 291-version-negotiation
test-292 = 292-version-negotiation
test-293 = 293-version-negotiation
test-294 = 294-version-negotiation
test-295 = 295-version-negotiation
test-296 = 296-version-negotiation
test-297 = 297-version-negotiation
test-298 = 298-version-negotiation
test-299 = 299-version-negotiation
test-300 = 300-version-negotiation
test-301 = 301-version-negotiation
test-302 = 302-version-negotiation
test-303 = 303-version-negotiation
test-304 = 304-version-negotiation
test-305 = 305-version-negotiation
test-306 = 306-version-negotiation
test-307 = 307-version-negotiation
test-308 = 308-version-negotiation
test-309 = 309-version-negotiation
test-310 = 310-version-negotiation
test-311 = 311-version-negotiation
test-312 = 312-version-negotiation
test-313 = 313-version-negotiation
test-314 = 314-version-negotiation
test-315 = 315-version-negotiation
test-316 = 316-version-negotiation
test-317 = 317-version-negotiation
test-318 = 318-version-negotiation
test-319 = 319-version-negotiation
test-320 = 320-version-negotiation
test-321 = 321-version-negotiation
test-322 = 322-version-negotiation
test-323 = 323-version-negotiation
test-324 = 324-version-negotiation
test-325 = 325-version-negotiation
test-326 = 326-version-negotiation
test-327 = 327-version-negotiation
test-328 = 328-version-negotiation
test-329 = 329-version-negotiation
test-330 = 330-version-negotiation
test-331 = 331-version-negotiation
test-332 = 332-version-negotiation
test-333 = 333-version-negotiation
test-334 = 334-version-negotiation
test-335 = 335-version-negotiation
test-336 = 336-version-negotiation
test-337 = 337-version-negotiation
test-338 = 338-version-negotiation
test-339 = 339-version-negotiation
test-340 = 340-version-negotiation
test-341 = 341-version-negotiation
test-342 = 342-version-negotiation
test-343 = 343-version-negotiation
test-344 = 344-version-negotiation
test-345 = 345-version-negotiation
test-346 = 346-version-negotiation
test-347 = 347-version-negotiation
test-348 = 348-version-negotiation
test-349 = 349-version-negotiation
test-350 = 350-version-negotiation
test-351 = 351-version-negotiation
test-352 = 352-version-negotiation
test-353 = 353-version-negotiation
test-354 = 354-version-negotiation
test-355 = 355-version-negotiation
test-356 = 356-version-negotiation
test-357 = 357-version-negotiation
test-358 = 358-version-negotiation
test-359 = 359-version-negotiation
test-360 = 360-version-negotiation
test-361 = 361-version-negotiation
test-362 = 362-version-negotiation
test-363 = 363-version-negotiation
test-364 = 364-version-negotiation
test-365 = 365-version-negotiation
test-366 = 366-version-negotiation
test-367 = 367-version-negotiation
test-368 = 368-version-negotiation
test-369 = 369-version-negotiation
test-370 = 370-version-negotiation
test-371 = 371-version-negotiation
test-372 = 372-version-negotiation
test-373 = 373-version-negotiation
test-374 = 374-version-negotiation
test-375 = 375-version-negotiation
test-376 = 376-version-negotiation
test-377 = 377-version-negotiation
test-378 = 378-version-negotiation
test-379 = 379-version-negotiation
test-380 = 380-version-negotiation
test-381 = 381-version-negotiation
test-382 = 382-version-negotiation
test-383 = 383-version-negotiation
test-384 = 384-version-negotiation
test-385 = 385-version-negotiation
test-386 = 386-version-negotiation
test-387 = 387-version-negotiation
test-388 = 388-version-negotiation
test-389 = 389-version-negotiation
test-390 = 390-version-negotiation
test-391 = 391-version-negotiation
test-392 = 392-version-negotiation
test-393 = 393-version-negotiation
test-394 = 394-version-negotiation
test-395 = 395-version-negotiation
test-396 = 396-version-negotiation
test-397 = 397-version-negotiation
test-398 = 398-version-negotiation
test-399 = 399-version-negotiation
test-400 = 400-version-negotiation
test-401 = 401-version-negotiation
test-402 = 402-version-negotiation
test-403 = 403-version-negotiation
test-404 = 404-version-negotiation
test-405 = 405-version-negotiation
test-406 = 406-version-negotiation
test-407 = 407-version-negotiation
test-408 = 408-version-negotiation
test-409 = 409-version-negotiation
test-410 = 410-version-negotiation
test-411 = 411-version-negotiation
test-412 = 412-version-negotiation
test-413 = 413-version-negotiation
test-414 = 414-version-negotiation
test-415 = 415-version-negotiation
test-416 = 416-version-negotiation
test-417 = 417-version-negotiation
test-418 = 418-version-negotiation
test-419 = 419-version-negotiation
test-420 = 420-version-negotiation
test-421 = 421-version-negotiation
test-422 = 422-version-negotiation
test-423 = 423-version-negotiation
test-424 = 424-version-negotiation
test-425 = 425-version-negotiation
test-426 = 426-version-negotiation
test-427 = 427-version-negotiation
test-428 = 428-version-negotiation
test-429 = 429-version-negotiation
test-430 = 430-version-negotiation
test-431 = 431-version-negotiation
test-432 = 432-version-negotiation
test-433 = 433-version-negotiation
test-434 = 434-version-negotiation
test-435 = 435-version-negotiation
test-436 = 436-version-negotiation
test-437 = 437-version-negotiation
test-438 = 438-version-negotiation
test-439 = 439-version-negotiation
test-440 = 440-version-negotiation
test-441 = 441-version-negotiation
test-442 = 442-version-negotiation
test-443 = 443-version-negotiation
test-444 = 444-version-negotiation
test-445 = 445-version-negotiation
test-446 = 446-version-negotiation
test-447 = 447-version-negotiation
test-448 = 448-version-negotiation
test-449 = 449-version-negotiation
test-450 = 450-version-negotiation
test-451 = 451-version-negotiation
test-452 = 452-version-negotiation
test-453 = 453-version-negotiation
test-454 = 454-version-negotiation
test-455 = 455-version-negotiation
test-456 = 456-version-negotiation
test-457 = 457-version-negotiation
test-458 = 458-version-negotiation
test-459 = 459-version-negotiation
test-460 = 460-version-negotiation
test-461 = 461-version-negotiation
test-462 = 462-version-negotiation
test-463 = 463-version-negotiation
test-464 = 464-version-negotiation
test-465 = 465-version-negotiation
test-466 = 466-version-negotiation
test-467 = 467-version-negotiation
test-468 = 468-version-negotiation
test-469 = 469-version-negotiation
test-470 = 470-version-negotiation
test-471 = 471-version-negotiation
test-472 = 472-version-negotiation
test-473 = 473-version-negotiation
test-474 = 474-version-negotiation
test-475 = 475-version-negotiation
test-476 = 476-version-negotiation
test-477 = 477-version-negotiation
test-478 = 478-version-negotiation
test-479 = 479-version-negotiation
test-480 = 480-version-negotiation
test-481 = 481-version-negotiation
test-482 = 482-version-negotiation
test-483 = 483-version-negotiation
test-484 = 484-version-negotiation
test-485 = 485-version-negotiation
test-486 = 486-version-negotiation
test-487 = 487-version-negotiation
test-488 = 488-version-negotiation
test-489 = 489-version-negotiation
test-490 = 490-version-negotiation
test-491 = 491-version-negotiation
test-492 = 492-version-negotiation
test-493 = 493-version-negotiation
test-494 = 494-version-negotiation
test-495 = 495-version-negotiation
test-496 = 496-version-negotiation
test-497 = 497-version-negotiation
test-498 = 498-version-negotiation
test-499 = 499-version-negotiation
test-500 = 500-version-negotiation
test-501 = 501-version-negotiation
test-502 = 502-version-negotiation
test-503 = 503-version-negotiation
test-504 = 504-version-negotiation
test-505 = 505-version-negotiation
test-506 = 506-version-negotiation
test-507 = 507-version-negotiation
test-508 = 508-version-negotiation
test-509 = 509-version-negotiation
test-510 = 510-version-negotiation
test-511 = 511-version-negotiation
test-512 = 512-version-negotiation
test-513 = 513-version-negotiation
test-514 = 514-version-negotiation
test-515 = 515-version-negotiation
test-516 = 516-version-negotiation
test-517 = 517-version-negotiation
test-518 = 518-version-negotiation
test-519 = 519-version-negotiation
test-520 = 520-version-negotiation
test-521 = 521-version-negotiation
test-522 = 522-version-negotiation
test-523 = 523-version-negotiation
test-524 = 524-version-negotiation
test-525 = 525-version-negotiation
test-526 = 526-version-negotiation
test-527 = 527-version-negotiation
test-528 = 528-version-negotiation
test-529 = 529-version-negotiation
test-530 = 530-version-negotiation
test-531 = 531-version-negotiation
test-532 = 532-version-negotiation
test-533 = 533-version-negotiation
test-534 = 534-version-negotiation
test-535 = 535-version-negotiation
test-536 = 536-version-negotiation
test-537 = 537-version-negotiation
test-538 = 538-version-negotiation
test-539 = 539-version-negotiation
test-540 = 540-version-negotiation
test-541 = 541-version-negotiation
test-542 = 542-version-negotiation
test-543 = 543-version-negotiation
test-544 = 544-version-negotiation
test-545 = 545-version-negotiation
test-546 = 546-version-negotiation
test-547 = 547-version-negotiation
test-548 = 548-version-negotiation
test-549 = 549-version-negotiation
test-550 = 550-version-negotiation
test-551 = 551-version-negotiation
test-552 = 552-version-negotiation
test-553 = 553-version-negotiation
test-554 = 554-version-negotiation
test-555 = 555-version-negotiation
test-556 = 556-version-negotiation
test-557 = 557-version-negotiation
test-558 = 558-version-negotiation
test-559 = 559-version-negotiation
test-560 = 560-version-negotiation
test-561 = 561-version-negotiation
test-562 = 562-version-negotiation
test-563 = 563-version-negotiation
test-564 = 564-version-negotiation
test-565 = 565-version-negotiation
test-566 = 566-version-negotiation
test-567 = 567-version-negotiation
test-568 = 568-version-negotiation
test-569 = 569-version-negotiation
test-570 = 570-version-negotiation
test-571 = 571-version-negotiation
test-572 = 572-version-negotiation
test-573 = 573-version-negotiation
test-574 = 574-version-negotiation
test-575 = 575-version-negotiation
test-576 = 576-version-negotiation
test-577 = 577-version-negotiation
test-578 = 578-version-negotiation
test-579 = 579-version-negotiation
test-580 = 580-version-negotiation
test-581 = 581-version-negotiation
test-582 = 582-version-negotiation
test-583 = 583-version-negotiation
test-584 = 584-version-negotiation
test-585 = 585-version-negotiation
test-586 = 586-version-negotiation
test-587 = 587-version-negotiation
test-588 = 588-version-negotiation
test-589 = 589-version-negotiation
test-590 = 590-version-negotiation
test-591 = 591-version-negotiation
test-592 = 592-version-negotiation
test-593 = 593-version-negotiation
test-594 = 594-version-negotiation
test-595 = 595-version-negotiation
test-596 = 596-version-negotiation
test-597 = 597-version-negotiation
test-598 = 598-version-negotiation
test-599 = 599-version-negotiation
test-600 = 600-version-negotiation
test-601 = 601-version-negotiation
test-602 = 602-version-negotiation
test-603 = 603-version-negotiation
test-604 = 604-version-negotiation
test-605 = 605-version-negotiation
test-606 = 606-version-negotiation
test-607 = 607-version-negotiation
test-608 = 608-version-negotiation
test-609 = 609-version-negotiation
test-610 = 610-version-negotiation
test-611 = 611-version-negotiation
test-612 = 612-version-negotiation
test-613 = 613-version-negotiation
test-614 = 614-version-negotiation
test-615 = 615-version-negotiation
test-616 = 616-version-negotiation
test-617 = 617-version-negotiation
test-618 = 618-version-negotiation
test-619 = 619-version-negotiation
test-620 = 620-version-negotiation
test-621 = 621-version-negotiation
test-622 = 622-version-negotiation
test-623 = 623-version-negotiation
test-624 = 624-version-negotiation
test-625 = 625-version-negotiation
test-626 = 626-version-negotiation
test-627 = 627-version-negotiation
test-628 = 628-version-negotiation
test-629 = 629-version-negotiation
test-630 = 630-version-negotiation
test-631 = 631-version-negotiation
test-632 = 632-version-negotiation
test-633 = 633-version-negotiation
test-634 = 634-version-negotiation
test-635 = 635-version-negotiation
test-636 = 636-version-negotiation
test-637 = 637-version-negotiation
test-638 = 638-version-negotiation
test-639 = 639-version-negotiation
test-640 = 640-version-negotiation
test-641 = 641-version-negotiation
test-642 = 642-version-negotiation
test-643 = 643-version-negotiation
test-644 = 644-version-negotiation
test-645 = 645-version-negotiation
test-646 = 646-version-negotiation
test-647 = 647-version-negotiation
test-648 = 648-version-negotiation
test-649 = 649-version-negotiation
test-650 = 650-version-negotiation
test-651 = 651-version-negotiation
test-652 = 652-version-negotiation
test-653 = 653-version-negotiation
test-654 = 654-version-negotiation
test-655 = 655-version-negotiation
test-656 = 656-version-negotiation
test-657 = 657-version-negotiation
test-658 = 658-version-negotiation
test-659 = 659-version-negotiation
test-660 = 660-version-negotiation
test-661 = 661-version-negotiation
test-662 = 662-version-negotiation
test-663 = 663-version-negotiation
test-664 = 664-version-negotiation
test-665 = 665-version-negotiation
test-666 = 666-version-negotiation
test-667 = 667-version-negotiation
test-668 = 668-version-negotiation
test-669 = 669-version-negotiation
test-670 = 670-version-negotiation
test-671 = 671-version-negotiation
test-672 = 672-version-negotiation
test-673 = 673-version-negotiation
test-674 = 674-version-negotiation
test-675 = 675-version-negotiation
test-676 = 676-version-negotiation
test-677 = 677-version-negotiation
test-678 = 678-version-negotiation
test-679 = 679-ciphersuite-sanity-check-client
test-680 = 680-ciphersuite-sanity-check-server
test-681 = 681-verify-success
test-682 = 682-verify-custom-reject
test-683 = 683-verify-custom-allow
test-684 = 684-noverify-success
test-685 = 685-noverify-ignore-custom-reject
test-686 = 686-noverify-accept-custom-allow
test-687 = 687-verify-fail-no-root
test-688 = 688-verify-custom-success-no-root
test-689 = 689-verify-custom-fail-no-root
test-690 = 690-server-auth-flex
test-691 = 691-client-auth-flex-request
test-692 = 692-client-auth-flex-require-fail
test-693 = 693-client-auth-flex-require
test-694 = 694-client-auth-flex-require-non-empty-names
test-695 = 695-client-auth-flex-noroot
test-696 = 696-server-auth-TLSv1
test-697 = 697-client-auth-TLSv1-request
test-698 = 698-client-auth-TLSv1-require-fail
test-699 = 699-client-auth-TLSv1-require
test-700 = 700-client-auth-TLSv1-require-non-empty-names
test-701 = 701-client-auth-TLSv1-noroot
test-702 = 702-server-auth-TLSv1.1
test-703 = 703-client-auth-TLSv1.1-request
test-704 = 704-client-auth-TLSv1.1-require-fail
test-705 = 705-client-auth-TLSv1.1-require
test-706 = 706-client-auth-TLSv1.1-require-non-empty-names
test-707 = 707-client-auth-TLSv1.1-noroot
test-708 = 708-server-auth-TLSv1.2
test-709 = 709-client-auth-TLSv1.2-request
test-710 = 710-client-auth-TLSv1.2-require-fail
test-711 = 711-client-auth-TLSv1.2-require
test-712 = 712-client-auth-TLSv1.2-require-non-empty-names
test-713 = 713-client-auth-TLSv1.2-noroot
test-714 = 714-SNI-switch-context
test-715 = 715-SNI-keep-context
test-716 = 716-SNI-no-server-support
test-717 = 717-SNI-no-client-support
test-718 = 718-SNI-bad-sni-ignore-mismatch
test-719 = 719-SNI-bad-sni-reject-mismatch
test-720 = 720-SNI-bad-clienthello-sni-ignore-mismatch
test-721 = 721-SNI-bad-clienthello-sni-reject-mismatch
test-722 = 722-SNI-clienthello-disable-v12
test-723 = 723-sni-session-ticket
test-724 = 724-sni-session-ticket
test-725 = 725-sni-session-ticket
test-726 = 726-sni-session-ticket
test-727 = 727-sni-session-ticket
test-728 = 728-sni-session-ticket
test-729 = 729-sni-session-ticket
test-730 = 730-sni-session-ticket
test-731 = 731-sni-session-ticket
test-732 = 732-sni-session-ticket
test-733 = 733-sni-session-ticket
test-734 = 734-sni-session-ticket
test-735 = 735-sni-session-ticket
test-736 = 736-sni-session-ticket
test-737 = 737-sni-session-ticket
test-738 = 738-sni-session-ticket
test-739 = 739-sni-session-ticket
test-740 = 740-alpn-simple
test-741 = 741-alpn-server-finds-match
test-742 = 742-alpn-server-honours-server-pref
test-743 = 743-alpn-alert-on-mismatch
test-744 = 744-alpn-no-server-support
test-745 = 745-alpn-no-client-support
test-746 = 746-alpn-with-sni-no-context-switch
test-747 = 747-alpn-with-sni-context-switch
test-748 = 748-alpn-selected-sni-server-supports-alpn
test-749 = 749-alpn-selected-sni-server-does-not-support-alpn
test-750 = 750-alpn-simple-resumption
test-751 = 751-alpn-server-switch-resumption
test-752 = 752-alpn-client-switch-resumption
test-753 = 753-alpn-alert-on-mismatch-resumption
test-754 = 754-alpn-no-server-support-resumption
test-755 = 755-alpn-no-client-support-resumption
test-756 = 756-resumption
test-757 = 757-resumption
test-758 = 758-resumption
test-759 = 759-resumption
test-760 = 760-resumption
test-761 = 761-resumption
test-762 = 762-resumption
test-763 = 763-resumption
test-764 = 764-resumption
test-765 = 765-resumption
test-766 = 766-resumption
test-767 = 767-resumption
test-768 = 768-resumption
test-769 = 769-resumption
test-770 = 770-resumption
test-771 = 771-resumption
test-772 = 772-resumption
test-773 = 773-resumption
test-774 = 774-resumption
test-775 = 775-resumption
test-776 = 776-resumption
test-777 = 777-resumption
test-778 = 778-resumption
test-779 = 779-resumption
test-780 = 780-resumption
test-781 = 781-resumption
test-782 = 782-resumption
test-783 = 783-resumption
test-784 = 784-resumption
test-785 = 785-resumption
test-786 = 786-resumption
test-787 = 787-resumption
test-788 = 788-resumption
test-789 = 789-resumption
test-790 = 790-resumption
test-791 = 791-resumption
test-792 = 792-resumption
test-793 = 793-resumption
test-794 = 794-resumption
test-795 = 795-resumption
test-796 = 796-resumption
test-797 = 797-resumption
test-798 = 798-resumption
test-799 = 799-resumption
test-800 = 800-resumption
test-801 = 801-resumption
test-802 = 802-resumption
test-803 = 803-resumption
test-804 = 804-resumption
test-805 = 805-resumption
test-806 = 806-resumption
test-807 = 807-resumption
test-808 = 808-resumption
test-809 = 809-resumption
test-810 = 810-resumption
test-811 = 811-resumption
test-812 = 812-resumption
test-813 = 813-resumption
test-814 = 814-resumption
test-815 = 815-resumption
test-816 = 816-resumption
test-817 = 817-resumption
test-818 = 818-resumption
test-819 = 819-resumption
test-820 = 820-resumption-with-hrr
test-821 = 821-ct-permissive-without-scts
test-822 = 822-ct-permissive-with-scts
test-823 = 823-ct-strict-without-scts
test-824 = 824-ct-strict-with-scts
test-825 = 825-ct-permissive-resumption
test-826 = 826-ct-strict-resumption
test-827 = 827-one-fragment-minus-app-data
test-828 = 828-one-fragment-app-data
test-829 = 829-one-fragment-plus-app-data
test-830 = 830-small-app-data
test-831 = 831-small-app-data-large-fragment-size
test-832 = 832-medium-app-data
test-833 = 833-medium-plus-app-data
test-834 = 834-large-app-data
test-835 = 835-large-app-data-large-fragment-size
test-836 = 836-large-app-data-odd-fragment-size
test-837 = 837-large-app-data-aes-sha1-multibuffer
test-838 = 838-large-app-data-aes-sha2-multibuffer
test-839 = 839-large-app-data-aes-sha1-multibuffer-odd-fragment
test-840 = 840-large-app-data-aes-sha2-multibuffer-odd-fragment
test-841 = 841-small-app-data-aes-sha1-multibuffer
test-842 = 842-small-app-data-aes-sha2-multibuffer
test-843 = 843-Maximum Fragment Len extension set to 1024 w. FragmentSize disabled
test-844 = 844-Maximum Fragment Len extension equal FragmentSize to 2048
test-845 = 845-Maximum Fragment Len extension 512 lower than FragmentSize 1024
test-846 = 846-Maximum Fragment Len extension 1024 lower than FragmentSize 1024
test-847 = 847-Maximum Fragment Len extension 4096 greater than FragmentSize 2048
test-848 = 848-Maximum Fragment Len extension 2048 greater than FragmentSize 1024
test-849 = 849-curve-sect163k1
test-850 = 850-curve-sect163r1
test-851 = 851-curve-sect163r2
test-852 = 852-curve-sect193r1
test-853 = 853-curve-sect193r2
test-854 = 854-curve-sect233k1
test-855 = 855-curve-sect233r1
test-856 = 856-curve-sect239k1
test-857 = 857-curve-sect283k1
test-858 = 858-curve-sect283r1
test-859 = 859-curve-sect409k1
test-860 = 860-curve-sect409r1
test-861 = 861-curve-sect571k1
test-862 = 862-curve-sect571r1
test-863 = 863-curve-secp160k1
test-864 = 864-curve-secp160r1
test-865 = 865-curve-secp160r2
test-866 = 866-curve-secp192k1
test-867 = 867-curve-prime192v1
test-868 = 868-curve-secp224k1
test-869 = 869-curve-secp224r1
test-870 = 870-curve-secp256k1
test-871 = 871-curve-prime256v1
test-872 = 872-curve-secp384r1
test-873 = 873-curve-secp521r1
test-874 = 874-curve-brainpoolP256r1
test-875 = 875-curve-brainpoolP384r1
test-876 = 876-curve-brainpoolP512r1
test-877 = 877-curve-X25519
test-878 = 878-curve-X448
test-879 = 879-certstatus-good
test-880 = 880-certstatus-bad
test-881 = 881-renegotiate-client-no-resume
test-882 = 882-renegotiate-client-resume
test-883 = 883-renegotiate-server-no-resume
test-884 = 884-renegotiate-server-resume
test-885 = 885-renegotiate-client-auth-require
test-886 = 886-renegotiate-client-auth-once
test-887 = 887-renegotiate-aead-to-non-aead
test-888 = 888-renegotiate-non-aead-to-aead
test-889 = 889-renegotiate-non-aead-to-non-aead
test-890 = 890-renegotiate-aead-to-aead
test-891 = 891-no-renegotiation-server-by-client
test-892 = 892-no-renegotiation-server-by-server
test-893 = 893-no-renegotiation-client-by-server
test-894 = 894-no-renegotiation-client-by-client
test-895 = 895-disable-encrypt-then-mac-server-sha
test-896 = 896-disable-encrypt-then-mac-client-sha
test-897 = 897-disable-encrypt-then-mac-both-sha
test-898 = 898-disable-encrypt-then-mac-server-sha2
test-899 = 899-disable-encrypt-then-mac-client-sha2
test-900 = 900-disable-encrypt-then-mac-both-sha2
test-901 = 901-ECDSA CipherString Selection
test-902 = 902-ECDSA CipherString Selection
test-903 = 903-ECDSA CipherString Selection
test-904 = 904-Ed25519 CipherString and Signature Algorithm Selection
test-905 = 905-Ed448 CipherString and Signature Algorithm Selection
test-906 = 906-ECDSA with brainpool
test-907 = 907-RSA CipherString Selection
test-908 = 908-RSA-PSS Certificate CipherString Selection
test-909 = 909-P-256 CipherString and Signature Algorithm Selection
test-910 = 910-Ed25519 CipherString and Curves Selection
test-911 = 911-Ed448 CipherString and Curves Selection
test-912 = 912-ECDSA CipherString Selection, no ECDSA certificate
test-913 = 913-ECDSA Signature Algorithm Selection
test-914 = 914-ECDSA Signature Algorithm Selection SHA384
test-915 = 915-ECDSA Signature Algorithm Selection SHA1
test-916 = 916-ECDSA Signature Algorithm Selection compressed point
test-917 = 917-ECDSA Signature Algorithm Selection, no ECDSA certificate
test-918 = 918-RSA Signature Algorithm Selection
test-919 = 919-RSA-PSS Signature Algorithm Selection
test-920 = 920-RSA-PSS Certificate Legacy Signature Algorithm Selection
test-921 = 921-RSA-PSS Certificate Unified Signature Algorithm Selection
test-922 = 922-Only RSA-PSS Certificate
test-923 = 923-RSA-PSS Certificate, no PSS signature algorithms
test-924 = 924-RSA key exchange with all RSA certificate types
test-925 = 925-RSA key exchange with only RSA-PSS certificate
test-926 = 926-Suite B P-256 Hash Algorithm Selection
test-927 = 927-Suite B P-384 Hash Algorithm Selection
test-928 = 928-TLS 1.2 Ed25519 Client Auth
test-929 = 929-TLS 1.2 Ed448 Client Auth
test-930 = 930-Only RSA-PSS Certificate, TLS v1.1
test-931 = 931-TLS 1.3 ECDSA Signature Algorithm Selection
test-932 = 932-TLS 1.3 ECDSA Signature Algorithm Selection compressed point
test-933 = 933-TLS 1.3 ECDSA Signature Algorithm Selection SHA1
test-934 = 934-TLS 1.3 RSA Signature Algorithm Selection SHA384 with PSS
test-935 = 935-TLS 1.3 ECDSA Signature Algorithm Selection, no ECDSA certificate
test-936 = 936-TLS 1.3 RSA Signature Algorithm Selection, no PSS
test-937 = 937-TLS 1.3 RSA-PSS Signature Algorithm Selection
test-938 = 938-TLS 1.3 Ed25519 Signature Algorithm Selection
test-939 = 939-TLS 1.3 Ed448 Signature Algorithm Selection
test-940 = 940-TLS 1.3 Ed25519 CipherString and Groups Selection
test-941 = 941-TLS 1.3 Ed448 CipherString and Groups Selection
test-942 = 942-TLS 1.3 RSA Client Auth Signature Algorithm Selection
test-943 = 943-TLS 1.3 RSA Client Auth Signature Algorithm Selection non-empty CA Names
test-944 = 944-TLS 1.3 ECDSA Client Auth Signature Algorithm Selection
test-945 = 945-TLS 1.3 Ed25519 Client Auth
test-946 = 946-TLS 1.3 Ed448 Client Auth
test-947 = 947-TLS 1.3 ECDSA with brainpool
test-948 = 948-TLS 1.2 DSA Certificate Test
test-949 = 949-TLS 1.3 Client Auth No TLS 1.3 Signature Algorithms
test-950 = 950-TLS 1.3 DSA Certificate Test
test-951 = 951-update-key-client-update-not-requested
test-952 = 952-update-key-server-update-not-requested
test-953 = 953-update-key-client-update-requested
test-954 = 954-update-key-server-update-requested
test-955 = 955-default
test-956 = 956-cipher-server-1
test-957 = 957-cipher-server-2
test-958 = 958-cipher-server-client-list
test-959 = 959-cipher-server-pref-1
test-960 = 960-cipher-server-pref-2
test-961 = 961-cipher-server-pref-client-list
test-962 = 962-cipher-server-pref-not-mobile
test-963 = 963-cipher-server-pref-mobile
test-964 = 964-cipher-server-pref-mobile2
test-965 = 965-server-auth-TLSv1.3
test-966 = 966-client-auth-TLSv1.3-request
test-967 = 967-client-auth-TLSv1.3-require-fail
test-968 = 968-client-auth-TLSv1.3-require
test-969 = 969-client-auth-TLSv1.3-require-non-empty-names
test-970 = 970-client-auth-TLSv1.3-noroot
test-971 = 971-client-auth-TLSv1.3-request-post-handshake
test-972 = 972-client-auth-TLSv1.3-require-fail-post-handshake
test-973 = 973-session-ticket-app-data12
test-974 = 974-session-ticket-app-data12
test-975 = 975-session-ticket-app-data13
test-976 = 976-session-ticket-app-data13
test-977 = 977-SECLEVEL 3 with default key
test-978 = 978-SECLEVEL 3 with ED448 key
test-979 = 979-SECLEVEL 3 with P-384 key, X25519 ECDHE
test-980 = 980-SECLEVEL 3 with ED448 key, TLSv1.2
test-981 = 981-default
test-982 = 982-Server signature algorithms bug
test-983 = 983-verify-cert
test-984 = 984-version-negotiation
test-985 = 985-version-negotiation
test-986 = 986-version-negotiation
test-987 = 987-version-negotiation
test-988 = 988-version-negotiation
test-989 = 989-version-negotiation
test-990 = 990-version-negotiation
test-991 = 991-version-negotiation
test-992 = 992-version-negotiation
test-993 = 993-version-negotiation
test-994 = 994-version-negotiation
test-995 = 995-version-negotiation
test-996 = 996-version-negotiation
test-997 = 997-version-negotiation
test-998 = 998-version-negotiation
test-999 = 999-version-negotiation
test-1000 = 1000-version-negotiation
test-1001 = 1001-version-negotiation
test-1002 = 1002-version-negotiation
test-1003 = 1003-version-negotiation
test-1004 = 1004-version-negotiation
test-1005 = 1005-version-negotiation
test-1006 = 1006-version-negotiation
test-1007 = 1007-version-negotiation
test-1008 = 1008-version-negotiation
test-1009 = 1009-version-negotiation
test-1010 = 1010-version-negotiation
test-1011 = 1011-version-negotiation
test-1012 = 1012-version-negotiation
test-1013 = 1013-version-negotiation
test-1014 = 1014-version-negotiation
test-1015 = 1015-version-negotiation
test-1016 = 1016-version-negotiation
test-1017 = 1017-version-negotiation
test-1018 = 1018-version-negotiation
test-1019 = 1019-version-negotiation
test-1020 = 1020-version-negotiation
test-1021 = 1021-version-negotiation
test-1022 = 1022-version-negotiation
test-1023 = 1023-version-negotiation
test-1024 = 1024-version-negotiation
test-1025 = 1025-version-negotiation
test-1026 = 1026-version-negotiation
test-1027 = 1027-version-negotiation
test-1028 = 1028-version-negotiation
test-1029 = 1029-version-negotiation
test-1030 = 1030-version-negotiation
test-1031 = 1031-version-negotiation
test-1032 = 1032-version-negotiation
test-1033 = 1033-version-negotiation
test-1034 = 1034-version-negotiation
test-1035 = 1035-version-negotiation
test-1036 = 1036-version-negotiation
test-1037 = 1037-version-negotiation
test-1038 = 1038-version-negotiation
test-1039 = 1039-version-negotiation
test-1040 = 1040-version-negotiation
test-1041 = 1041-version-negotiation
test-1042 = 1042-version-negotiation
test-1043 = 1043-version-negotiation
test-1044 = 1044-version-negotiation
test-1045 = 1045-version-negotiation
test-1046 = 1046-version-negotiation
test-1047 = 1047-version-negotiation
test-1048 = 1048-version-negotiation
test-1049 = 1049-version-negotiation
test-1050 = 1050-version-negotiation
test-1051 = 1051-version-negotiation
test-1052 = 1052-version-negotiation
test-1053 = 1053-version-negotiation
test-1054 = 1054-version-negotiation
test-1055 = 1055-version-negotiation
test-1056 = 1056-version-negotiation
test-1057 = 1057-version-negotiation
test-1058 = 1058-version-negotiation
test-1059 = 1059-version-negotiation
test-1060 = 1060-version-negotiation
test-1061 = 1061-version-negotiation
test-1062 = 1062-version-negotiation
test-1063 = 1063-version-negotiation
test-1064 = 1064-version-negotiation
test-1065 = 1065-version-negotiation
test-1066 = 1066-version-negotiation
test-1067 = 1067-version-negotiation
test-1068 = 1068-version-negotiation
test-1069 = 1069-version-negotiation
test-1070 = 1070-version-negotiation
test-1071 = 1071-version-negotiation
test-1072 = 1072-version-negotiation
test-1073 = 1073-version-negotiation
test-1074 = 1074-version-negotiation
test-1075 = 1075-version-negotiation
test-1076 = 1076-version-negotiation
test-1077 = 1077-version-negotiation
test-1078 = 1078-version-negotiation
test-1079 = 1079-version-negotiation
test-1080 = 1080-version-negotiation
test-1081 = 1081-version-negotiation
test-1082 = 1082-version-negotiation
test-1083 = 1083-version-negotiation
test-1084 = 1084-version-negotiation
test-1085 = 1085-version-negotiation
test-1086 = 1086-version-negotiation
test-1087 = 1087-version-negotiation
test-1088 = 1088-version-negotiation
test-1089 = 1089-version-negotiation
test-1090 = 1090-version-negotiation
test-1091 = 1091-version-negotiation
test-1092 = 1092-version-negotiation
test-1093 = 1093-version-negotiation
test-1094 = 1094-version-negotiation
test-1095 = 1095-version-negotiation
test-1096 = 1096-version-negotiation
test-1097 = 1097-version-negotiation
test-1098 = 1098-version-negotiation
test-1099 = 1099-version-negotiation
test-1100 = 1100-version-negotiation
test-1101 = 1101-version-negotiation
test-1102 = 1102-version-negotiation
test-1103 = 1103-version-negotiation
test-1104 = 1104-version-negotiation
test-1105 = 1105-version-negotiation
test-1106 = 1106-version-negotiation
test-1107 = 1107-version-negotiation
test-1108 = 1108-version-negotiation
test-1109 = 1109-version-negotiation
test-1110 = 1110-version-negotiation
test-1111 = 1111-version-negotiation
test-1112 = 1112-version-negotiation
test-1113 = 1113-version-negotiation
test-1114 = 1114-version-negotiation
test-1115 = 1115-version-negotiation
test-1116 = 1116-version-negotiation
test-1117 = 1117-version-negotiation
test-1118 = 1118-version-negotiation
test-1119 = 1119-version-negotiation
test-1120 = 1120-version-negotiation
test-1121 = 1121-version-negotiation
test-1122 = 1122-version-negotiation
test-1123 = 1123-version-negotiation
test-1124 = 1124-version-negotiation
test-1125 = 1125-version-negotiation
test-1126 = 1126-version-negotiation
test-1127 = 1127-version-negotiation
test-1128 = 1128-version-negotiation
test-1129 = 1129-version-negotiation
test-1130 = 1130-version-negotiation
test-1131 = 1131-version-negotiation
test-1132 = 1132-version-negotiation
test-1133 = 1133-version-negotiation
test-1134 = 1134-version-negotiation
test-1135 = 1135-version-negotiation
test-1136 = 1136-version-negotiation
test-1137 = 1137-version-negotiation
test-1138 = 1138-version-negotiation
test-1139 = 1139-version-negotiation
test-1140 = 1140-version-negotiation
test-1141 = 1141-version-negotiation
test-1142 = 1142-version-negotiation
test-1143 = 1143-version-negotiation
test-1144 = 1144-version-negotiation
test-1145 = 1145-version-negotiation
test-1146 = 1146-version-negotiation
test-1147 = 1147-version-negotiation
test-1148 = 1148-version-negotiation
test-1149 = 1149-version-negotiation
test-1150 = 1150-version-negotiation
test-1151 = 1151-version-negotiation
test-1152 = 1152-version-negotiation
test-1153 = 1153-version-negotiation
test-1154 = 1154-version-negotiation
test-1155 = 1155-version-negotiation
test-1156 = 1156-version-negotiation
test-1157 = 1157-version-negotiation
test-1158 = 1158-version-negotiation
test-1159 = 1159-version-negotiation
test-1160 = 1160-version-negotiation
test-1161 = 1161-version-negotiation
test-1162 = 1162-version-negotiation
test-1163 = 1163-version-negotiation
test-1164 = 1164-version-negotiation
test-1165 = 1165-version-negotiation
test-1166 = 1166-version-negotiation
test-1167 = 1167-version-negotiation
test-1168 = 1168-version-negotiation
test-1169 = 1169-version-negotiation
test-1170 = 1170-version-negotiation
test-1171 = 1171-version-negotiation
test-1172 = 1172-version-negotiation
test-1173 = 1173-version-negotiation
test-1174 = 1174-version-negotiation
test-1175 = 1175-version-negotiation
test-1176 = 1176-version-negotiation
test-1177 = 1177-version-negotiation
test-1178 = 1178-version-negotiation
test-1179 = 1179-version-negotiation
test-1180 = 1180-version-negotiation
test-1181 = 1181-version-negotiation
test-1182 = 1182-version-negotiation
test-1183 = 1183-version-negotiation
test-1184 = 1184-version-negotiation
test-1185 = 1185-version-negotiation
test-1186 = 1186-version-negotiation
test-1187 = 1187-version-negotiation
test-1188 = 1188-version-negotiation
test-1189 = 1189-version-negotiation
test-1190 = 1190-version-negotiation
test-1191 = 1191-version-negotiation
test-1192 = 1192-version-negotiation
test-1193 = 1193-version-negotiation
test-1194 = 1194-version-negotiation
test-1195 = 1195-version-negotiation
test-1196 = 1196-version-negotiation
test-1197 = 1197-version-negotiation
test-1198 = 1198-version-negotiation
test-1199 = 1199-version-negotiation
test-1200 = 1200-version-negotiation
test-1201 = 1201-version-negotiation
test-1202 = 1202-version-negotiation
test-1203 = 1203-version-negotiation
test-1204 = 1204-version-negotiation
test-1205 = 1205-version-negotiation
test-1206 = 1206-version-negotiation
test-1207 = 1207-version-negotiation
test-1208 = 1208-version-negotiation
test-1209 = 1209-version-negotiation
test-1210 = 1210-version-negotiation
test-1211 = 1211-version-negotiation
test-1212 = 1212-version-negotiation
test-1213 = 1213-version-negotiation
test-1214 = 1214-version-negotiation
test-1215 = 1215-version-negotiation
test-1216 = 1216-version-negotiation
test-1217 = 1217-version-negotiation
test-1218 = 1218-version-negotiation
test-1219 = 1219-version-negotiation
test-1220 = 1220-version-negotiation
test-1221 = 1221-version-negotiation
test-1222 = 1222-version-negotiation
test-1223 = 1223-version-negotiation
test-1224 = 1224-version-negotiation
test-1225 = 1225-version-negotiation
test-1226 = 1226-version-negotiation
test-1227 = 1227-version-negotiation
test-1228 = 1228-version-negotiation
test-1229 = 1229-version-negotiation
test-1230 = 1230-version-negotiation
test-1231 = 1231-version-negotiation
test-1232 = 1232-version-negotiation
test-1233 = 1233-version-negotiation
test-1234 = 1234-version-negotiation
test-1235 = 1235-version-negotiation
test-1236 = 1236-version-negotiation
test-1237 = 1237-version-negotiation
test-1238 = 1238-version-negotiation
test-1239 = 1239-version-negotiation
test-1240 = 1240-version-negotiation
test-1241 = 1241-version-negotiation
test-1242 = 1242-version-negotiation
test-1243 = 1243-version-negotiation
test-1244 = 1244-version-negotiation
test-1245 = 1245-version-negotiation
test-1246 = 1246-version-negotiation
test-1247 = 1247-version-negotiation
test-1248 = 1248-version-negotiation
test-1249 = 1249-version-negotiation
test-1250 = 1250-version-negotiation
test-1251 = 1251-version-negotiation
test-1252 = 1252-version-negotiation
test-1253 = 1253-version-negotiation
test-1254 = 1254-version-negotiation
test-1255 = 1255-version-negotiation
test-1256 = 1256-version-negotiation
test-1257 = 1257-version-negotiation
test-1258 = 1258-version-negotiation
test-1259 = 1259-version-negotiation
test-1260 = 1260-version-negotiation
test-1261 = 1261-version-negotiation
test-1262 = 1262-version-negotiation
test-1263 = 1263-version-negotiation
test-1264 = 1264-version-negotiation
test-1265 = 1265-version-negotiation
test-1266 = 1266-version-negotiation
test-1267 = 1267-version-negotiation
test-1268 = 1268-version-negotiation
test-1269 = 1269-version-negotiation
test-1270 = 1270-version-negotiation
test-1271 = 1271-version-negotiation
test-1272 = 1272-version-negotiation
test-1273 = 1273-version-negotiation
test-1274 = 1274-version-negotiation
test-1275 = 1275-version-negotiation
test-1276 = 1276-version-negotiation
test-1277 = 1277-version-negotiation
test-1278 = 1278-version-negotiation
test-1279 = 1279-version-negotiation
test-1280 = 1280-version-negotiation
test-1281 = 1281-version-negotiation
test-1282 = 1282-version-negotiation
test-1283 = 1283-version-negotiation
test-1284 = 1284-version-negotiation
test-1285 = 1285-version-negotiation
test-1286 = 1286-version-negotiation
test-1287 = 1287-version-negotiation
test-1288 = 1288-version-negotiation
test-1289 = 1289-version-negotiation
test-1290 = 1290-version-negotiation
test-1291 = 1291-version-negotiation
test-1292 = 1292-version-negotiation
test-1293 = 1293-version-negotiation
test-1294 = 1294-version-negotiation
test-1295 = 1295-version-negotiation
test-1296 = 1296-version-negotiation
test-1297 = 1297-version-negotiation
test-1298 = 1298-version-negotiation
test-1299 = 1299-version-negotiation
test-1300 = 1300-version-negotiation
test-1301 = 1301-version-negotiation
test-1302 = 1302-version-negotiation
test-1303 = 1303-version-negotiation
test-1304 = 1304-version-negotiation
test-1305 = 1305-version-negotiation
test-1306 = 1306-version-negotiation
test-1307 = 1307-version-negotiation
test-1308 = 1308-version-negotiation
test-1309 = 1309-version-negotiation
test-1310 = 1310-version-negotiation
test-1311 = 1311-version-negotiation
test-1312 = 1312-version-negotiation
test-1313 = 1313-version-negotiation
test-1314 = 1314-version-negotiation
test-1315 = 1315-version-negotiation
test-1316 = 1316-version-negotiation
test-1317 = 1317-version-negotiation
test-1318 = 1318-version-negotiation
test-1319 = 1319-version-negotiation
test-1320 = 1320-version-negotiation
test-1321 = 1321-version-negotiation
test-1322 = 1322-version-negotiation
test-1323 = 1323-version-negotiation
test-1324 = 1324-version-negotiation
test-1325 = 1325-version-negotiation
test-1326 = 1326-version-negotiation
test-1327 = 1327-version-negotiation
test-1328 = 1328-version-negotiation
test-1329 = 1329-version-negotiation
test-1330 = 1330-version-negotiation
test-1331 = 1331-version-negotiation
test-1332 = 1332-version-negotiation
test-1333 = 1333-version-negotiation
test-1334 = 1334-version-negotiation
test-1335 = 1335-version-negotiation
test-1336 = 1336-version-negotiation
test-1337 = 1337-version-negotiation
test-1338 = 1338-version-negotiation
test-1339 = 1339-version-negotiation
test-1340 = 1340-version-negotiation
test-1341 = 1341-version-negotiation
test-1342 = 1342-version-negotiation
test-1343 = 1343-version-negotiation
test-1344 = 1344-version-negotiation
test-1345 = 1345-version-negotiation
test-1346 = 1346-version-negotiation
test-1347 = 1347-version-negotiation
test-1348 = 1348-version-negotiation
test-1349 = 1349-version-negotiation
test-1350 = 1350-version-negotiation
test-1351 = 1351-version-negotiation
test-1352 = 1352-version-negotiation
test-1353 = 1353-version-negotiation
test-1354 = 1354-version-negotiation
test-1355 = 1355-version-negotiation
test-1356 = 1356-version-negotiation
test-1357 = 1357-version-negotiation
test-1358 = 1358-version-negotiation
test-1359 = 1359-version-negotiation
test-1360 = 1360-version-negotiation
test-1361 = 1361-version-negotiation
test-1362 = 1362-version-negotiation
test-1363 = 1363-version-negotiation
test-1364 = 1364-version-negotiation
test-1365 = 1365-version-negotiation
test-1366 = 1366-version-negotiation
test-1367 = 1367-version-negotiation
test-1368 = 1368-version-negotiation
test-1369 = 1369-version-negotiation
test-1370 = 1370-version-negotiation
test-1371 = 1371-version-negotiation
test-1372 = 1372-version-negotiation
test-1373 = 1373-version-negotiation
test-1374 = 1374-version-negotiation
test-1375 = 1375-version-negotiation
test-1376 = 1376-version-negotiation
test-1377 = 1377-version-negotiation
test-1378 = 1378-version-negotiation
test-1379 = 1379-version-negotiation
test-1380 = 1380-version-negotiation
test-1381 = 1381-version-negotiation
test-1382 = 1382-version-negotiation
test-1383 = 1383-version-negotiation
test-1384 = 1384-version-negotiation
test-1385 = 1385-version-negotiation
test-1386 = 1386-version-negotiation
test-1387 = 1387-version-negotiation
test-1388 = 1388-version-negotiation
test-1389 = 1389-version-negotiation
test-1390 = 1390-version-negotiation
test-1391 = 1391-version-negotiation
test-1392 = 1392-version-negotiation
test-1393 = 1393-version-negotiation
test-1394 = 1394-version-negotiation
test-1395 = 1395-version-negotiation
test-1396 = 1396-version-negotiation
test-1397 = 1397-version-negotiation
test-1398 = 1398-version-negotiation
test-1399 = 1399-version-negotiation
test-1400 = 1400-version-negotiation
test-1401 = 1401-version-negotiation
test-1402 = 1402-version-negotiation
test-1403 = 1403-version-negotiation
test-1404 = 1404-version-negotiation
test-1405 = 1405-version-negotiation
test-1406 = 1406-version-negotiation
test-1407 = 1407-version-negotiation
test-1408 = 1408-version-negotiation
test-1409 = 1409-version-negotiation
test-1410 = 1410-version-negotiation
test-1411 = 1411-version-negotiation
test-1412 = 1412-version-negotiation
test-1413 = 1413-version-negotiation
test-1414 = 1414-version-negotiation
test-1415 = 1415-version-negotiation
test-1416 = 1416-version-negotiation
test-1417 = 1417-version-negotiation
test-1418 = 1418-version-negotiation
test-1419 = 1419-version-negotiation
test-1420 = 1420-version-negotiation
test-1421 = 1421-version-negotiation
test-1422 = 1422-version-negotiation
test-1423 = 1423-version-negotiation
test-1424 = 1424-version-negotiation
test-1425 = 1425-version-negotiation
test-1426 = 1426-version-negotiation
test-1427 = 1427-version-negotiation
test-1428 = 1428-version-negotiation
test-1429 = 1429-version-negotiation
test-1430 = 1430-version-negotiation
test-1431 = 1431-version-negotiation
test-1432 = 1432-version-negotiation
test-1433 = 1433-version-negotiation
test-1434 = 1434-version-negotiation
test-1435 = 1435-version-negotiation
test-1436 = 1436-version-negotiation
test-1437 = 1437-version-negotiation
test-1438 = 1438-version-negotiation
test-1439 = 1439-version-negotiation
test-1440 = 1440-version-negotiation
test-1441 = 1441-version-negotiation
test-1442 = 1442-version-negotiation
test-1443 = 1443-version-negotiation
test-1444 = 1444-version-negotiation
test-1445 = 1445-version-negotiation
test-1446 = 1446-version-negotiation
test-1447 = 1447-version-negotiation
test-1448 = 1448-version-negotiation
test-1449 = 1449-version-negotiation
test-1450 = 1450-version-negotiation
test-1451 = 1451-version-negotiation
test-1452 = 1452-version-negotiation
test-1453 = 1453-version-negotiation
test-1454 = 1454-version-negotiation
test-1455 = 1455-version-negotiation
test-1456 = 1456-version-negotiation
test-1457 = 1457-version-negotiation
test-1458 = 1458-version-negotiation
test-1459 = 1459-version-negotiation
test-1460 = 1460-version-negotiation
test-1461 = 1461-version-negotiation
test-1462 = 1462-version-negotiation
test-1463 = 1463-version-negotiation
test-1464 = 1464-version-negotiation
test-1465 = 1465-version-negotiation
test-1466 = 1466-version-negotiation
test-1467 = 1467-version-negotiation
test-1468 = 1468-version-negotiation
test-1469 = 1469-version-negotiation
test-1470 = 1470-version-negotiation
test-1471 = 1471-version-negotiation
test-1472 = 1472-version-negotiation
test-1473 = 1473-version-negotiation
test-1474 = 1474-version-negotiation
test-1475 = 1475-version-negotiation
test-1476 = 1476-version-negotiation
test-1477 = 1477-version-negotiation
test-1478 = 1478-version-negotiation
test-1479 = 1479-version-negotiation
test-1480 = 1480-version-negotiation
test-1481 = 1481-version-negotiation
test-1482 = 1482-version-negotiation
test-1483 = 1483-version-negotiation
test-1484 = 1484-version-negotiation
test-1485 = 1485-version-negotiation
test-1486 = 1486-version-negotiation
test-1487 = 1487-version-negotiation
test-1488 = 1488-version-negotiation
test-1489 = 1489-version-negotiation
test-1490 = 1490-version-negotiation
test-1491 = 1491-version-negotiation
test-1492 = 1492-version-negotiation
test-1493 = 1493-version-negotiation
test-1494 = 1494-version-negotiation
test-1495 = 1495-version-negotiation
test-1496 = 1496-version-negotiation
test-1497 = 1497-version-negotiation
test-1498 = 1498-version-negotiation
test-1499 = 1499-version-negotiation
test-1500 = 1500-version-negotiation
test-1501 = 1501-version-negotiation
test-1502 = 1502-version-negotiation
test-1503 = 1503-version-negotiation
test-1504 = 1504-version-negotiation
test-1505 = 1505-version-negotiation
test-1506 = 1506-version-negotiation
test-1507 = 1507-version-negotiation
test-1508 = 1508-version-negotiation
test-1509 = 1509-version-negotiation
test-1510 = 1510-version-negotiation
test-1511 = 1511-version-negotiation
test-1512 = 1512-version-negotiation
test-1513 = 1513-version-negotiation
test-1514 = 1514-version-negotiation
test-1515 = 1515-version-negotiation
test-1516 = 1516-version-negotiation
test-1517 = 1517-version-negotiation
test-1518 = 1518-version-negotiation
test-1519 = 1519-version-negotiation
test-1520 = 1520-version-negotiation
test-1521 = 1521-version-negotiation
test-1522 = 1522-version-negotiation
test-1523 = 1523-version-negotiation
test-1524 = 1524-version-negotiation
test-1525 = 1525-version-negotiation
test-1526 = 1526-version-negotiation
test-1527 = 1527-version-negotiation
test-1528 = 1528-version-negotiation
test-1529 = 1529-version-negotiation
test-1530 = 1530-version-negotiation
test-1531 = 1531-version-negotiation
test-1532 = 1532-version-negotiation
test-1533 = 1533-version-negotiation
test-1534 = 1534-version-negotiation
test-1535 = 1535-version-negotiation
test-1536 = 1536-version-negotiation
test-1537 = 1537-version-negotiation
test-1538 = 1538-version-negotiation
test-1539 = 1539-version-negotiation
test-1540 = 1540-version-negotiation
test-1541 = 1541-version-negotiation
test-1542 = 1542-version-negotiation
test-1543 = 1543-version-negotiation
test-1544 = 1544-version-negotiation
test-1545 = 1545-version-negotiation
test-1546 = 1546-version-negotiation
test-1547 = 1547-version-negotiation
test-1548 = 1548-version-negotiation
test-1549 = 1549-version-negotiation
test-1550 = 1550-version-negotiation
test-1551 = 1551-version-negotiation
test-1552 = 1552-version-negotiation
test-1553 = 1553-version-negotiation
test-1554 = 1554-version-negotiation
test-1555 = 1555-version-negotiation
test-1556 = 1556-version-negotiation
test-1557 = 1557-version-negotiation
test-1558 = 1558-version-negotiation
test-1559 = 1559-version-negotiation
test-1560 = 1560-version-negotiation
test-1561 = 1561-version-negotiation
test-1562 = 1562-version-negotiation
test-1563 = 1563-version-negotiation
test-1564 = 1564-version-negotiation
test-1565 = 1565-version-negotiation
test-1566 = 1566-version-negotiation
test-1567 = 1567-version-negotiation
test-1568 = 1568-version-negotiation
test-1569 = 1569-version-negotiation
test-1570 = 1570-version-negotiation
test-1571 = 1571-version-negotiation
test-1572 = 1572-version-negotiation
test-1573 = 1573-version-negotiation
test-1574 = 1574-version-negotiation
test-1575 = 1575-version-negotiation
test-1576 = 1576-version-negotiation
test-1577 = 1577-version-negotiation
test-1578 = 1578-version-negotiation
test-1579 = 1579-version-negotiation
test-1580 = 1580-version-negotiation
test-1581 = 1581-version-negotiation
test-1582 = 1582-version-negotiation
test-1583 = 1583-version-negotiation
test-1584 = 1584-version-negotiation
test-1585 = 1585-version-negotiation
test-1586 = 1586-version-negotiation
test-1587 = 1587-version-negotiation
test-1588 = 1588-version-negotiation
test-1589 = 1589-version-negotiation
test-1590 = 1590-version-negotiation
test-1591 = 1591-version-negotiation
test-1592 = 1592-version-negotiation
test-1593 = 1593-version-negotiation
test-1594 = 1594-version-negotiation
test-1595 = 1595-version-negotiation
test-1596 = 1596-version-negotiation
test-1597 = 1597-version-negotiation
test-1598 = 1598-version-negotiation
test-1599 = 1599-version-negotiation
test-1600 = 1600-version-negotiation
test-1601 = 1601-version-negotiation
test-1602 = 1602-version-negotiation
test-1603 = 1603-version-negotiation
test-1604 = 1604-version-negotiation
test-1605 = 1605-version-negotiation
test-1606 = 1606-version-negotiation
test-1607 = 1607-version-negotiation
test-1608 = 1608-version-negotiation
test-1609 = 1609-version-negotiation
test-1610 = 1610-version-negotiation
test-1611 = 1611-version-negotiation
test-1612 = 1612-version-negotiation
test-1613 = 1613-version-negotiation
test-1614 = 1614-version-negotiation
test-1615 = 1615-version-negotiation
test-1616 = 1616-version-negotiation
test-1617 = 1617-version-negotiation
test-1618 = 1618-version-negotiation
test-1619 = 1619-version-negotiation
test-1620 = 1620-version-negotiation
test-1621 = 1621-version-negotiation
test-1622 = 1622-version-negotiation
test-1623 = 1623-version-negotiation
test-1624 = 1624-version-negotiation
test-1625 = 1625-version-negotiation
test-1626 = 1626-version-negotiation
test-1627 = 1627-version-negotiation
test-1628 = 1628-version-negotiation
test-1629 = 1629-version-negotiation
test-1630 = 1630-version-negotiation
test-1631 = 1631-version-negotiation
test-1632 = 1632-version-negotiation
test-1633 = 1633-version-negotiation
test-1634 = 1634-version-negotiation
test-1635 = 1635-version-negotiation
test-1636 = 1636-version-negotiation
test-1637 = 1637-version-negotiation
test-1638 = 1638-version-negotiation
test-1639 = 1639-version-negotiation
test-1640 = 1640-version-negotiation
test-1641 = 1641-version-negotiation
test-1642 = 1642-version-negotiation
test-1643 = 1643-version-negotiation
test-1644 = 1644-version-negotiation
test-1645 = 1645-version-negotiation
test-1646 = 1646-version-negotiation
test-1647 = 1647-version-negotiation
test-1648 = 1648-version-negotiation
test-1649 = 1649-version-negotiation
test-1650 = 1650-version-negotiation
test-1651 = 1651-version-negotiation
test-1652 = 1652-version-negotiation
test-1653 = 1653-version-negotiation
test-1654 = 1654-version-negotiation
test-1655 = 1655-version-negotiation
test-1656 = 1656-version-negotiation
test-1657 = 1657-version-negotiation
test-1658 = 1658-version-negotiation
test-1659 = 1659-version-negotiation
test-1660 = 1660-ciphersuite-sanity-check-client
test-1661 = 1661-ciphersuite-sanity-check-server
test-1662 = 1662-verify-success
test-1663 = 1663-verify-custom-reject
test-1664 = 1664-verify-custom-allow
test-1665 = 1665-noverify-success
test-1666 = 1666-noverify-ignore-custom-reject
test-1667 = 1667-noverify-accept-custom-allow
test-1668 = 1668-verify-fail-no-root
test-1669 = 1669-verify-custom-success-no-root
test-1670 = 1670-verify-custom-fail-no-root
test-1671 = 1671-server-auth-flex
test-1672 = 1672-client-auth-flex-request
test-1673 = 1673-client-auth-flex-require-fail
test-1674 = 1674-client-auth-flex-require
test-1675 = 1675-client-auth-flex-noroot
test-1676 = 1676-server-auth-TLSv1
test-1677 = 1677-client-auth-TLSv1-request
test-1678 = 1678-client-auth-TLSv1-require-fail
test-1679 = 1679-client-auth-TLSv1-require
test-1680 = 1680-client-auth-TLSv1-noroot
test-1681 = 1681-server-auth-TLSv1.1
test-1682 = 1682-client-auth-TLSv1.1-request
test-1683 = 1683-client-auth-TLSv1.1-require-fail
test-1684 = 1684-client-auth-TLSv1.1-require
test-1685 = 1685-client-auth-TLSv1.1-noroot
test-1686 = 1686-server-auth-TLSv1.2
test-1687 = 1687-client-auth-TLSv1.2-request
test-1688 = 1688-client-auth-TLSv1.2-require-fail
test-1689 = 1689-client-auth-TLSv1.2-require
test-1690 = 1690-client-auth-TLSv1.2-noroot
test-1691 = 1691-SNI-switch-context
test-1692 = 1692-SNI-keep-context
test-1693 = 1693-SNI-no-server-support
test-1694 = 1694-SNI-no-client-support
test-1695 = 1695-SNI-bad-sni-ignore-mismatch
test-1696 = 1696-SNI-bad-sni-reject-mismatch
test-1697 = 1697-SNI-bad-clienthello-sni-ignore-mismatch
test-1698 = 1698-SNI-bad-clienthello-sni-reject-mismatch
test-1699 = 1699-SNI-clienthello-disable-v12
test-1700 = 1700-sni-session-ticket
test-1701 = 1701-sni-session-ticket
test-1702 = 1702-sni-session-ticket
test-1703 = 1703-sni-session-ticket
test-1704 = 1704-sni-session-ticket
test-1705 = 1705-sni-session-ticket
test-1706 = 1706-sni-session-ticket
test-1707 = 1707-sni-session-ticket
test-1708 = 1708-sni-session-ticket
test-1709 = 1709-sni-session-ticket
test-1710 = 1710-sni-session-ticket
test-1711 = 1711-sni-session-ticket
test-1712 = 1712-sni-session-ticket
test-1713 = 1713-sni-session-ticket
test-1714 = 1714-sni-session-ticket
test-1715 = 1715-sni-session-ticket
test-1716 = 1716-sni-session-ticket
test-1717 = 1717-alpn-simple
test-1718 = 1718-alpn-server-finds-match
test-1719 = 1719-alpn-server-honours-server-pref
test-1720 = 1720-alpn-alert-on-mismatch
test-1721 = 1721-alpn-no-server-support
test-1722 = 1722-alpn-no-client-support
test-1723 = 1723-alpn-with-sni-no-context-switch
test-1724 = 1724-alpn-with-sni-context-switch
test-1725 = 1725-alpn-selected-sni-server-supports-alpn
test-1726 = 1726-alpn-selected-sni-server-does-not-support-alpn
test-1727 = 1727-alpn-simple-resumption
test-1728 = 1728-alpn-server-switch-resumption
test-1729 = 1729-alpn-client-switch-resumption
test-1730 = 1730-alpn-alert-on-mismatch-resumption
test-1731 = 1731-alpn-no-server-support-resumption
test-1732 = 1732-alpn-no-client-support-resumption
test-1733 = 1733-resumption
test-1734 = 1734-resumption
test-1735 = 1735-resumption
test-1736 = 1736-resumption
test-1737 = 1737-resumption
test-1738 = 1738-resumption
test-1739 = 1739-resumption
test-1740 = 1740-resumption
test-1741 = 1741-resumption
test-1742 = 1742-resumption
test-1743 = 1743-resumption
test-1744 = 1744-resumption
test-1745 = 1745-resumption
test-1746 = 1746-resumption
test-1747 = 1747-resumption
test-1748 = 1748-resumption
test-1749 = 1749-resumption
test-1750 = 1750-resumption
test-1751 = 1751-resumption
test-1752 = 1752-resumption
test-1753 = 1753-resumption
test-1754 = 1754-resumption
test-1755 = 1755-resumption
test-1756 = 1756-resumption
test-1757 = 1757-resumption
test-1758 = 1758-resumption
test-1759 = 1759-resumption
test-1760 = 1760-resumption
test-1761 = 1761-resumption
test-1762 = 1762-resumption
test-1763 = 1763-resumption
test-1764 = 1764-resumption
test-1765 = 1765-resumption
test-1766 = 1766-resumption
test-1767 = 1767-resumption
test-1768 = 1768-resumption
test-1769 = 1769-resumption
test-1770 = 1770-resumption
test-1771 = 1771-resumption
test-1772 = 1772-resumption
test-1773 = 1773-resumption
test-1774 = 1774-resumption
test-1775 = 1775-resumption
test-1776 = 1776-resumption
test-1777 = 1777-resumption
test-1778 = 1778-resumption
test-1779 = 1779-resumption
test-1780 = 1780-resumption
test-1781 = 1781-resumption
test-1782 = 1782-resumption
test-1783 = 1783-resumption
test-1784 = 1784-resumption
test-1785 = 1785-resumption
test-1786 = 1786-resumption
test-1787 = 1787-resumption
test-1788 = 1788-resumption
test-1789 = 1789-resumption
test-1790 = 1790-resumption
test-1791 = 1791-resumption
test-1792 = 1792-resumption
test-1793 = 1793-resumption
test-1794 = 1794-resumption
test-1795 = 1795-resumption
test-1796 = 1796-resumption
test-1797 = 1797-resumption-with-hrr
test-1798 = 1798-ct-permissive-without-scts
test-1799 = 1799-ct-permissive-with-scts
test-1800 = 1800-ct-strict-without-scts
test-1801 = 1801-ct-strict-with-scts
test-1802 = 1802-ct-permissive-resumption
test-1803 = 1803-ct-strict-resumption
test-1804 = 1804-one-fragment-minus-app-data
test-1805 = 1805-one-fragment-app-data
test-1806 = 1806-one-fragment-plus-app-data
test-1807 = 1807-small-app-data
test-1808 = 1808-small-app-data-large-fragment-size
test-1809 = 1809-medium-app-data
test-1810 = 1810-medium-plus-app-data
test-1811 = 1811-large-app-data
test-1812 = 1812-large-app-data-large-fragment-size
test-1813 = 1813-large-app-data-odd-fragment-size
test-1814 = 1814-large-app-data-aes-sha1-multibuffer
test-1815 = 1815-large-app-data-aes-sha2-multibuffer
test-1816 = 1816-large-app-data-aes-sha1-multibuffer-odd-fragment
test-1817 = 1817-large-app-data-aes-sha2-multibuffer-odd-fragment
test-1818 = 1818-small-app-data-aes-sha1-multibuffer
test-1819 = 1819-small-app-data-aes-sha2-multibuffer
test-1820 = 1820-Maximum Fragment Len extension set to 1024 w. FragmentSize disabled
test-1821 = 1821-Maximum Fragment Len extension equal FragmentSize to 2048
test-1822 = 1822-Maximum Fragment Len extension 512 lower than FragmentSize 1024
test-1823 = 1823-Maximum Fragment Len extension 1024 lower than FragmentSize 1024
test-1824 = 1824-Maximum Fragment Len extension 4096 greater than FragmentSize 2048
test-1825 = 1825-Maximum Fragment Len extension 2048 greater than FragmentSize 1024
test-1826 = 1826-curve-sect163k1
test-1827 = 1827-curve-sect163r1
test-1828 = 1828-curve-sect163r2
test-1829 = 1829-curve-sect193r1
test-1830 = 1830-curve-sect193r2
test-1831 = 1831-curve-sect233k1
test-1832 = 1832-curve-sect233r1
test-1833 = 1833-curve-sect239k1
test-1834 = 1834-curve-sect283k1
test-1835 = 1835-curve-sect283r1
test-1836 = 1836-curve-sect409k1
test-1837 = 1837-curve-sect409r1
test-1838 = 1838-curve-sect571k1
test-1839 = 1839-curve-sect571r1
test-1840 = 1840-curve-secp160k1
test-1841 = 1841-curve-secp160r1
test-1842 = 1842-curve-secp160r2
test-1843 = 1843-curve-secp192k1
test-1844 = 1844-curve-prime192v1
test-1845 = 1845-curve-secp224k1
test-1846 = 1846-curve-secp224r1
test-1847 = 1847-curve-secp256k1
test-1848 = 1848-curve-prime256v1
test-1849 = 1849-curve-secp384r1
test-1850 = 1850-curve-secp521r1
test-1851 = 1851-curve-brainpoolP256r1
test-1852 = 1852-curve-brainpoolP384r1
test-1853 = 1853-curve-brainpoolP512r1
test-1854 = 1854-certstatus-good
test-1855 = 1855-certstatus-bad
test-1856 = 1856-renegotiate-client-no-resume
test-1857 = 1857-renegotiate-client-resume
test-1858 = 1858-renegotiate-server-no-resume
test-1859 = 1859-renegotiate-server-resume
test-1860 = 1860-renegotiate-client-auth-once
test-1861 = 1861-renegotiate-aead-to-non-aead
test-1862 = 1862-renegotiate-non-aead-to-aead
test-1863 = 1863-renegotiate-non-aead-to-non-aead
test-1864 = 1864-renegotiate-aead-to-aead
test-1865 = 1865-no-renegotiation-server-by-client
test-1866 = 1866-no-renegotiation-server-by-server
test-1867 = 1867-no-renegotiation-client-by-server
test-1868 = 1868-no-renegotiation-client-by-client
test-1869 = 1869-disable-encrypt-then-mac-server-sha
test-1870 = 1870-disable-encrypt-then-mac-client-sha
test-1871 = 1871-disable-encrypt-then-mac-both-sha
test-1872 = 1872-disable-encrypt-then-mac-server-sha2
test-1873 = 1873-disable-encrypt-then-mac-client-sha2
test-1874 = 1874-disable-encrypt-then-mac-both-sha2
test-1875 = 1875-ECDSA CipherString Selection
test-1876 = 1876-ECDSA CipherString Selection
test-1877 = 1877-ECDSA CipherString Selection
test-1878 = 1878-Ed25519 CipherString and Signature Algorithm Selection
test-1879 = 1879-Ed448 CipherString and Signature Algorithm Selection
test-1880 = 1880-ECDSA with brainpool
test-1881 = 1881-RSA CipherString Selection
test-1882 = 1882-RSA-PSS Certificate CipherString Selection
test-1883 = 1883-P-256 CipherString and Signature Algorithm Selection
test-1884 = 1884-Ed25519 CipherString and Curves Selection
test-1885 = 1885-Ed448 CipherString and Curves Selection
test-1886 = 1886-ECDSA CipherString Selection, no ECDSA certificate
test-1887 = 1887-ECDSA Signature Algorithm Selection
test-1888 = 1888-ECDSA Signature Algorithm Selection SHA384
test-1889 = 1889-ECDSA Signature Algorithm Selection SHA1
test-1890 = 1890-ECDSA Signature Algorithm Selection compressed point
test-1891 = 1891-ECDSA Signature Algorithm Selection, no ECDSA certificate
test-1892 = 1892-RSA Signature Algorithm Selection
test-1893 = 1893-RSA-PSS Signature Algorithm Selection
test-1894 = 1894-RSA-PSS Certificate Legacy Signature Algorithm Selection
test-1895 = 1895-RSA-PSS Certificate Unified Signature Algorithm Selection
test-1896 = 1896-Only RSA-PSS Certificate
test-1897 = 1897-RSA-PSS Certificate, no PSS signature algorithms
test-1898 = 1898-RSA key exchange with all RSA certificate types
test-1899 = 1899-RSA key exchange with only RSA-PSS certificate
test-1900 = 1900-Suite B P-256 Hash Algorithm Selection
test-1901 = 1901-Suite B P-384 Hash Algorithm Selection
test-1902 = 1902-TLS 1.2 Ed25519 Client Auth
test-1903 = 1903-TLS 1.2 Ed448 Client Auth
test-1904 = 1904-Only RSA-PSS Certificate, TLS v1.1
test-1905 = 1905-TLS 1.3 ECDSA Signature Algorithm Selection
test-1906 = 1906-TLS 1.3 ECDSA Signature Algorithm Selection compressed point
test-1907 = 1907-TLS 1.3 ECDSA Signature Algorithm Selection SHA1
test-1908 = 1908-TLS 1.3 ECDSA Signature Algorithm Selection with PSS
test-1909 = 1909-TLS 1.3 RSA Signature Algorithm Selection SHA384 with PSS
test-1910 = 1910-TLS 1.3 ECDSA Signature Algorithm Selection, no ECDSA certificate
test-1911 = 1911-TLS 1.3 RSA Signature Algorithm Selection, no PSS
test-1912 = 1912-TLS 1.3 RSA-PSS Signature Algorithm Selection
test-1913 = 1913-TLS 1.3 Ed25519 Signature Algorithm Selection
test-1914 = 1914-TLS 1.3 Ed448 Signature Algorithm Selection
test-1915 = 1915-TLS 1.3 Ed25519 CipherString and Groups Selection
test-1916 = 1916-TLS 1.3 Ed448 CipherString and Groups Selection
test-1917 = 1917-TLS 1.3 RSA Client Auth Signature Algorithm Selection
test-1918 = 1918-TLS 1.3 ECDSA Client Auth Signature Algorithm Selection
test-1919 = 1919-TLS 1.3 Ed25519 Client Auth
test-1920 = 1920-TLS 1.3 Ed448 Client Auth
test-1921 = 1921-TLS 1.3 ECDSA with brainpool
test-1922 = 1922-TLS 1.2 DSA Certificate Test
test-1923 = 1923-TLS 1.3 Client Auth No TLS 1.3 Signature Algorithms
test-1924 = 1924-TLS 1.3 DSA Certificate Test
test-1925 = 1925-update-key-client-update-not-requested
test-1926 = 1926-update-key-server-update-not-requested
test-1927 = 1927-update-key-client-update-requested
test-1928 = 1928-update-key-server-update-requested
test-1929 = 1929-default
test-1930 = 1930-cipher-server-1
test-1931 = 1931-cipher-server-2
test-1932 = 1932-cipher-server-client-list
test-1933 = 1933-cipher-server-pref-1
test-1934 = 1934-cipher-server-pref-2
test-1935 = 1935-cipher-server-pref-client-list
test-1936 = 1936-cipher-server-pref-not-mobile
test-1937 = 1937-cipher-server-pref-mobile
test-1938 = 1938-cipher-server-pref-mobile2
test-1939 = 1939-server-auth-TLSv1.3
test-1940 = 1940-client-auth-TLSv1.3-request
test-1941 = 1941-client-auth-TLSv1.3-require-fail
test-1942 = 1942-client-auth-TLSv1.3-require
test-1943 = 1943-client-auth-TLSv1.3-noroot
test-1944 = 1944-client-auth-TLSv1.3-request-post-handshake
test-1945 = 1945-client-auth-TLSv1.3-require-fail-post-handshake
test-1946 = 1946-client-auth-TLSv1.3-request-force-server-post-handshake
test-1947 = 1947-session-ticket-app-data12
test-1948 = 1948-session-ticket-app-data12
test-1949 = 1949-session-ticket-app-data13
test-1950 = 1950-session-ticket-app-data13
test-1951 = 1951-SECLEVEL 3 with default key
test-1952 = 1952-SECLEVEL 3 with ED448 key
test-1953 = 1953-SECLEVEL 3 with P-384 key, X25519 ECDHE
test-1954 = 1954-SECLEVEL 3 with ED448 key, TLSv1.2
# ===========================================================

[0-default]
ssl_conf = 0-default-ssl

[0-default-ssl]
server = 0-default-server
client = 0-default-client

[0-default-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[0-default-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-0]
ExpectedResult = Success
Serialize = Server


# ===========================================================

[1-Server signature algorithms bug]
ssl_conf = 1-Server signature algorithms bug-ssl

[1-Server signature algorithms bug-ssl]
server = 1-Server signature algorithms bug-server
client = 1-Server signature algorithms bug-client

[1-Server signature algorithms bug-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
ClientSignatureAlgorithms = PSS+SHA512:RSA+SHA512
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1-Server signature algorithms bug-client]
CipherString = DEFAULT
SignatureAlgorithms = PSS+SHA256:RSA+SHA256
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1]
ExpectedResult = Success
Serialize = Server


# ===========================================================

[2-verify-cert]
ssl_conf = 2-verify-cert-ssl

[2-verify-cert-ssl]
server = 2-verify-cert-server
client = 2-verify-cert-client

[2-verify-cert-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[2-verify-cert-client]
CipherString = DEFAULT
VerifyMode = Peer

[test-2]
ExpectedClientAlert = UnknownCA
ExpectedResult = ClientFail
Serialize = Server


# ===========================================================

[3-version-negotiation]
ssl_conf = 3-version-negotiation-ssl

[3-version-negotiation-ssl]
server = 3-version-negotiation-server
client = 3-version-negotiation-client

[3-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[3-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-3]
ExpectedResult = ClientFail
Serialize = Server


# ===========================================================

[4-version-negotiation]
ssl_conf = 4-version-negotiation-ssl

[4-version-negotiation-ssl]
server = 4-version-negotiation-server
client = 4-version-negotiation-client

[4-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[4-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-4]
ExpectedResult = ClientFail
Serialize = Server


# ===========================================================

[5-version-negotiation]
ssl_conf = 5-version-negotiation-ssl

[5-version-negotiation-ssl]
server = 5-version-negotiation-server
client = 5-version-negotiation-client

[5-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[5-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-5]
ExpectedResult = ClientFail
Serialize = Server


# ===========================================================

[6-version-negotiation]
ssl_conf = 6-version-negotiation-ssl

[6-version-negotiation-ssl]
server = 6-version-negotiation-server
client = 6-version-negotiation-client

[6-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[6-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-6]
ExpectedResult = ClientFail
Serialize = Server


# ===========================================================

[7-version-negotiation]
ssl_conf = 7-version-negotiation-ssl

[7-version-negotiation-ssl]
server = 7-version-negotiation-server
client = 7-version-negotiation-client

[7-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[7-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-7]
ExpectedResult = ClientFail
Serialize = Server


# ===========================================================

[8-version-negotiation]
ssl_conf = 8-version-negotiation-ssl

[8-version-negotiation-ssl]
server = 8-version-negotiation-server
client = 8-version-negotiation-client

[8-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[8-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-8]
ExpectedResult = ClientFail
Serialize = Server


# ===========================================================

[9-version-negotiation]
ssl_conf = 9-version-negotiation-ssl

[9-version-negotiation-ssl]
server = 9-version-negotiation-server
client = 9-version-negotiation-client

[9-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = SSLv3
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[9-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-9]
ExpectedResult = ClientFail
Serialize = Server


# ===========================================================

[10-version-negotiation]
ssl_conf = 10-version-negotiation-ssl

[10-version-negotiation-ssl]
server = 10-version-negotiation-server
client = 10-version-negotiation-client

[10-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[10-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-10]
ExpectedResult = ClientFail
Serialize = Server


# ===========================================================

[11-version-negotiation]
ssl_conf = 11-version-negotiation-ssl

[11-version-negotiation-ssl]
server = 11-version-negotiation-server
client = 11-version-negotiation-client

[11-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[11-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-11]
ExpectedResult = ClientFail
Serialize = Server


# ===========================================================

[12-version-negotiation]
ssl_conf = 12-version-negotiation-ssl

[12-version-negotiation-ssl]
server = 12-version-negotiation-server
client = 12-version-negotiation-client

[12-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[12-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-12]
ExpectedResult = ClientFail
Serialize = Server


# ===========================================================

[13-version-negotiation]
ssl_conf = 13-version-negotiation-ssl

[13-version-negotiation-ssl]
server = 13-version-negotiation-server
client = 13-version-negotiation-client

[13-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[13-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-13]
ExpectedResult = ClientFail
Serialize = Server


# ===========================================================

[14-version-negotiation]
ssl_conf = 14-version-negotiation-ssl

[14-version-negotiation-ssl]
server = 14-version-negotiation-server
client = 14-version-negotiation-client

[14-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[14-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-14]
ExpectedResult = ClientFail
Serialize = Server


# ===========================================================

[15-version-negotiation]
ssl_conf = 15-version-negotiation-ssl

[15-version-negotiation-ssl]
server = 15-version-negotiation-server
client = 15-version-negotiation-client

[15-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[15-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-15]
ExpectedResult = ClientFail
Serialize = Server


# ===========================================================

[16-version-negotiation]
ssl_conf = 16-version-negotiation-ssl

[16-version-negotiation-ssl]
server = 16-version-negotiation-server
client = 16-version-negotiation-client

[16-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[16-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-16]
ExpectedResult = ClientFail
Serialize = Server


# ===========================================================

[17-version-negotiation]
ssl_conf = 17-version-negotiation-ssl

[17-version-negotiation-ssl]
server = 17-version-negotiation-server
client = 17-version-negotiation-client

[17-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[17-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-17]
ExpectedResult = ClientFail
Serialize = Server


# ===========================================================

[18-version-negotiation]
ssl_conf = 18-version-negotiation-ssl

[18-version-negotiation-ssl]
server = 18-version-negotiation-server
client = 18-version-negotiation-client

[18-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[18-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-18]
ExpectedResult = ClientFail
Serialize = Server


# ===========================================================

[19-version-negotiation]
ssl_conf = 19-version-negotiation-ssl

[19-version-negotiation-ssl]
server = 19-version-negotiation-server
client = 19-version-negotiation-client

[19-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[19-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-19]
ExpectedResult = ClientFail
Serialize = Server


# ===========================================================

[20-version-negotiation]
ssl_conf = 20-version-negotiation-ssl

[20-version-negotiation-ssl]
server = 20-version-negotiation-server
client = 20-version-negotiation-client

[20-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[20-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-20]
ExpectedResult = ClientFail
Serialize = Server


# ===========================================================

[21-version-negotiation]
ssl_conf = 21-version-negotiation-ssl

[21-version-negotiation-ssl]
server = 21-version-negotiation-server
client = 21-version-negotiation-client

[21-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[21-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-21]
ExpectedResult = ClientFail
Serialize = Server


# ===========================================================

[22-version-negotiation]
ssl_conf = 22-version-negotiation-ssl

[22-version-negotiation-ssl]
server = 22-version-negotiation-server
client = 22-version-negotiation-client

[22-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[22-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-22]
ExpectedResult = ClientFail
Serialize = Server


# ===========================================================

[23-version-negotiation]
ssl_conf = 23-version-negotiation-ssl

[23-version-negotiation-ssl]
server = 23-version-negotiation-server
client = 23-version-negotiation-client

[23-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[23-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-23]
ExpectedResult = ClientFail
Serialize = Server


# ===========================================================

[24-version-negotiation]
ssl_conf = 24-version-negotiation-ssl

[24-version-negotiation-ssl]
server = 24-version-negotiation-server
client = 24-version-negotiation-client

[24-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[24-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-24]
ExpectedResult = ClientFail
Serialize = Server


# ===========================================================

[25-version-negotiation]
ssl_conf = 25-version-negotiation-ssl

[25-version-negotiation-ssl]
server = 25-version-negotiation-server
client = 25-version-negotiation-client

[25-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[25-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-25]
ExpectedResult = ClientFail
Serialize = Server


# ===========================================================

[26-version-negotiation]
ssl_conf = 26-version-negotiation-ssl

[26-version-negotiation-ssl]
server = 26-version-negotiation-server
client = 26-version-negotiation-client

[26-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[26-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-26]
ExpectedResult = ClientFail
Serialize = Server


# ===========================================================

[27-version-negotiation]
ssl_conf = 27-version-negotiation-ssl

[27-version-negotiation-ssl]
server = 27-version-negotiation-server
client = 27-version-negotiation-client

[27-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[27-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-27]
ExpectedResult = ClientFail
Serialize = Server


# ===========================================================

[28-version-negotiation]
ssl_conf = 28-version-negotiation-ssl

[28-version-negotiation-ssl]
server = 28-version-negotiation-server
client = 28-version-negotiation-client

[28-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[28-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-28]
ExpectedResult = ClientFail
Serialize = Server


# ===========================================================

[29-version-negotiation]
ssl_conf = 29-version-negotiation-ssl

[29-version-negotiation-ssl]
server = 29-version-negotiation-server
client = 29-version-negotiation-client

[29-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[29-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-29]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[30-version-negotiation]
ssl_conf = 30-version-negotiation-ssl

[30-version-negotiation-ssl]
server = 30-version-negotiation-server
client = 30-version-negotiation-client

[30-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[30-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-30]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[31-version-negotiation]
ssl_conf = 31-version-negotiation-ssl

[31-version-negotiation-ssl]
server = 31-version-negotiation-server
client = 31-version-negotiation-client

[31-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[31-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-31]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[32-version-negotiation]
ssl_conf = 32-version-negotiation-ssl

[32-version-negotiation-ssl]
server = 32-version-negotiation-server
client = 32-version-negotiation-client

[32-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[32-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-32]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[33-version-negotiation]
ssl_conf = 33-version-negotiation-ssl

[33-version-negotiation-ssl]
server = 33-version-negotiation-server
client = 33-version-negotiation-client

[33-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[33-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-33]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[34-version-negotiation]
ssl_conf = 34-version-negotiation-ssl

[34-version-negotiation-ssl]
server = 34-version-negotiation-server
client = 34-version-negotiation-client

[34-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[34-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-34]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[35-version-negotiation]
ssl_conf = 35-version-negotiation-ssl

[35-version-negotiation-ssl]
server = 35-version-negotiation-server
client = 35-version-negotiation-client

[35-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = SSLv3
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[35-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-35]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[36-version-negotiation]
ssl_conf = 36-version-negotiation-ssl

[36-version-negotiation-ssl]
server = 36-version-negotiation-server
client = 36-version-negotiation-client

[36-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[36-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-36]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[37-version-negotiation]
ssl_conf = 37-version-negotiation-ssl

[37-version-negotiation-ssl]
server = 37-version-negotiation-server
client = 37-version-negotiation-client

[37-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[37-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-37]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[38-version-negotiation]
ssl_conf = 38-version-negotiation-ssl

[38-version-negotiation-ssl]
server = 38-version-negotiation-server
client = 38-version-negotiation-client

[38-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[38-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-38]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[39-version-negotiation]
ssl_conf = 39-version-negotiation-ssl

[39-version-negotiation-ssl]
server = 39-version-negotiation-server
client = 39-version-negotiation-client

[39-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[39-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-39]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[40-version-negotiation]
ssl_conf = 40-version-negotiation-ssl

[40-version-negotiation-ssl]
server = 40-version-negotiation-server
client = 40-version-negotiation-client

[40-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[40-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-40]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[41-version-negotiation]
ssl_conf = 41-version-negotiation-ssl

[41-version-negotiation-ssl]
server = 41-version-negotiation-server
client = 41-version-negotiation-client

[41-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[41-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-41]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[42-version-negotiation]
ssl_conf = 42-version-negotiation-ssl

[42-version-negotiation-ssl]
server = 42-version-negotiation-server
client = 42-version-negotiation-client

[42-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[42-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-42]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[43-version-negotiation]
ssl_conf = 43-version-negotiation-ssl

[43-version-negotiation-ssl]
server = 43-version-negotiation-server
client = 43-version-negotiation-client

[43-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[43-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-43]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[44-version-negotiation]
ssl_conf = 44-version-negotiation-ssl

[44-version-negotiation-ssl]
server = 44-version-negotiation-server
client = 44-version-negotiation-client

[44-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[44-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-44]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[45-version-negotiation]
ssl_conf = 45-version-negotiation-ssl

[45-version-negotiation-ssl]
server = 45-version-negotiation-server
client = 45-version-negotiation-client

[45-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[45-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-45]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[46-version-negotiation]
ssl_conf = 46-version-negotiation-ssl

[46-version-negotiation-ssl]
server = 46-version-negotiation-server
client = 46-version-negotiation-client

[46-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[46-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-46]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[47-version-negotiation]
ssl_conf = 47-version-negotiation-ssl

[47-version-negotiation-ssl]
server = 47-version-negotiation-server
client = 47-version-negotiation-client

[47-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[47-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-47]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[48-version-negotiation]
ssl_conf = 48-version-negotiation-ssl

[48-version-negotiation-ssl]
server = 48-version-negotiation-server
client = 48-version-negotiation-client

[48-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[48-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-48]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[49-version-negotiation]
ssl_conf = 49-version-negotiation-ssl

[49-version-negotiation-ssl]
server = 49-version-negotiation-server
client = 49-version-negotiation-client

[49-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[49-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-49]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[50-version-negotiation]
ssl_conf = 50-version-negotiation-ssl

[50-version-negotiation-ssl]
server = 50-version-negotiation-server
client = 50-version-negotiation-client

[50-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[50-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-50]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[51-version-negotiation]
ssl_conf = 51-version-negotiation-ssl

[51-version-negotiation-ssl]
server = 51-version-negotiation-server
client = 51-version-negotiation-client

[51-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[51-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-51]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[52-version-negotiation]
ssl_conf = 52-version-negotiation-ssl

[52-version-negotiation-ssl]
server = 52-version-negotiation-server
client = 52-version-negotiation-client

[52-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[52-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-52]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[53-version-negotiation]
ssl_conf = 53-version-negotiation-ssl

[53-version-negotiation-ssl]
server = 53-version-negotiation-server
client = 53-version-negotiation-client

[53-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[53-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-53]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[54-version-negotiation]
ssl_conf = 54-version-negotiation-ssl

[54-version-negotiation-ssl]
server = 54-version-negotiation-server
client = 54-version-negotiation-client

[54-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[54-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-54]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[55-version-negotiation]
ssl_conf = 55-version-negotiation-ssl

[55-version-negotiation-ssl]
server = 55-version-negotiation-server
client = 55-version-negotiation-client

[55-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[55-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-55]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[56-version-negotiation]
ssl_conf = 56-version-negotiation-ssl

[56-version-negotiation-ssl]
server = 56-version-negotiation-server
client = 56-version-negotiation-client

[56-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[56-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-56]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[57-version-negotiation]
ssl_conf = 57-version-negotiation-ssl

[57-version-negotiation-ssl]
server = 57-version-negotiation-server
client = 57-version-negotiation-client

[57-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[57-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-57]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[58-version-negotiation]
ssl_conf = 58-version-negotiation-ssl

[58-version-negotiation-ssl]
server = 58-version-negotiation-server
client = 58-version-negotiation-client

[58-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[58-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-58]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[59-version-negotiation]
ssl_conf = 59-version-negotiation-ssl

[59-version-negotiation-ssl]
server = 59-version-negotiation-server
client = 59-version-negotiation-client

[59-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[59-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-59]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[60-version-negotiation]
ssl_conf = 60-version-negotiation-ssl

[60-version-negotiation-ssl]
server = 60-version-negotiation-server
client = 60-version-negotiation-client

[60-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[60-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-60]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[61-version-negotiation]
ssl_conf = 61-version-negotiation-ssl

[61-version-negotiation-ssl]
server = 61-version-negotiation-server
client = 61-version-negotiation-client

[61-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = SSLv3
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[61-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-61]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[62-version-negotiation]
ssl_conf = 62-version-negotiation-ssl

[62-version-negotiation-ssl]
server = 62-version-negotiation-server
client = 62-version-negotiation-client

[62-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[62-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-62]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[63-version-negotiation]
ssl_conf = 63-version-negotiation-ssl

[63-version-negotiation-ssl]
server = 63-version-negotiation-server
client = 63-version-negotiation-client

[63-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[63-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-63]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[64-version-negotiation]
ssl_conf = 64-version-negotiation-ssl

[64-version-negotiation-ssl]
server = 64-version-negotiation-server
client = 64-version-negotiation-client

[64-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[64-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-64]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[65-version-negotiation]
ssl_conf = 65-version-negotiation-ssl

[65-version-negotiation-ssl]
server = 65-version-negotiation-server
client = 65-version-negotiation-client

[65-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[65-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-65]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[66-version-negotiation]
ssl_conf = 66-version-negotiation-ssl

[66-version-negotiation-ssl]
server = 66-version-negotiation-server
client = 66-version-negotiation-client

[66-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[66-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-66]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[67-version-negotiation]
ssl_conf = 67-version-negotiation-ssl

[67-version-negotiation-ssl]
server = 67-version-negotiation-server
client = 67-version-negotiation-client

[67-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[67-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-67]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[68-version-negotiation]
ssl_conf = 68-version-negotiation-ssl

[68-version-negotiation-ssl]
server = 68-version-negotiation-server
client = 68-version-negotiation-client

[68-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[68-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-68]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[69-version-negotiation]
ssl_conf = 69-version-negotiation-ssl

[69-version-negotiation-ssl]
server = 69-version-negotiation-server
client = 69-version-negotiation-client

[69-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[69-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-69]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[70-version-negotiation]
ssl_conf = 70-version-negotiation-ssl

[70-version-negotiation-ssl]
server = 70-version-negotiation-server
client = 70-version-negotiation-client

[70-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[70-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-70]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[71-version-negotiation]
ssl_conf = 71-version-negotiation-ssl

[71-version-negotiation-ssl]
server = 71-version-negotiation-server
client = 71-version-negotiation-client

[71-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[71-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-71]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[72-version-negotiation]
ssl_conf = 72-version-negotiation-ssl

[72-version-negotiation-ssl]
server = 72-version-negotiation-server
client = 72-version-negotiation-client

[72-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[72-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-72]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[73-version-negotiation]
ssl_conf = 73-version-negotiation-ssl

[73-version-negotiation-ssl]
server = 73-version-negotiation-server
client = 73-version-negotiation-client

[73-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[73-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-73]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[74-version-negotiation]
ssl_conf = 74-version-negotiation-ssl

[74-version-negotiation-ssl]
server = 74-version-negotiation-server
client = 74-version-negotiation-client

[74-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[74-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-74]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[75-version-negotiation]
ssl_conf = 75-version-negotiation-ssl

[75-version-negotiation-ssl]
server = 75-version-negotiation-server
client = 75-version-negotiation-client

[75-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[75-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-75]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[76-version-negotiation]
ssl_conf = 76-version-negotiation-ssl

[76-version-negotiation-ssl]
server = 76-version-negotiation-server
client = 76-version-negotiation-client

[76-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[76-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-76]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[77-version-negotiation]
ssl_conf = 77-version-negotiation-ssl

[77-version-negotiation-ssl]
server = 77-version-negotiation-server
client = 77-version-negotiation-client

[77-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[77-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-77]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[78-version-negotiation]
ssl_conf = 78-version-negotiation-ssl

[78-version-negotiation-ssl]
server = 78-version-negotiation-server
client = 78-version-negotiation-client

[78-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[78-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-78]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[79-version-negotiation]
ssl_conf = 79-version-negotiation-ssl

[79-version-negotiation-ssl]
server = 79-version-negotiation-server
client = 79-version-negotiation-client

[79-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[79-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-79]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[80-version-negotiation]
ssl_conf = 80-version-negotiation-ssl

[80-version-negotiation-ssl]
server = 80-version-negotiation-server
client = 80-version-negotiation-client

[80-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[80-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-80]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[81-version-negotiation]
ssl_conf = 81-version-negotiation-ssl

[81-version-negotiation-ssl]
server = 81-version-negotiation-server
client = 81-version-negotiation-client

[81-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[81-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-81]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[82-version-negotiation]
ssl_conf = 82-version-negotiation-ssl

[82-version-negotiation-ssl]
server = 82-version-negotiation-server
client = 82-version-negotiation-client

[82-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[82-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-82]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[83-version-negotiation]
ssl_conf = 83-version-negotiation-ssl

[83-version-negotiation-ssl]
server = 83-version-negotiation-server
client = 83-version-negotiation-client

[83-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[83-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-83]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[84-version-negotiation]
ssl_conf = 84-version-negotiation-ssl

[84-version-negotiation-ssl]
server = 84-version-negotiation-server
client = 84-version-negotiation-client

[84-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[84-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-84]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Server


# ===========================================================

[85-version-negotiation]
ssl_conf = 85-version-negotiation-ssl

[85-version-negotiation-ssl]
server = 85-version-negotiation-server
client = 85-version-negotiation-client

[85-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[85-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-85]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Server


# ===========================================================

[86-version-negotiation]
ssl_conf = 86-version-negotiation-ssl

[86-version-negotiation-ssl]
server = 86-version-negotiation-server
client = 86-version-negotiation-client

[86-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[86-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-86]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Server


# ===========================================================

[87-version-negotiation]
ssl_conf = 87-version-negotiation-ssl

[87-version-negotiation-ssl]
server = 87-version-negotiation-server
client = 87-version-negotiation-client

[87-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = SSLv3
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[87-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-87]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[88-version-negotiation]
ssl_conf = 88-version-negotiation-ssl

[88-version-negotiation-ssl]
server = 88-version-negotiation-server
client = 88-version-negotiation-client

[88-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[88-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-88]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[89-version-negotiation]
ssl_conf = 89-version-negotiation-ssl

[89-version-negotiation-ssl]
server = 89-version-negotiation-server
client = 89-version-negotiation-client

[89-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[89-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-89]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[90-version-negotiation]
ssl_conf = 90-version-negotiation-ssl

[90-version-negotiation-ssl]
server = 90-version-negotiation-server
client = 90-version-negotiation-client

[90-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[90-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-90]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Server


# ===========================================================

[91-version-negotiation]
ssl_conf = 91-version-negotiation-ssl

[91-version-negotiation-ssl]
server = 91-version-negotiation-server
client = 91-version-negotiation-client

[91-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[91-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-91]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Server


# ===========================================================

[92-version-negotiation]
ssl_conf = 92-version-negotiation-ssl

[92-version-negotiation-ssl]
server = 92-version-negotiation-server
client = 92-version-negotiation-client

[92-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[92-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-92]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Server


# ===========================================================

[93-version-negotiation]
ssl_conf = 93-version-negotiation-ssl

[93-version-negotiation-ssl]
server = 93-version-negotiation-server
client = 93-version-negotiation-client

[93-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[93-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-93]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[94-version-negotiation]
ssl_conf = 94-version-negotiation-ssl

[94-version-negotiation-ssl]
server = 94-version-negotiation-server
client = 94-version-negotiation-client

[94-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[94-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-94]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[95-version-negotiation]
ssl_conf = 95-version-negotiation-ssl

[95-version-negotiation-ssl]
server = 95-version-negotiation-server
client = 95-version-negotiation-client

[95-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[95-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-95]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Server


# ===========================================================

[96-version-negotiation]
ssl_conf = 96-version-negotiation-ssl

[96-version-negotiation-ssl]
server = 96-version-negotiation-server
client = 96-version-negotiation-client

[96-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[96-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-96]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Server


# ===========================================================

[97-version-negotiation]
ssl_conf = 97-version-negotiation-ssl

[97-version-negotiation-ssl]
server = 97-version-negotiation-server
client = 97-version-negotiation-client

[97-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[97-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-97]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Server


# ===========================================================

[98-version-negotiation]
ssl_conf = 98-version-negotiation-ssl

[98-version-negotiation-ssl]
server = 98-version-negotiation-server
client = 98-version-negotiation-client

[98-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[98-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-98]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[99-version-negotiation]
ssl_conf = 99-version-negotiation-ssl

[99-version-negotiation-ssl]
server = 99-version-negotiation-server
client = 99-version-negotiation-client

[99-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[99-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-99]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Server


# ===========================================================

[100-version-negotiation]
ssl_conf = 100-version-negotiation-ssl

[100-version-negotiation-ssl]
server = 100-version-negotiation-server
client = 100-version-negotiation-client

[100-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[100-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-100]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Server


# ===========================================================

[101-version-negotiation]
ssl_conf = 101-version-negotiation-ssl

[101-version-negotiation-ssl]
server = 101-version-negotiation-server
client = 101-version-negotiation-client

[101-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[101-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-101]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Server


# ===========================================================

[102-version-negotiation]
ssl_conf = 102-version-negotiation-ssl

[102-version-negotiation-ssl]
server = 102-version-negotiation-server
client = 102-version-negotiation-client

[102-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[102-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-102]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Server


# ===========================================================

[103-version-negotiation]
ssl_conf = 103-version-negotiation-ssl

[103-version-negotiation-ssl]
server = 103-version-negotiation-server
client = 103-version-negotiation-client

[103-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[103-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-103]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Server


# ===========================================================

[104-version-negotiation]
ssl_conf = 104-version-negotiation-ssl

[104-version-negotiation-ssl]
server = 104-version-negotiation-server
client = 104-version-negotiation-client

[104-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[104-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-104]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Server


# ===========================================================

[105-version-negotiation]
ssl_conf = 105-version-negotiation-ssl

[105-version-negotiation-ssl]
server = 105-version-negotiation-server
client = 105-version-negotiation-client

[105-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[105-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-105]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[106-version-negotiation]
ssl_conf = 106-version-negotiation-ssl

[106-version-negotiation-ssl]
server = 106-version-negotiation-server
client = 106-version-negotiation-client

[106-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[106-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-106]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[107-version-negotiation]
ssl_conf = 107-version-negotiation-ssl

[107-version-negotiation-ssl]
server = 107-version-negotiation-server
client = 107-version-negotiation-client

[107-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[107-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-107]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[108-version-negotiation]
ssl_conf = 108-version-negotiation-ssl

[108-version-negotiation-ssl]
server = 108-version-negotiation-server
client = 108-version-negotiation-client

[108-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[108-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-108]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[109-version-negotiation]
ssl_conf = 109-version-negotiation-ssl

[109-version-negotiation-ssl]
server = 109-version-negotiation-server
client = 109-version-negotiation-client

[109-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[109-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-109]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[110-version-negotiation]
ssl_conf = 110-version-negotiation-ssl

[110-version-negotiation-ssl]
server = 110-version-negotiation-server
client = 110-version-negotiation-client

[110-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[110-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-110]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Server


# ===========================================================

[111-version-negotiation]
ssl_conf = 111-version-negotiation-ssl

[111-version-negotiation-ssl]
server = 111-version-negotiation-server
client = 111-version-negotiation-client

[111-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[111-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-111]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[112-version-negotiation]
ssl_conf = 112-version-negotiation-ssl

[112-version-negotiation-ssl]
server = 112-version-negotiation-server
client = 112-version-negotiation-client

[112-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[112-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-112]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[113-version-negotiation]
ssl_conf = 113-version-negotiation-ssl

[113-version-negotiation-ssl]
server = 113-version-negotiation-server
client = 113-version-negotiation-client

[113-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = SSLv3
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[113-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-113]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[114-version-negotiation]
ssl_conf = 114-version-negotiation-ssl

[114-version-negotiation-ssl]
server = 114-version-negotiation-server
client = 114-version-negotiation-client

[114-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[114-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-114]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[115-version-negotiation]
ssl_conf = 115-version-negotiation-ssl

[115-version-negotiation-ssl]
server = 115-version-negotiation-server
client = 115-version-negotiation-client

[115-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[115-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-115]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[116-version-negotiation]
ssl_conf = 116-version-negotiation-ssl

[116-version-negotiation-ssl]
server = 116-version-negotiation-server
client = 116-version-negotiation-client

[116-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[116-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-116]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Server


# ===========================================================

[117-version-negotiation]
ssl_conf = 117-version-negotiation-ssl

[117-version-negotiation-ssl]
server = 117-version-negotiation-server
client = 117-version-negotiation-client

[117-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[117-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-117]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[118-version-negotiation]
ssl_conf = 118-version-negotiation-ssl

[118-version-negotiation-ssl]
server = 118-version-negotiation-server
client = 118-version-negotiation-client

[118-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[118-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-118]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[119-version-negotiation]
ssl_conf = 119-version-negotiation-ssl

[119-version-negotiation-ssl]
server = 119-version-negotiation-server
client = 119-version-negotiation-client

[119-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[119-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-119]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[120-version-negotiation]
ssl_conf = 120-version-negotiation-ssl

[120-version-negotiation-ssl]
server = 120-version-negotiation-server
client = 120-version-negotiation-client

[120-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[120-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-120]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[121-version-negotiation]
ssl_conf = 121-version-negotiation-ssl

[121-version-negotiation-ssl]
server = 121-version-negotiation-server
client = 121-version-negotiation-client

[121-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[121-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-121]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Server


# ===========================================================

[122-version-negotiation]
ssl_conf = 122-version-negotiation-ssl

[122-version-negotiation-ssl]
server = 122-version-negotiation-server
client = 122-version-negotiation-client

[122-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[122-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-122]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[123-version-negotiation]
ssl_conf = 123-version-negotiation-ssl

[123-version-negotiation-ssl]
server = 123-version-negotiation-server
client = 123-version-negotiation-client

[123-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[123-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-123]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[124-version-negotiation]
ssl_conf = 124-version-negotiation-ssl

[124-version-negotiation-ssl]
server = 124-version-negotiation-server
client = 124-version-negotiation-client

[124-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[124-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-124]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[125-version-negotiation]
ssl_conf = 125-version-negotiation-ssl

[125-version-negotiation-ssl]
server = 125-version-negotiation-server
client = 125-version-negotiation-client

[125-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[125-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-125]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Server


# ===========================================================

[126-version-negotiation]
ssl_conf = 126-version-negotiation-ssl

[126-version-negotiation-ssl]
server = 126-version-negotiation-server
client = 126-version-negotiation-client

[126-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[126-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-126]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[127-version-negotiation]
ssl_conf = 127-version-negotiation-ssl

[127-version-negotiation-ssl]
server = 127-version-negotiation-server
client = 127-version-negotiation-client

[127-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[127-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-127]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[128-version-negotiation]
ssl_conf = 128-version-negotiation-ssl

[128-version-negotiation-ssl]
server = 128-version-negotiation-server
client = 128-version-negotiation-client

[128-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[128-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-128]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Server


# ===========================================================

[129-version-negotiation]
ssl_conf = 129-version-negotiation-ssl

[129-version-negotiation-ssl]
server = 129-version-negotiation-server
client = 129-version-negotiation-client

[129-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[129-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-129]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[130-version-negotiation]
ssl_conf = 130-version-negotiation-ssl

[130-version-negotiation-ssl]
server = 130-version-negotiation-server
client = 130-version-negotiation-client

[130-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[130-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-130]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[131-version-negotiation]
ssl_conf = 131-version-negotiation-ssl

[131-version-negotiation-ssl]
server = 131-version-negotiation-server
client = 131-version-negotiation-client

[131-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[131-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-131]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[132-version-negotiation]
ssl_conf = 132-version-negotiation-ssl

[132-version-negotiation-ssl]
server = 132-version-negotiation-server
client = 132-version-negotiation-client

[132-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[132-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-132]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[133-version-negotiation]
ssl_conf = 133-version-negotiation-ssl

[133-version-negotiation-ssl]
server = 133-version-negotiation-server
client = 133-version-negotiation-client

[133-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[133-version-negotiation-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-133]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[134-version-negotiation]
ssl_conf = 134-version-negotiation-ssl

[134-version-negotiation-ssl]
server = 134-version-negotiation-server
client = 134-version-negotiation-client

[134-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[134-version-negotiation-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-134]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[135-version-negotiation]
ssl_conf = 135-version-negotiation-ssl

[135-version-negotiation-ssl]
server = 135-version-negotiation-server
client = 135-version-negotiation-client

[135-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[135-version-negotiation-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-135]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[136-version-negotiation]
ssl_conf = 136-version-negotiation-ssl

[136-version-negotiation-ssl]
server = 136-version-negotiation-server
client = 136-version-negotiation-client

[136-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[136-version-negotiation-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-136]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Server


# ===========================================================

[137-version-negotiation]
ssl_conf = 137-version-negotiation-ssl

[137-version-negotiation-ssl]
server = 137-version-negotiation-server
client = 137-version-negotiation-client

[137-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[137-version-negotiation-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-137]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[138-version-negotiation]
ssl_conf = 138-version-negotiation-ssl

[138-version-negotiation-ssl]
server = 138-version-negotiation-server
client = 138-version-negotiation-client

[138-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[138-version-negotiation-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-138]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[139-version-negotiation]
ssl_conf = 139-version-negotiation-ssl

[139-version-negotiation-ssl]
server = 139-version-negotiation-server
client = 139-version-negotiation-client

[139-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = SSLv3
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[139-version-negotiation-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-139]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[140-version-negotiation]
ssl_conf = 140-version-negotiation-ssl

[140-version-negotiation-ssl]
server = 140-version-negotiation-server
client = 140-version-negotiation-client

[140-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[140-version-negotiation-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-140]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[141-version-negotiation]
ssl_conf = 141-version-negotiation-ssl

[141-version-negotiation-ssl]
server = 141-version-negotiation-server
client = 141-version-negotiation-client

[141-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[141-version-negotiation-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-141]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[142-version-negotiation]
ssl_conf = 142-version-negotiation-ssl

[142-version-negotiation-ssl]
server = 142-version-negotiation-server
client = 142-version-negotiation-client

[142-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[142-version-negotiation-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-142]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Server


# ===========================================================

[143-version-negotiation]
ssl_conf = 143-version-negotiation-ssl

[143-version-negotiation-ssl]
server = 143-version-negotiation-server
client = 143-version-negotiation-client

[143-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[143-version-negotiation-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-143]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[144-version-negotiation]
ssl_conf = 144-version-negotiation-ssl

[144-version-negotiation-ssl]
server = 144-version-negotiation-server
client = 144-version-negotiation-client

[144-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[144-version-negotiation-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-144]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[145-version-negotiation]
ssl_conf = 145-version-negotiation-ssl

[145-version-negotiation-ssl]
server = 145-version-negotiation-server
client = 145-version-negotiation-client

[145-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[145-version-negotiation-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-145]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[146-version-negotiation]
ssl_conf = 146-version-negotiation-ssl

[146-version-negotiation-ssl]
server = 146-version-negotiation-server
client = 146-version-negotiation-client

[146-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[146-version-negotiation-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-146]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[147-version-negotiation]
ssl_conf = 147-version-negotiation-ssl

[147-version-negotiation-ssl]
server = 147-version-negotiation-server
client = 147-version-negotiation-client

[147-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[147-version-negotiation-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-147]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Server


# ===========================================================

[148-version-negotiation]
ssl_conf = 148-version-negotiation-ssl

[148-version-negotiation-ssl]
server = 148-version-negotiation-server
client = 148-version-negotiation-client

[148-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[148-version-negotiation-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-148]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[149-version-negotiation]
ssl_conf = 149-version-negotiation-ssl

[149-version-negotiation-ssl]
server = 149-version-negotiation-server
client = 149-version-negotiation-client

[149-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[149-version-negotiation-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-149]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[150-version-negotiation]
ssl_conf = 150-version-negotiation-ssl

[150-version-negotiation-ssl]
server = 150-version-negotiation-server
client = 150-version-negotiation-client

[150-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[150-version-negotiation-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-150]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[151-version-negotiation]
ssl_conf = 151-version-negotiation-ssl

[151-version-negotiation-ssl]
server = 151-version-negotiation-server
client = 151-version-negotiation-client

[151-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[151-version-negotiation-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-151]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Server


# ===========================================================

[152-version-negotiation]
ssl_conf = 152-version-negotiation-ssl

[152-version-negotiation-ssl]
server = 152-version-negotiation-server
client = 152-version-negotiation-client

[152-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[152-version-negotiation-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-152]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[153-version-negotiation]
ssl_conf = 153-version-negotiation-ssl

[153-version-negotiation-ssl]
server = 153-version-negotiation-server
client = 153-version-negotiation-client

[153-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[153-version-negotiation-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-153]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[154-version-negotiation]
ssl_conf = 154-version-negotiation-ssl

[154-version-negotiation-ssl]
server = 154-version-negotiation-server
client = 154-version-negotiation-client

[154-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[154-version-negotiation-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-154]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Server


# ===========================================================

[155-version-negotiation]
ssl_conf = 155-version-negotiation-ssl

[155-version-negotiation-ssl]
server = 155-version-negotiation-server
client = 155-version-negotiation-client

[155-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[155-version-negotiation-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-155]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[156-version-negotiation]
ssl_conf = 156-version-negotiation-ssl

[156-version-negotiation-ssl]
server = 156-version-negotiation-server
client = 156-version-negotiation-client

[156-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[156-version-negotiation-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-156]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[157-version-negotiation]
ssl_conf = 157-version-negotiation-ssl

[157-version-negotiation-ssl]
server = 157-version-negotiation-server
client = 157-version-negotiation-client

[157-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[157-version-negotiation-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-157]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[158-version-negotiation]
ssl_conf = 158-version-negotiation-ssl

[158-version-negotiation-ssl]
server = 158-version-negotiation-server
client = 158-version-negotiation-client

[158-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[158-version-negotiation-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-158]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[159-version-negotiation]
ssl_conf = 159-version-negotiation-ssl

[159-version-negotiation-ssl]
server = 159-version-negotiation-server
client = 159-version-negotiation-client

[159-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[159-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = SSLv3
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-159]
ExpectedResult = ClientFail
Serialize = Server


# ===========================================================

[160-version-negotiation]
ssl_conf = 160-version-negotiation-ssl

[160-version-negotiation-ssl]
server = 160-version-negotiation-server
client = 160-version-negotiation-client

[160-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[160-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = SSLv3
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-160]
ExpectedResult = ClientFail
Serialize = Server


# ===========================================================

[161-version-negotiation]
ssl_conf = 161-version-negotiation-ssl

[161-version-negotiation-ssl]
server = 161-version-negotiation-server
client = 161-version-negotiation-client

[161-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[161-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = SSLv3
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-161]
ExpectedResult = ClientFail
Serialize = Server


# ===========================================================

[162-version-negotiation]
ssl_conf = 162-version-negotiation-ssl

[162-version-negotiation-ssl]
server = 162-version-negotiation-server
client = 162-version-negotiation-client

[162-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[162-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = SSLv3
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-162]
ExpectedResult = ClientFail
Serialize = Server


# ===========================================================

[163-version-negotiation]
ssl_conf = 163-version-negotiation-ssl

[163-version-negotiation-ssl]
server = 163-version-negotiation-server
client = 163-version-negotiation-client

[163-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[163-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = SSLv3
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-163]
ExpectedResult = ClientFail
Serialize = Server


# ===========================================================

[164-version-negotiation]
ssl_conf = 164-version-negotiation-ssl

[164-version-negotiation-ssl]
server = 164-version-negotiation-server
client = 164-version-negotiation-client

[164-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[164-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = SSLv3
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-164]
ExpectedResult = ClientFail
Serialize = Server


# ===========================================================

[165-version-negotiation]
ssl_conf = 165-version-negotiation-ssl

[165-version-negotiation-ssl]
server = 165-version-negotiation-server
client = 165-version-negotiation-client

[165-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = SSLv3
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[165-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = SSLv3
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-165]
ExpectedResult = ClientFail
Serialize = Server


# ===========================================================

[166-version-negotiation]
ssl_conf = 166-version-negotiation-ssl

[166-version-negotiation-ssl]
server = 166-version-negotiation-server
client = 166-version-negotiation-client

[166-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[166-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = SSLv3
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-166]
ExpectedResult = ClientFail
Serialize = Server


# ===========================================================

[167-version-negotiation]
ssl_conf = 167-version-negotiation-ssl

[167-version-negotiation-ssl]
server = 167-version-negotiation-server
client = 167-version-negotiation-client

[167-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[167-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = SSLv3
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-167]
ExpectedResult = ClientFail
Serialize = Server


# ===========================================================

[168-version-negotiation]
ssl_conf = 168-version-negotiation-ssl

[168-version-negotiation-ssl]
server = 168-version-negotiation-server
client = 168-version-negotiation-client

[168-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[168-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = SSLv3
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-168]
ExpectedResult = ClientFail
Serialize = Server


# ===========================================================

[169-version-negotiation]
ssl_conf = 169-version-negotiation-ssl

[169-version-negotiation-ssl]
server = 169-version-negotiation-server
client = 169-version-negotiation-client

[169-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[169-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = SSLv3
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-169]
ExpectedResult = ClientFail
Serialize = Server


# ===========================================================

[170-version-negotiation]
ssl_conf = 170-version-negotiation-ssl

[170-version-negotiation-ssl]
server = 170-version-negotiation-server
client = 170-version-negotiation-client

[170-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[170-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = SSLv3
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-170]
ExpectedResult = ClientFail
Serialize = Server


# ===========================================================

[171-version-negotiation]
ssl_conf = 171-version-negotiation-ssl

[171-version-negotiation-ssl]
server = 171-version-negotiation-server
client = 171-version-negotiation-client

[171-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[171-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = SSLv3
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-171]
ExpectedResult = ClientFail
Serialize = Server


# ===========================================================

[172-version-negotiation]
ssl_conf = 172-version-negotiation-ssl

[172-version-negotiation-ssl]
server = 172-version-negotiation-server
client = 172-version-negotiation-client

[172-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[172-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = SSLv3
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-172]
ExpectedResult = ClientFail
Serialize = Server


# ===========================================================

[173-version-negotiation]
ssl_conf = 173-version-negotiation-ssl

[173-version-negotiation-ssl]
server = 173-version-negotiation-server
client = 173-version-negotiation-client

[173-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[173-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = SSLv3
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-173]
ExpectedResult = ClientFail
Serialize = Server


# ===========================================================

[174-version-negotiation]
ssl_conf = 174-version-negotiation-ssl

[174-version-negotiation-ssl]
server = 174-version-negotiation-server
client = 174-version-negotiation-client

[174-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[174-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = SSLv3
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-174]
ExpectedResult = ClientFail
Serialize = Server


# ===========================================================

[175-version-negotiation]
ssl_conf = 175-version-negotiation-ssl

[175-version-negotiation-ssl]
server = 175-version-negotiation-server
client = 175-version-negotiation-client

[175-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[175-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = SSLv3
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-175]
ExpectedResult = ClientFail
Serialize = Server


# ===========================================================

[176-version-negotiation]
ssl_conf = 176-version-negotiation-ssl

[176-version-negotiation-ssl]
server = 176-version-negotiation-server
client = 176-version-negotiation-client

[176-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[176-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = SSLv3
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-176]
ExpectedResult = ClientFail
Serialize = Server


# ===========================================================

[177-version-negotiation]
ssl_conf = 177-version-negotiation-ssl

[177-version-negotiation-ssl]
server = 177-version-negotiation-server
client = 177-version-negotiation-client

[177-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[177-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = SSLv3
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-177]
ExpectedResult = ClientFail
Serialize = Server


# ===========================================================

[178-version-negotiation]
ssl_conf = 178-version-negotiation-ssl

[178-version-negotiation-ssl]
server = 178-version-negotiation-server
client = 178-version-negotiation-client

[178-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[178-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = SSLv3
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-178]
ExpectedResult = ClientFail
Serialize = Server


# ===========================================================

[179-version-negotiation]
ssl_conf = 179-version-negotiation-ssl

[179-version-negotiation-ssl]
server = 179-version-negotiation-server
client = 179-version-negotiation-client

[179-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[179-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = SSLv3
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-179]
ExpectedResult = ClientFail
Serialize = Server


# ===========================================================

[180-version-negotiation]
ssl_conf = 180-version-negotiation-ssl

[180-version-negotiation-ssl]
server = 180-version-negotiation-server
client = 180-version-negotiation-client

[180-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[180-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = SSLv3
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-180]
ExpectedResult = ClientFail
Serialize = Server


# ===========================================================

[181-version-negotiation]
ssl_conf = 181-version-negotiation-ssl

[181-version-negotiation-ssl]
server = 181-version-negotiation-server
client = 181-version-negotiation-client

[181-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[181-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = SSLv3
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-181]
ExpectedResult = ClientFail
Serialize = Server


# ===========================================================

[182-version-negotiation]
ssl_conf = 182-version-negotiation-ssl

[182-version-negotiation-ssl]
server = 182-version-negotiation-server
client = 182-version-negotiation-client

[182-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[182-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = SSLv3
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-182]
ExpectedResult = ClientFail
Serialize = Server


# ===========================================================

[183-version-negotiation]
ssl_conf = 183-version-negotiation-ssl

[183-version-negotiation-ssl]
server = 183-version-negotiation-server
client = 183-version-negotiation-client

[183-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[183-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = SSLv3
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-183]
ExpectedResult = ClientFail
Serialize = Server


# ===========================================================

[184-version-negotiation]
ssl_conf = 184-version-negotiation-ssl

[184-version-negotiation-ssl]
server = 184-version-negotiation-server
client = 184-version-negotiation-client

[184-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[184-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = SSLv3
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-184]
ExpectedResult = ClientFail
Serialize = Server


# ===========================================================

[185-version-negotiation]
ssl_conf = 185-version-negotiation-ssl

[185-version-negotiation-ssl]
server = 185-version-negotiation-server
client = 185-version-negotiation-client

[185-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[185-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-185]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[186-version-negotiation]
ssl_conf = 186-version-negotiation-ssl

[186-version-negotiation-ssl]
server = 186-version-negotiation-server
client = 186-version-negotiation-client

[186-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[186-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-186]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[187-version-negotiation]
ssl_conf = 187-version-negotiation-ssl

[187-version-negotiation-ssl]
server = 187-version-negotiation-server
client = 187-version-negotiation-client

[187-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[187-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-187]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[188-version-negotiation]
ssl_conf = 188-version-negotiation-ssl

[188-version-negotiation-ssl]
server = 188-version-negotiation-server
client = 188-version-negotiation-client

[188-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[188-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-188]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[189-version-negotiation]
ssl_conf = 189-version-negotiation-ssl

[189-version-negotiation-ssl]
server = 189-version-negotiation-server
client = 189-version-negotiation-client

[189-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[189-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-189]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[190-version-negotiation]
ssl_conf = 190-version-negotiation-ssl

[190-version-negotiation-ssl]
server = 190-version-negotiation-server
client = 190-version-negotiation-client

[190-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[190-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-190]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[191-version-negotiation]
ssl_conf = 191-version-negotiation-ssl

[191-version-negotiation-ssl]
server = 191-version-negotiation-server
client = 191-version-negotiation-client

[191-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = SSLv3
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[191-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-191]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[192-version-negotiation]
ssl_conf = 192-version-negotiation-ssl

[192-version-negotiation-ssl]
server = 192-version-negotiation-server
client = 192-version-negotiation-client

[192-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[192-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-192]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[193-version-negotiation]
ssl_conf = 193-version-negotiation-ssl

[193-version-negotiation-ssl]
server = 193-version-negotiation-server
client = 193-version-negotiation-client

[193-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[193-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-193]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[194-version-negotiation]
ssl_conf = 194-version-negotiation-ssl

[194-version-negotiation-ssl]
server = 194-version-negotiation-server
client = 194-version-negotiation-client

[194-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[194-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-194]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[195-version-negotiation]
ssl_conf = 195-version-negotiation-ssl

[195-version-negotiation-ssl]
server = 195-version-negotiation-server
client = 195-version-negotiation-client

[195-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[195-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-195]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[196-version-negotiation]
ssl_conf = 196-version-negotiation-ssl

[196-version-negotiation-ssl]
server = 196-version-negotiation-server
client = 196-version-negotiation-client

[196-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[196-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-196]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[197-version-negotiation]
ssl_conf = 197-version-negotiation-ssl

[197-version-negotiation-ssl]
server = 197-version-negotiation-server
client = 197-version-negotiation-client

[197-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[197-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-197]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[198-version-negotiation]
ssl_conf = 198-version-negotiation-ssl

[198-version-negotiation-ssl]
server = 198-version-negotiation-server
client = 198-version-negotiation-client

[198-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[198-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-198]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[199-version-negotiation]
ssl_conf = 199-version-negotiation-ssl

[199-version-negotiation-ssl]
server = 199-version-negotiation-server
client = 199-version-negotiation-client

[199-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[199-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-199]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[200-version-negotiation]
ssl_conf = 200-version-negotiation-ssl

[200-version-negotiation-ssl]
server = 200-version-negotiation-server
client = 200-version-negotiation-client

[200-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[200-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-200]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[201-version-negotiation]
ssl_conf = 201-version-negotiation-ssl

[201-version-negotiation-ssl]
server = 201-version-negotiation-server
client = 201-version-negotiation-client

[201-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[201-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-201]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[202-version-negotiation]
ssl_conf = 202-version-negotiation-ssl

[202-version-negotiation-ssl]
server = 202-version-negotiation-server
client = 202-version-negotiation-client

[202-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[202-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-202]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[203-version-negotiation]
ssl_conf = 203-version-negotiation-ssl

[203-version-negotiation-ssl]
server = 203-version-negotiation-server
client = 203-version-negotiation-client

[203-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[203-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-203]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[204-version-negotiation]
ssl_conf = 204-version-negotiation-ssl

[204-version-negotiation-ssl]
server = 204-version-negotiation-server
client = 204-version-negotiation-client

[204-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[204-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-204]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[205-version-negotiation]
ssl_conf = 205-version-negotiation-ssl

[205-version-negotiation-ssl]
server = 205-version-negotiation-server
client = 205-version-negotiation-client

[205-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[205-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-205]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[206-version-negotiation]
ssl_conf = 206-version-negotiation-ssl

[206-version-negotiation-ssl]
server = 206-version-negotiation-server
client = 206-version-negotiation-client

[206-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[206-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-206]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[207-version-negotiation]
ssl_conf = 207-version-negotiation-ssl

[207-version-negotiation-ssl]
server = 207-version-negotiation-server
client = 207-version-negotiation-client

[207-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[207-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-207]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[208-version-negotiation]
ssl_conf = 208-version-negotiation-ssl

[208-version-negotiation-ssl]
server = 208-version-negotiation-server
client = 208-version-negotiation-client

[208-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[208-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-208]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[209-version-negotiation]
ssl_conf = 209-version-negotiation-ssl

[209-version-negotiation-ssl]
server = 209-version-negotiation-server
client = 209-version-negotiation-client

[209-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[209-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-209]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[210-version-negotiation]
ssl_conf = 210-version-negotiation-ssl

[210-version-negotiation-ssl]
server = 210-version-negotiation-server
client = 210-version-negotiation-client

[210-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[210-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-210]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[211-version-negotiation]
ssl_conf = 211-version-negotiation-ssl

[211-version-negotiation-ssl]
server = 211-version-negotiation-server
client = 211-version-negotiation-client

[211-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[211-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-211]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[212-version-negotiation]
ssl_conf = 212-version-negotiation-ssl

[212-version-negotiation-ssl]
server = 212-version-negotiation-server
client = 212-version-negotiation-client

[212-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[212-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-212]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[213-version-negotiation]
ssl_conf = 213-version-negotiation-ssl

[213-version-negotiation-ssl]
server = 213-version-negotiation-server
client = 213-version-negotiation-client

[213-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[213-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-213]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[214-version-negotiation]
ssl_conf = 214-version-negotiation-ssl

[214-version-negotiation-ssl]
server = 214-version-negotiation-server
client = 214-version-negotiation-client

[214-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[214-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-214]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[215-version-negotiation]
ssl_conf = 215-version-negotiation-ssl

[215-version-negotiation-ssl]
server = 215-version-negotiation-server
client = 215-version-negotiation-client

[215-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[215-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-215]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[216-version-negotiation]
ssl_conf = 216-version-negotiation-ssl

[216-version-negotiation-ssl]
server = 216-version-negotiation-server
client = 216-version-negotiation-client

[216-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[216-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-216]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[217-version-negotiation]
ssl_conf = 217-version-negotiation-ssl

[217-version-negotiation-ssl]
server = 217-version-negotiation-server
client = 217-version-negotiation-client

[217-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = SSLv3
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[217-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-217]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[218-version-negotiation]
ssl_conf = 218-version-negotiation-ssl

[218-version-negotiation-ssl]
server = 218-version-negotiation-server
client = 218-version-negotiation-client

[218-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[218-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-218]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[219-version-negotiation]
ssl_conf = 219-version-negotiation-ssl

[219-version-negotiation-ssl]
server = 219-version-negotiation-server
client = 219-version-negotiation-client

[219-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[219-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-219]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[220-version-negotiation]
ssl_conf = 220-version-negotiation-ssl

[220-version-negotiation-ssl]
server = 220-version-negotiation-server
client = 220-version-negotiation-client

[220-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[220-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-220]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[221-version-negotiation]
ssl_conf = 221-version-negotiation-ssl

[221-version-negotiation-ssl]
server = 221-version-negotiation-server
client = 221-version-negotiation-client

[221-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[221-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-221]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[222-version-negotiation]
ssl_conf = 222-version-negotiation-ssl

[222-version-negotiation-ssl]
server = 222-version-negotiation-server
client = 222-version-negotiation-client

[222-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[222-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-222]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[223-version-negotiation]
ssl_conf = 223-version-negotiation-ssl

[223-version-negotiation-ssl]
server = 223-version-negotiation-server
client = 223-version-negotiation-client

[223-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[223-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-223]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[224-version-negotiation]
ssl_conf = 224-version-negotiation-ssl

[224-version-negotiation-ssl]
server = 224-version-negotiation-server
client = 224-version-negotiation-client

[224-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[224-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-224]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[225-version-negotiation]
ssl_conf = 225-version-negotiation-ssl

[225-version-negotiation-ssl]
server = 225-version-negotiation-server
client = 225-version-negotiation-client

[225-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[225-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-225]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[226-version-negotiation]
ssl_conf = 226-version-negotiation-ssl

[226-version-negotiation-ssl]
server = 226-version-negotiation-server
client = 226-version-negotiation-client

[226-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[226-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-226]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[227-version-negotiation]
ssl_conf = 227-version-negotiation-ssl

[227-version-negotiation-ssl]
server = 227-version-negotiation-server
client = 227-version-negotiation-client

[227-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[227-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-227]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[228-version-negotiation]
ssl_conf = 228-version-negotiation-ssl

[228-version-negotiation-ssl]
server = 228-version-negotiation-server
client = 228-version-negotiation-client

[228-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[228-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-228]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[229-version-negotiation]
ssl_conf = 229-version-negotiation-ssl

[229-version-negotiation-ssl]
server = 229-version-negotiation-server
client = 229-version-negotiation-client

[229-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[229-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-229]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[230-version-negotiation]
ssl_conf = 230-version-negotiation-ssl

[230-version-negotiation-ssl]
server = 230-version-negotiation-server
client = 230-version-negotiation-client

[230-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[230-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-230]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[231-version-negotiation]
ssl_conf = 231-version-negotiation-ssl

[231-version-negotiation-ssl]
server = 231-version-negotiation-server
client = 231-version-negotiation-client

[231-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[231-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-231]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[232-version-negotiation]
ssl_conf = 232-version-negotiation-ssl

[232-version-negotiation-ssl]
server = 232-version-negotiation-server
client = 232-version-negotiation-client

[232-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[232-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-232]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[233-version-negotiation]
ssl_conf = 233-version-negotiation-ssl

[233-version-negotiation-ssl]
server = 233-version-negotiation-server
client = 233-version-negotiation-client

[233-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[233-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-233]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[234-version-negotiation]
ssl_conf = 234-version-negotiation-ssl

[234-version-negotiation-ssl]
server = 234-version-negotiation-server
client = 234-version-negotiation-client

[234-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[234-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-234]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[235-version-negotiation]
ssl_conf = 235-version-negotiation-ssl

[235-version-negotiation-ssl]
server = 235-version-negotiation-server
client = 235-version-negotiation-client

[235-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[235-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-235]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[236-version-negotiation]
ssl_conf = 236-version-negotiation-ssl

[236-version-negotiation-ssl]
server = 236-version-negotiation-server
client = 236-version-negotiation-client

[236-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[236-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-236]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[237-version-negotiation]
ssl_conf = 237-version-negotiation-ssl

[237-version-negotiation-ssl]
server = 237-version-negotiation-server
client = 237-version-negotiation-client

[237-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[237-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-237]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[238-version-negotiation]
ssl_conf = 238-version-negotiation-ssl

[238-version-negotiation-ssl]
server = 238-version-negotiation-server
client = 238-version-negotiation-client

[238-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[238-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-238]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[239-version-negotiation]
ssl_conf = 239-version-negotiation-ssl

[239-version-negotiation-ssl]
server = 239-version-negotiation-server
client = 239-version-negotiation-client

[239-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[239-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-239]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[240-version-negotiation]
ssl_conf = 240-version-negotiation-ssl

[240-version-negotiation-ssl]
server = 240-version-negotiation-server
client = 240-version-negotiation-client

[240-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[240-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-240]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Server


# ===========================================================

[241-version-negotiation]
ssl_conf = 241-version-negotiation-ssl

[241-version-negotiation-ssl]
server = 241-version-negotiation-server
client = 241-version-negotiation-client

[241-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[241-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-241]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Server


# ===========================================================

[242-version-negotiation]
ssl_conf = 242-version-negotiation-ssl

[242-version-negotiation-ssl]
server = 242-version-negotiation-server
client = 242-version-negotiation-client

[242-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[242-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-242]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Server


# ===========================================================

[243-version-negotiation]
ssl_conf = 243-version-negotiation-ssl

[243-version-negotiation-ssl]
server = 243-version-negotiation-server
client = 243-version-negotiation-client

[243-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = SSLv3
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[243-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-243]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[244-version-negotiation]
ssl_conf = 244-version-negotiation-ssl

[244-version-negotiation-ssl]
server = 244-version-negotiation-server
client = 244-version-negotiation-client

[244-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[244-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-244]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[245-version-negotiation]
ssl_conf = 245-version-negotiation-ssl

[245-version-negotiation-ssl]
server = 245-version-negotiation-server
client = 245-version-negotiation-client

[245-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[245-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-245]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[246-version-negotiation]
ssl_conf = 246-version-negotiation-ssl

[246-version-negotiation-ssl]
server = 246-version-negotiation-server
client = 246-version-negotiation-client

[246-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[246-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-246]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Server


# ===========================================================

[247-version-negotiation]
ssl_conf = 247-version-negotiation-ssl

[247-version-negotiation-ssl]
server = 247-version-negotiation-server
client = 247-version-negotiation-client

[247-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[247-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-247]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Server


# ===========================================================

[248-version-negotiation]
ssl_conf = 248-version-negotiation-ssl

[248-version-negotiation-ssl]
server = 248-version-negotiation-server
client = 248-version-negotiation-client

[248-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[248-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-248]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Server


# ===========================================================

[249-version-negotiation]
ssl_conf = 249-version-negotiation-ssl

[249-version-negotiation-ssl]
server = 249-version-negotiation-server
client = 249-version-negotiation-client

[249-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[249-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-249]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[250-version-negotiation]
ssl_conf = 250-version-negotiation-ssl

[250-version-negotiation-ssl]
server = 250-version-negotiation-server
client = 250-version-negotiation-client

[250-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[250-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-250]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[251-version-negotiation]
ssl_conf = 251-version-negotiation-ssl

[251-version-negotiation-ssl]
server = 251-version-negotiation-server
client = 251-version-negotiation-client

[251-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[251-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-251]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Server


# ===========================================================

[252-version-negotiation]
ssl_conf = 252-version-negotiation-ssl

[252-version-negotiation-ssl]
server = 252-version-negotiation-server
client = 252-version-negotiation-client

[252-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[252-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-252]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Server


# ===========================================================

[253-version-negotiation]
ssl_conf = 253-version-negotiation-ssl

[253-version-negotiation-ssl]
server = 253-version-negotiation-server
client = 253-version-negotiation-client

[253-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[253-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-253]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Server


# ===========================================================

[254-version-negotiation]
ssl_conf = 254-version-negotiation-ssl

[254-version-negotiation-ssl]
server = 254-version-negotiation-server
client = 254-version-negotiation-client

[254-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[254-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-254]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[255-version-negotiation]
ssl_conf = 255-version-negotiation-ssl

[255-version-negotiation-ssl]
server = 255-version-negotiation-server
client = 255-version-negotiation-client

[255-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[255-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-255]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Server


# ===========================================================

[256-version-negotiation]
ssl_conf = 256-version-negotiation-ssl

[256-version-negotiation-ssl]
server = 256-version-negotiation-server
client = 256-version-negotiation-client

[256-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[256-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-256]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Server


# ===========================================================

[257-version-negotiation]
ssl_conf = 257-version-negotiation-ssl

[257-version-negotiation-ssl]
server = 257-version-negotiation-server
client = 257-version-negotiation-client

[257-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[257-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-257]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Server


# ===========================================================

[258-version-negotiation]
ssl_conf = 258-version-negotiation-ssl

[258-version-negotiation-ssl]
server = 258-version-negotiation-server
client = 258-version-negotiation-client

[258-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[258-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-258]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Server


# ===========================================================

[259-version-negotiation]
ssl_conf = 259-version-negotiation-ssl

[259-version-negotiation-ssl]
server = 259-version-negotiation-server
client = 259-version-negotiation-client

[259-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[259-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-259]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Server


# ===========================================================

[260-version-negotiation]
ssl_conf = 260-version-negotiation-ssl

[260-version-negotiation-ssl]
server = 260-version-negotiation-server
client = 260-version-negotiation-client

[260-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[260-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-260]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Server


# ===========================================================

[261-version-negotiation]
ssl_conf = 261-version-negotiation-ssl

[261-version-negotiation-ssl]
server = 261-version-negotiation-server
client = 261-version-negotiation-client

[261-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[261-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-261]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[262-version-negotiation]
ssl_conf = 262-version-negotiation-ssl

[262-version-negotiation-ssl]
server = 262-version-negotiation-server
client = 262-version-negotiation-client

[262-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[262-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-262]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[263-version-negotiation]
ssl_conf = 263-version-negotiation-ssl

[263-version-negotiation-ssl]
server = 263-version-negotiation-server
client = 263-version-negotiation-client

[263-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[263-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-263]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[264-version-negotiation]
ssl_conf = 264-version-negotiation-ssl

[264-version-negotiation-ssl]
server = 264-version-negotiation-server
client = 264-version-negotiation-client

[264-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[264-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-264]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[265-version-negotiation]
ssl_conf = 265-version-negotiation-ssl

[265-version-negotiation-ssl]
server = 265-version-negotiation-server
client = 265-version-negotiation-client

[265-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[265-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-265]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[266-version-negotiation]
ssl_conf = 266-version-negotiation-ssl

[266-version-negotiation-ssl]
server = 266-version-negotiation-server
client = 266-version-negotiation-client

[266-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[266-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-266]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Server


# ===========================================================

[267-version-negotiation]
ssl_conf = 267-version-negotiation-ssl

[267-version-negotiation-ssl]
server = 267-version-negotiation-server
client = 267-version-negotiation-client

[267-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[267-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-267]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[268-version-negotiation]
ssl_conf = 268-version-negotiation-ssl

[268-version-negotiation-ssl]
server = 268-version-negotiation-server
client = 268-version-negotiation-client

[268-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[268-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-268]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[269-version-negotiation]
ssl_conf = 269-version-negotiation-ssl

[269-version-negotiation-ssl]
server = 269-version-negotiation-server
client = 269-version-negotiation-client

[269-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = SSLv3
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[269-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-269]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[270-version-negotiation]
ssl_conf = 270-version-negotiation-ssl

[270-version-negotiation-ssl]
server = 270-version-negotiation-server
client = 270-version-negotiation-client

[270-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[270-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-270]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[271-version-negotiation]
ssl_conf = 271-version-negotiation-ssl

[271-version-negotiation-ssl]
server = 271-version-negotiation-server
client = 271-version-negotiation-client

[271-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[271-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-271]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[272-version-negotiation]
ssl_conf = 272-version-negotiation-ssl

[272-version-negotiation-ssl]
server = 272-version-negotiation-server
client = 272-version-negotiation-client

[272-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[272-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-272]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Server


# ===========================================================

[273-version-negotiation]
ssl_conf = 273-version-negotiation-ssl

[273-version-negotiation-ssl]
server = 273-version-negotiation-server
client = 273-version-negotiation-client

[273-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[273-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-273]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[274-version-negotiation]
ssl_conf = 274-version-negotiation-ssl

[274-version-negotiation-ssl]
server = 274-version-negotiation-server
client = 274-version-negotiation-client

[274-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[274-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-274]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[275-version-negotiation]
ssl_conf = 275-version-negotiation-ssl

[275-version-negotiation-ssl]
server = 275-version-negotiation-server
client = 275-version-negotiation-client

[275-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[275-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-275]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[276-version-negotiation]
ssl_conf = 276-version-negotiation-ssl

[276-version-negotiation-ssl]
server = 276-version-negotiation-server
client = 276-version-negotiation-client

[276-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[276-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-276]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[277-version-negotiation]
ssl_conf = 277-version-negotiation-ssl

[277-version-negotiation-ssl]
server = 277-version-negotiation-server
client = 277-version-negotiation-client

[277-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[277-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-277]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Server


# ===========================================================

[278-version-negotiation]
ssl_conf = 278-version-negotiation-ssl

[278-version-negotiation-ssl]
server = 278-version-negotiation-server
client = 278-version-negotiation-client

[278-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[278-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-278]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[279-version-negotiation]
ssl_conf = 279-version-negotiation-ssl

[279-version-negotiation-ssl]
server = 279-version-negotiation-server
client = 279-version-negotiation-client

[279-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[279-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-279]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[280-version-negotiation]
ssl_conf = 280-version-negotiation-ssl

[280-version-negotiation-ssl]
server = 280-version-negotiation-server
client = 280-version-negotiation-client

[280-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[280-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-280]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[281-version-negotiation]
ssl_conf = 281-version-negotiation-ssl

[281-version-negotiation-ssl]
server = 281-version-negotiation-server
client = 281-version-negotiation-client

[281-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[281-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-281]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Server


# ===========================================================

[282-version-negotiation]
ssl_conf = 282-version-negotiation-ssl

[282-version-negotiation-ssl]
server = 282-version-negotiation-server
client = 282-version-negotiation-client

[282-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[282-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-282]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[283-version-negotiation]
ssl_conf = 283-version-negotiation-ssl

[283-version-negotiation-ssl]
server = 283-version-negotiation-server
client = 283-version-negotiation-client

[283-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[283-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-283]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[284-version-negotiation]
ssl_conf = 284-version-negotiation-ssl

[284-version-negotiation-ssl]
server = 284-version-negotiation-server
client = 284-version-negotiation-client

[284-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[284-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-284]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Server


# ===========================================================

[285-version-negotiation]
ssl_conf = 285-version-negotiation-ssl

[285-version-negotiation-ssl]
server = 285-version-negotiation-server
client = 285-version-negotiation-client

[285-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[285-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-285]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[286-version-negotiation]
ssl_conf = 286-version-negotiation-ssl

[286-version-negotiation-ssl]
server = 286-version-negotiation-server
client = 286-version-negotiation-client

[286-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[286-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-286]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[287-version-negotiation]
ssl_conf = 287-version-negotiation-ssl

[287-version-negotiation-ssl]
server = 287-version-negotiation-server
client = 287-version-negotiation-client

[287-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[287-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-287]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[288-version-negotiation]
ssl_conf = 288-version-negotiation-ssl

[288-version-negotiation-ssl]
server = 288-version-negotiation-server
client = 288-version-negotiation-client

[288-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[288-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-288]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[289-version-negotiation]
ssl_conf = 289-version-negotiation-ssl

[289-version-negotiation-ssl]
server = 289-version-negotiation-server
client = 289-version-negotiation-client

[289-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[289-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-289]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[290-version-negotiation]
ssl_conf = 290-version-negotiation-ssl

[290-version-negotiation-ssl]
server = 290-version-negotiation-server
client = 290-version-negotiation-client

[290-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[290-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-290]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[291-version-negotiation]
ssl_conf = 291-version-negotiation-ssl

[291-version-negotiation-ssl]
server = 291-version-negotiation-server
client = 291-version-negotiation-client

[291-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[291-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-291]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[292-version-negotiation]
ssl_conf = 292-version-negotiation-ssl

[292-version-negotiation-ssl]
server = 292-version-negotiation-server
client = 292-version-negotiation-client

[292-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[292-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-292]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Server


# ===========================================================

[293-version-negotiation]
ssl_conf = 293-version-negotiation-ssl

[293-version-negotiation-ssl]
server = 293-version-negotiation-server
client = 293-version-negotiation-client

[293-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[293-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-293]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[294-version-negotiation]
ssl_conf = 294-version-negotiation-ssl

[294-version-negotiation-ssl]
server = 294-version-negotiation-server
client = 294-version-negotiation-client

[294-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[294-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-294]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[295-version-negotiation]
ssl_conf = 295-version-negotiation-ssl

[295-version-negotiation-ssl]
server = 295-version-negotiation-server
client = 295-version-negotiation-client

[295-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = SSLv3
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[295-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-295]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[296-version-negotiation]
ssl_conf = 296-version-negotiation-ssl

[296-version-negotiation-ssl]
server = 296-version-negotiation-server
client = 296-version-negotiation-client

[296-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[296-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-296]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[297-version-negotiation]
ssl_conf = 297-version-negotiation-ssl

[297-version-negotiation-ssl]
server = 297-version-negotiation-server
client = 297-version-negotiation-client

[297-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[297-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-297]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[298-version-negotiation]
ssl_conf = 298-version-negotiation-ssl

[298-version-negotiation-ssl]
server = 298-version-negotiation-server
client = 298-version-negotiation-client

[298-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[298-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-298]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Server


# ===========================================================

[299-version-negotiation]
ssl_conf = 299-version-negotiation-ssl

[299-version-negotiation-ssl]
server = 299-version-negotiation-server
client = 299-version-negotiation-client

[299-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[299-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-299]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[300-version-negotiation]
ssl_conf = 300-version-negotiation-ssl

[300-version-negotiation-ssl]
server = 300-version-negotiation-server
client = 300-version-negotiation-client

[300-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[300-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-300]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[301-version-negotiation]
ssl_conf = 301-version-negotiation-ssl

[301-version-negotiation-ssl]
server = 301-version-negotiation-server
client = 301-version-negotiation-client

[301-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[301-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-301]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[302-version-negotiation]
ssl_conf = 302-version-negotiation-ssl

[302-version-negotiation-ssl]
server = 302-version-negotiation-server
client = 302-version-negotiation-client

[302-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[302-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-302]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[303-version-negotiation]
ssl_conf = 303-version-negotiation-ssl

[303-version-negotiation-ssl]
server = 303-version-negotiation-server
client = 303-version-negotiation-client

[303-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[303-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-303]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Server


# ===========================================================

[304-version-negotiation]
ssl_conf = 304-version-negotiation-ssl

[304-version-negotiation-ssl]
server = 304-version-negotiation-server
client = 304-version-negotiation-client

[304-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[304-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-304]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[305-version-negotiation]
ssl_conf = 305-version-negotiation-ssl

[305-version-negotiation-ssl]
server = 305-version-negotiation-server
client = 305-version-negotiation-client

[305-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[305-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-305]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[306-version-negotiation]
ssl_conf = 306-version-negotiation-ssl

[306-version-negotiation-ssl]
server = 306-version-negotiation-server
client = 306-version-negotiation-client

[306-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[306-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-306]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[307-version-negotiation]
ssl_conf = 307-version-negotiation-ssl

[307-version-negotiation-ssl]
server = 307-version-negotiation-server
client = 307-version-negotiation-client

[307-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[307-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-307]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Server


# ===========================================================

[308-version-negotiation]
ssl_conf = 308-version-negotiation-ssl

[308-version-negotiation-ssl]
server = 308-version-negotiation-server
client = 308-version-negotiation-client

[308-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[308-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-308]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[309-version-negotiation]
ssl_conf = 309-version-negotiation-ssl

[309-version-negotiation-ssl]
server = 309-version-negotiation-server
client = 309-version-negotiation-client

[309-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[309-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-309]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[310-version-negotiation]
ssl_conf = 310-version-negotiation-ssl

[310-version-negotiation-ssl]
server = 310-version-negotiation-server
client = 310-version-negotiation-client

[310-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[310-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-310]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Server


# ===========================================================

[311-version-negotiation]
ssl_conf = 311-version-negotiation-ssl

[311-version-negotiation-ssl]
server = 311-version-negotiation-server
client = 311-version-negotiation-client

[311-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[311-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-311]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[312-version-negotiation]
ssl_conf = 312-version-negotiation-ssl

[312-version-negotiation-ssl]
server = 312-version-negotiation-server
client = 312-version-negotiation-client

[312-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[312-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-312]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[313-version-negotiation]
ssl_conf = 313-version-negotiation-ssl

[313-version-negotiation-ssl]
server = 313-version-negotiation-server
client = 313-version-negotiation-client

[313-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[313-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-313]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[314-version-negotiation]
ssl_conf = 314-version-negotiation-ssl

[314-version-negotiation-ssl]
server = 314-version-negotiation-server
client = 314-version-negotiation-client

[314-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[314-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-314]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[315-version-negotiation]
ssl_conf = 315-version-negotiation-ssl

[315-version-negotiation-ssl]
server = 315-version-negotiation-server
client = 315-version-negotiation-client

[315-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[315-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-315]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[316-version-negotiation]
ssl_conf = 316-version-negotiation-ssl

[316-version-negotiation-ssl]
server = 316-version-negotiation-server
client = 316-version-negotiation-client

[316-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[316-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-316]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[317-version-negotiation]
ssl_conf = 317-version-negotiation-ssl

[317-version-negotiation-ssl]
server = 317-version-negotiation-server
client = 317-version-negotiation-client

[317-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[317-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-317]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[318-version-negotiation]
ssl_conf = 318-version-negotiation-ssl

[318-version-negotiation-ssl]
server = 318-version-negotiation-server
client = 318-version-negotiation-client

[318-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[318-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-318]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[319-version-negotiation]
ssl_conf = 319-version-negotiation-ssl

[319-version-negotiation-ssl]
server = 319-version-negotiation-server
client = 319-version-negotiation-client

[319-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[319-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-319]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[320-version-negotiation]
ssl_conf = 320-version-negotiation-ssl

[320-version-negotiation-ssl]
server = 320-version-negotiation-server
client = 320-version-negotiation-client

[320-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[320-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-320]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[321-version-negotiation]
ssl_conf = 321-version-negotiation-ssl

[321-version-negotiation-ssl]
server = 321-version-negotiation-server
client = 321-version-negotiation-client

[321-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = SSLv3
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[321-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-321]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[322-version-negotiation]
ssl_conf = 322-version-negotiation-ssl

[322-version-negotiation-ssl]
server = 322-version-negotiation-server
client = 322-version-negotiation-client

[322-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[322-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-322]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[323-version-negotiation]
ssl_conf = 323-version-negotiation-ssl

[323-version-negotiation-ssl]
server = 323-version-negotiation-server
client = 323-version-negotiation-client

[323-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[323-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-323]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[324-version-negotiation]
ssl_conf = 324-version-negotiation-ssl

[324-version-negotiation-ssl]
server = 324-version-negotiation-server
client = 324-version-negotiation-client

[324-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[324-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-324]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[325-version-negotiation]
ssl_conf = 325-version-negotiation-ssl

[325-version-negotiation-ssl]
server = 325-version-negotiation-server
client = 325-version-negotiation-client

[325-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[325-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-325]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[326-version-negotiation]
ssl_conf = 326-version-negotiation-ssl

[326-version-negotiation-ssl]
server = 326-version-negotiation-server
client = 326-version-negotiation-client

[326-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[326-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-326]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[327-version-negotiation]
ssl_conf = 327-version-negotiation-ssl

[327-version-negotiation-ssl]
server = 327-version-negotiation-server
client = 327-version-negotiation-client

[327-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[327-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-327]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[328-version-negotiation]
ssl_conf = 328-version-negotiation-ssl

[328-version-negotiation-ssl]
server = 328-version-negotiation-server
client = 328-version-negotiation-client

[328-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[328-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-328]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[329-version-negotiation]
ssl_conf = 329-version-negotiation-ssl

[329-version-negotiation-ssl]
server = 329-version-negotiation-server
client = 329-version-negotiation-client

[329-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[329-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-329]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[330-version-negotiation]
ssl_conf = 330-version-negotiation-ssl

[330-version-negotiation-ssl]
server = 330-version-negotiation-server
client = 330-version-negotiation-client

[330-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[330-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-330]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[331-version-negotiation]
ssl_conf = 331-version-negotiation-ssl

[331-version-negotiation-ssl]
server = 331-version-negotiation-server
client = 331-version-negotiation-client

[331-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[331-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-331]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[332-version-negotiation]
ssl_conf = 332-version-negotiation-ssl

[332-version-negotiation-ssl]
server = 332-version-negotiation-server
client = 332-version-negotiation-client

[332-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[332-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-332]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[333-version-negotiation]
ssl_conf = 333-version-negotiation-ssl

[333-version-negotiation-ssl]
server = 333-version-negotiation-server
client = 333-version-negotiation-client

[333-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[333-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-333]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[334-version-negotiation]
ssl_conf = 334-version-negotiation-ssl

[334-version-negotiation-ssl]
server = 334-version-negotiation-server
client = 334-version-negotiation-client

[334-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[334-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-334]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[335-version-negotiation]
ssl_conf = 335-version-negotiation-ssl

[335-version-negotiation-ssl]
server = 335-version-negotiation-server
client = 335-version-negotiation-client

[335-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[335-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-335]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[336-version-negotiation]
ssl_conf = 336-version-negotiation-ssl

[336-version-negotiation-ssl]
server = 336-version-negotiation-server
client = 336-version-negotiation-client

[336-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[336-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-336]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[337-version-negotiation]
ssl_conf = 337-version-negotiation-ssl

[337-version-negotiation-ssl]
server = 337-version-negotiation-server
client = 337-version-negotiation-client

[337-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[337-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-337]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[338-version-negotiation]
ssl_conf = 338-version-negotiation-ssl

[338-version-negotiation-ssl]
server = 338-version-negotiation-server
client = 338-version-negotiation-client

[338-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[338-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-338]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[339-version-negotiation]
ssl_conf = 339-version-negotiation-ssl

[339-version-negotiation-ssl]
server = 339-version-negotiation-server
client = 339-version-negotiation-client

[339-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[339-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-339]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[340-version-negotiation]
ssl_conf = 340-version-negotiation-ssl

[340-version-negotiation-ssl]
server = 340-version-negotiation-server
client = 340-version-negotiation-client

[340-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[340-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-340]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[341-version-negotiation]
ssl_conf = 341-version-negotiation-ssl

[341-version-negotiation-ssl]
server = 341-version-negotiation-server
client = 341-version-negotiation-client

[341-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[341-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-341]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[342-version-negotiation]
ssl_conf = 342-version-negotiation-ssl

[342-version-negotiation-ssl]
server = 342-version-negotiation-server
client = 342-version-negotiation-client

[342-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[342-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-342]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[343-version-negotiation]
ssl_conf = 343-version-negotiation-ssl

[343-version-negotiation-ssl]
server = 343-version-negotiation-server
client = 343-version-negotiation-client

[343-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[343-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-343]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[344-version-negotiation]
ssl_conf = 344-version-negotiation-ssl

[344-version-negotiation-ssl]
server = 344-version-negotiation-server
client = 344-version-negotiation-client

[344-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[344-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-344]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[345-version-negotiation]
ssl_conf = 345-version-negotiation-ssl

[345-version-negotiation-ssl]
server = 345-version-negotiation-server
client = 345-version-negotiation-client

[345-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[345-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-345]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[346-version-negotiation]
ssl_conf = 346-version-negotiation-ssl

[346-version-negotiation-ssl]
server = 346-version-negotiation-server
client = 346-version-negotiation-client

[346-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[346-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-346]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[347-version-negotiation]
ssl_conf = 347-version-negotiation-ssl

[347-version-negotiation-ssl]
server = 347-version-negotiation-server
client = 347-version-negotiation-client

[347-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = SSLv3
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[347-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-347]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[348-version-negotiation]
ssl_conf = 348-version-negotiation-ssl

[348-version-negotiation-ssl]
server = 348-version-negotiation-server
client = 348-version-negotiation-client

[348-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[348-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-348]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[349-version-negotiation]
ssl_conf = 349-version-negotiation-ssl

[349-version-negotiation-ssl]
server = 349-version-negotiation-server
client = 349-version-negotiation-client

[349-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[349-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-349]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[350-version-negotiation]
ssl_conf = 350-version-negotiation-ssl

[350-version-negotiation-ssl]
server = 350-version-negotiation-server
client = 350-version-negotiation-client

[350-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[350-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-350]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[351-version-negotiation]
ssl_conf = 351-version-negotiation-ssl

[351-version-negotiation-ssl]
server = 351-version-negotiation-server
client = 351-version-negotiation-client

[351-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[351-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-351]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[352-version-negotiation]
ssl_conf = 352-version-negotiation-ssl

[352-version-negotiation-ssl]
server = 352-version-negotiation-server
client = 352-version-negotiation-client

[352-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[352-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-352]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[353-version-negotiation]
ssl_conf = 353-version-negotiation-ssl

[353-version-negotiation-ssl]
server = 353-version-negotiation-server
client = 353-version-negotiation-client

[353-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[353-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-353]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[354-version-negotiation]
ssl_conf = 354-version-negotiation-ssl

[354-version-negotiation-ssl]
server = 354-version-negotiation-server
client = 354-version-negotiation-client

[354-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[354-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-354]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[355-version-negotiation]
ssl_conf = 355-version-negotiation-ssl

[355-version-negotiation-ssl]
server = 355-version-negotiation-server
client = 355-version-negotiation-client

[355-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[355-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-355]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[356-version-negotiation]
ssl_conf = 356-version-negotiation-ssl

[356-version-negotiation-ssl]
server = 356-version-negotiation-server
client = 356-version-negotiation-client

[356-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[356-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-356]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[357-version-negotiation]
ssl_conf = 357-version-negotiation-ssl

[357-version-negotiation-ssl]
server = 357-version-negotiation-server
client = 357-version-negotiation-client

[357-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[357-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-357]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[358-version-negotiation]
ssl_conf = 358-version-negotiation-ssl

[358-version-negotiation-ssl]
server = 358-version-negotiation-server
client = 358-version-negotiation-client

[358-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[358-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-358]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[359-version-negotiation]
ssl_conf = 359-version-negotiation-ssl

[359-version-negotiation-ssl]
server = 359-version-negotiation-server
client = 359-version-negotiation-client

[359-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[359-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-359]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[360-version-negotiation]
ssl_conf = 360-version-negotiation-ssl

[360-version-negotiation-ssl]
server = 360-version-negotiation-server
client = 360-version-negotiation-client

[360-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[360-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-360]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[361-version-negotiation]
ssl_conf = 361-version-negotiation-ssl

[361-version-negotiation-ssl]
server = 361-version-negotiation-server
client = 361-version-negotiation-client

[361-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[361-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-361]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[362-version-negotiation]
ssl_conf = 362-version-negotiation-ssl

[362-version-negotiation-ssl]
server = 362-version-negotiation-server
client = 362-version-negotiation-client

[362-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[362-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-362]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[363-version-negotiation]
ssl_conf = 363-version-negotiation-ssl

[363-version-negotiation-ssl]
server = 363-version-negotiation-server
client = 363-version-negotiation-client

[363-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[363-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-363]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[364-version-negotiation]
ssl_conf = 364-version-negotiation-ssl

[364-version-negotiation-ssl]
server = 364-version-negotiation-server
client = 364-version-negotiation-client

[364-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[364-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-364]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[365-version-negotiation]
ssl_conf = 365-version-negotiation-ssl

[365-version-negotiation-ssl]
server = 365-version-negotiation-server
client = 365-version-negotiation-client

[365-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[365-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-365]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[366-version-negotiation]
ssl_conf = 366-version-negotiation-ssl

[366-version-negotiation-ssl]
server = 366-version-negotiation-server
client = 366-version-negotiation-client

[366-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[366-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-366]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[367-version-negotiation]
ssl_conf = 367-version-negotiation-ssl

[367-version-negotiation-ssl]
server = 367-version-negotiation-server
client = 367-version-negotiation-client

[367-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[367-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-367]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[368-version-negotiation]
ssl_conf = 368-version-negotiation-ssl

[368-version-negotiation-ssl]
server = 368-version-negotiation-server
client = 368-version-negotiation-client

[368-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[368-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-368]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[369-version-negotiation]
ssl_conf = 369-version-negotiation-ssl

[369-version-negotiation-ssl]
server = 369-version-negotiation-server
client = 369-version-negotiation-client

[369-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[369-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-369]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[370-version-negotiation]
ssl_conf = 370-version-negotiation-ssl

[370-version-negotiation-ssl]
server = 370-version-negotiation-server
client = 370-version-negotiation-client

[370-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[370-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-370]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Server


# ===========================================================

[371-version-negotiation]
ssl_conf = 371-version-negotiation-ssl

[371-version-negotiation-ssl]
server = 371-version-negotiation-server
client = 371-version-negotiation-client

[371-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[371-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-371]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Server


# ===========================================================

[372-version-negotiation]
ssl_conf = 372-version-negotiation-ssl

[372-version-negotiation-ssl]
server = 372-version-negotiation-server
client = 372-version-negotiation-client

[372-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[372-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-372]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Server


# ===========================================================

[373-version-negotiation]
ssl_conf = 373-version-negotiation-ssl

[373-version-negotiation-ssl]
server = 373-version-negotiation-server
client = 373-version-negotiation-client

[373-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = SSLv3
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[373-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-373]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[374-version-negotiation]
ssl_conf = 374-version-negotiation-ssl

[374-version-negotiation-ssl]
server = 374-version-negotiation-server
client = 374-version-negotiation-client

[374-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[374-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-374]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[375-version-negotiation]
ssl_conf = 375-version-negotiation-ssl

[375-version-negotiation-ssl]
server = 375-version-negotiation-server
client = 375-version-negotiation-client

[375-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[375-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-375]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[376-version-negotiation]
ssl_conf = 376-version-negotiation-ssl

[376-version-negotiation-ssl]
server = 376-version-negotiation-server
client = 376-version-negotiation-client

[376-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[376-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-376]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Server


# ===========================================================

[377-version-negotiation]
ssl_conf = 377-version-negotiation-ssl

[377-version-negotiation-ssl]
server = 377-version-negotiation-server
client = 377-version-negotiation-client

[377-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[377-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-377]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Server


# ===========================================================

[378-version-negotiation]
ssl_conf = 378-version-negotiation-ssl

[378-version-negotiation-ssl]
server = 378-version-negotiation-server
client = 378-version-negotiation-client

[378-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[378-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-378]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Server


# ===========================================================

[379-version-negotiation]
ssl_conf = 379-version-negotiation-ssl

[379-version-negotiation-ssl]
server = 379-version-negotiation-server
client = 379-version-negotiation-client

[379-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[379-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-379]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[380-version-negotiation]
ssl_conf = 380-version-negotiation-ssl

[380-version-negotiation-ssl]
server = 380-version-negotiation-server
client = 380-version-negotiation-client

[380-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[380-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-380]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[381-version-negotiation]
ssl_conf = 381-version-negotiation-ssl

[381-version-negotiation-ssl]
server = 381-version-negotiation-server
client = 381-version-negotiation-client

[381-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[381-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-381]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Server


# ===========================================================

[382-version-negotiation]
ssl_conf = 382-version-negotiation-ssl

[382-version-negotiation-ssl]
server = 382-version-negotiation-server
client = 382-version-negotiation-client

[382-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[382-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-382]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Server


# ===========================================================

[383-version-negotiation]
ssl_conf = 383-version-negotiation-ssl

[383-version-negotiation-ssl]
server = 383-version-negotiation-server
client = 383-version-negotiation-client

[383-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[383-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-383]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Server


# ===========================================================

[384-version-negotiation]
ssl_conf = 384-version-negotiation-ssl

[384-version-negotiation-ssl]
server = 384-version-negotiation-server
client = 384-version-negotiation-client

[384-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[384-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-384]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[385-version-negotiation]
ssl_conf = 385-version-negotiation-ssl

[385-version-negotiation-ssl]
server = 385-version-negotiation-server
client = 385-version-negotiation-client

[385-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[385-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-385]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Server


# ===========================================================

[386-version-negotiation]
ssl_conf = 386-version-negotiation-ssl

[386-version-negotiation-ssl]
server = 386-version-negotiation-server
client = 386-version-negotiation-client

[386-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[386-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-386]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Server


# ===========================================================

[387-version-negotiation]
ssl_conf = 387-version-negotiation-ssl

[387-version-negotiation-ssl]
server = 387-version-negotiation-server
client = 387-version-negotiation-client

[387-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[387-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-387]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Server


# ===========================================================

[388-version-negotiation]
ssl_conf = 388-version-negotiation-ssl

[388-version-negotiation-ssl]
server = 388-version-negotiation-server
client = 388-version-negotiation-client

[388-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[388-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-388]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Server


# ===========================================================

[389-version-negotiation]
ssl_conf = 389-version-negotiation-ssl

[389-version-negotiation-ssl]
server = 389-version-negotiation-server
client = 389-version-negotiation-client

[389-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[389-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-389]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Server


# ===========================================================

[390-version-negotiation]
ssl_conf = 390-version-negotiation-ssl

[390-version-negotiation-ssl]
server = 390-version-negotiation-server
client = 390-version-negotiation-client

[390-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[390-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-390]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Server


# ===========================================================

[391-version-negotiation]
ssl_conf = 391-version-negotiation-ssl

[391-version-negotiation-ssl]
server = 391-version-negotiation-server
client = 391-version-negotiation-client

[391-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[391-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-391]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[392-version-negotiation]
ssl_conf = 392-version-negotiation-ssl

[392-version-negotiation-ssl]
server = 392-version-negotiation-server
client = 392-version-negotiation-client

[392-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[392-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-392]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[393-version-negotiation]
ssl_conf = 393-version-negotiation-ssl

[393-version-negotiation-ssl]
server = 393-version-negotiation-server
client = 393-version-negotiation-client

[393-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[393-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-393]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[394-version-negotiation]
ssl_conf = 394-version-negotiation-ssl

[394-version-negotiation-ssl]
server = 394-version-negotiation-server
client = 394-version-negotiation-client

[394-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[394-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-394]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[395-version-negotiation]
ssl_conf = 395-version-negotiation-ssl

[395-version-negotiation-ssl]
server = 395-version-negotiation-server
client = 395-version-negotiation-client

[395-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[395-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-395]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[396-version-negotiation]
ssl_conf = 396-version-negotiation-ssl

[396-version-negotiation-ssl]
server = 396-version-negotiation-server
client = 396-version-negotiation-client

[396-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[396-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-396]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Server


# ===========================================================

[397-version-negotiation]
ssl_conf = 397-version-negotiation-ssl

[397-version-negotiation-ssl]
server = 397-version-negotiation-server
client = 397-version-negotiation-client

[397-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[397-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-397]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[398-version-negotiation]
ssl_conf = 398-version-negotiation-ssl

[398-version-negotiation-ssl]
server = 398-version-negotiation-server
client = 398-version-negotiation-client

[398-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[398-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-398]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[399-version-negotiation]
ssl_conf = 399-version-negotiation-ssl

[399-version-negotiation-ssl]
server = 399-version-negotiation-server
client = 399-version-negotiation-client

[399-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = SSLv3
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[399-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-399]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[400-version-negotiation]
ssl_conf = 400-version-negotiation-ssl

[400-version-negotiation-ssl]
server = 400-version-negotiation-server
client = 400-version-negotiation-client

[400-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[400-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-400]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[401-version-negotiation]
ssl_conf = 401-version-negotiation-ssl

[401-version-negotiation-ssl]
server = 401-version-negotiation-server
client = 401-version-negotiation-client

[401-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[401-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-401]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[402-version-negotiation]
ssl_conf = 402-version-negotiation-ssl

[402-version-negotiation-ssl]
server = 402-version-negotiation-server
client = 402-version-negotiation-client

[402-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[402-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-402]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Server


# ===========================================================

[403-version-negotiation]
ssl_conf = 403-version-negotiation-ssl

[403-version-negotiation-ssl]
server = 403-version-negotiation-server
client = 403-version-negotiation-client

[403-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[403-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-403]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[404-version-negotiation]
ssl_conf = 404-version-negotiation-ssl

[404-version-negotiation-ssl]
server = 404-version-negotiation-server
client = 404-version-negotiation-client

[404-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[404-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-404]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[405-version-negotiation]
ssl_conf = 405-version-negotiation-ssl

[405-version-negotiation-ssl]
server = 405-version-negotiation-server
client = 405-version-negotiation-client

[405-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[405-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-405]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[406-version-negotiation]
ssl_conf = 406-version-negotiation-ssl

[406-version-negotiation-ssl]
server = 406-version-negotiation-server
client = 406-version-negotiation-client

[406-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[406-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-406]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[407-version-negotiation]
ssl_conf = 407-version-negotiation-ssl

[407-version-negotiation-ssl]
server = 407-version-negotiation-server
client = 407-version-negotiation-client

[407-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[407-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-407]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Server


# ===========================================================

[408-version-negotiation]
ssl_conf = 408-version-negotiation-ssl

[408-version-negotiation-ssl]
server = 408-version-negotiation-server
client = 408-version-negotiation-client

[408-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[408-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-408]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[409-version-negotiation]
ssl_conf = 409-version-negotiation-ssl

[409-version-negotiation-ssl]
server = 409-version-negotiation-server
client = 409-version-negotiation-client

[409-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[409-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-409]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[410-version-negotiation]
ssl_conf = 410-version-negotiation-ssl

[410-version-negotiation-ssl]
server = 410-version-negotiation-server
client = 410-version-negotiation-client

[410-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[410-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-410]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[411-version-negotiation]
ssl_conf = 411-version-negotiation-ssl

[411-version-negotiation-ssl]
server = 411-version-negotiation-server
client = 411-version-negotiation-client

[411-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[411-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-411]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Server


# ===========================================================

[412-version-negotiation]
ssl_conf = 412-version-negotiation-ssl

[412-version-negotiation-ssl]
server = 412-version-negotiation-server
client = 412-version-negotiation-client

[412-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[412-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-412]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[413-version-negotiation]
ssl_conf = 413-version-negotiation-ssl

[413-version-negotiation-ssl]
server = 413-version-negotiation-server
client = 413-version-negotiation-client

[413-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[413-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-413]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[414-version-negotiation]
ssl_conf = 414-version-negotiation-ssl

[414-version-negotiation-ssl]
server = 414-version-negotiation-server
client = 414-version-negotiation-client

[414-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[414-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-414]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Server


# ===========================================================

[415-version-negotiation]
ssl_conf = 415-version-negotiation-ssl

[415-version-negotiation-ssl]
server = 415-version-negotiation-server
client = 415-version-negotiation-client

[415-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[415-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-415]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[416-version-negotiation]
ssl_conf = 416-version-negotiation-ssl

[416-version-negotiation-ssl]
server = 416-version-negotiation-server
client = 416-version-negotiation-client

[416-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[416-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-416]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[417-version-negotiation]
ssl_conf = 417-version-negotiation-ssl

[417-version-negotiation-ssl]
server = 417-version-negotiation-server
client = 417-version-negotiation-client

[417-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[417-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-417]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[418-version-negotiation]
ssl_conf = 418-version-negotiation-ssl

[418-version-negotiation-ssl]
server = 418-version-negotiation-server
client = 418-version-negotiation-client

[418-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[418-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-418]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[419-version-negotiation]
ssl_conf = 419-version-negotiation-ssl

[419-version-negotiation-ssl]
server = 419-version-negotiation-server
client = 419-version-negotiation-client

[419-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[419-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-419]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[420-version-negotiation]
ssl_conf = 420-version-negotiation-ssl

[420-version-negotiation-ssl]
server = 420-version-negotiation-server
client = 420-version-negotiation-client

[420-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[420-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-420]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[421-version-negotiation]
ssl_conf = 421-version-negotiation-ssl

[421-version-negotiation-ssl]
server = 421-version-negotiation-server
client = 421-version-negotiation-client

[421-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[421-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-421]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[422-version-negotiation]
ssl_conf = 422-version-negotiation-ssl

[422-version-negotiation-ssl]
server = 422-version-negotiation-server
client = 422-version-negotiation-client

[422-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[422-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-422]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Server


# ===========================================================

[423-version-negotiation]
ssl_conf = 423-version-negotiation-ssl

[423-version-negotiation-ssl]
server = 423-version-negotiation-server
client = 423-version-negotiation-client

[423-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[423-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-423]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[424-version-negotiation]
ssl_conf = 424-version-negotiation-ssl

[424-version-negotiation-ssl]
server = 424-version-negotiation-server
client = 424-version-negotiation-client

[424-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[424-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-424]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[425-version-negotiation]
ssl_conf = 425-version-negotiation-ssl

[425-version-negotiation-ssl]
server = 425-version-negotiation-server
client = 425-version-negotiation-client

[425-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = SSLv3
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[425-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-425]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[426-version-negotiation]
ssl_conf = 426-version-negotiation-ssl

[426-version-negotiation-ssl]
server = 426-version-negotiation-server
client = 426-version-negotiation-client

[426-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[426-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-426]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[427-version-negotiation]
ssl_conf = 427-version-negotiation-ssl

[427-version-negotiation-ssl]
server = 427-version-negotiation-server
client = 427-version-negotiation-client

[427-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[427-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-427]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[428-version-negotiation]
ssl_conf = 428-version-negotiation-ssl

[428-version-negotiation-ssl]
server = 428-version-negotiation-server
client = 428-version-negotiation-client

[428-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[428-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-428]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Server


# ===========================================================

[429-version-negotiation]
ssl_conf = 429-version-negotiation-ssl

[429-version-negotiation-ssl]
server = 429-version-negotiation-server
client = 429-version-negotiation-client

[429-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[429-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-429]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[430-version-negotiation]
ssl_conf = 430-version-negotiation-ssl

[430-version-negotiation-ssl]
server = 430-version-negotiation-server
client = 430-version-negotiation-client

[430-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[430-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-430]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[431-version-negotiation]
ssl_conf = 431-version-negotiation-ssl

[431-version-negotiation-ssl]
server = 431-version-negotiation-server
client = 431-version-negotiation-client

[431-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[431-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-431]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[432-version-negotiation]
ssl_conf = 432-version-negotiation-ssl

[432-version-negotiation-ssl]
server = 432-version-negotiation-server
client = 432-version-negotiation-client

[432-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[432-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-432]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[433-version-negotiation]
ssl_conf = 433-version-negotiation-ssl

[433-version-negotiation-ssl]
server = 433-version-negotiation-server
client = 433-version-negotiation-client

[433-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[433-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-433]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Server


# ===========================================================

[434-version-negotiation]
ssl_conf = 434-version-negotiation-ssl

[434-version-negotiation-ssl]
server = 434-version-negotiation-server
client = 434-version-negotiation-client

[434-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[434-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-434]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[435-version-negotiation]
ssl_conf = 435-version-negotiation-ssl

[435-version-negotiation-ssl]
server = 435-version-negotiation-server
client = 435-version-negotiation-client

[435-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[435-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-435]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[436-version-negotiation]
ssl_conf = 436-version-negotiation-ssl

[436-version-negotiation-ssl]
server = 436-version-negotiation-server
client = 436-version-negotiation-client

[436-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[436-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-436]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[437-version-negotiation]
ssl_conf = 437-version-negotiation-ssl

[437-version-negotiation-ssl]
server = 437-version-negotiation-server
client = 437-version-negotiation-client

[437-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[437-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-437]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Server


# ===========================================================

[438-version-negotiation]
ssl_conf = 438-version-negotiation-ssl

[438-version-negotiation-ssl]
server = 438-version-negotiation-server
client = 438-version-negotiation-client

[438-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[438-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-438]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[439-version-negotiation]
ssl_conf = 439-version-negotiation-ssl

[439-version-negotiation-ssl]
server = 439-version-negotiation-server
client = 439-version-negotiation-client

[439-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[439-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-439]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[440-version-negotiation]
ssl_conf = 440-version-negotiation-ssl

[440-version-negotiation-ssl]
server = 440-version-negotiation-server
client = 440-version-negotiation-client

[440-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[440-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-440]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Server


# ===========================================================

[441-version-negotiation]
ssl_conf = 441-version-negotiation-ssl

[441-version-negotiation-ssl]
server = 441-version-negotiation-server
client = 441-version-negotiation-client

[441-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[441-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-441]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[442-version-negotiation]
ssl_conf = 442-version-negotiation-ssl

[442-version-negotiation-ssl]
server = 442-version-negotiation-server
client = 442-version-negotiation-client

[442-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[442-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-442]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[443-version-negotiation]
ssl_conf = 443-version-negotiation-ssl

[443-version-negotiation-ssl]
server = 443-version-negotiation-server
client = 443-version-negotiation-client

[443-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[443-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-443]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[444-version-negotiation]
ssl_conf = 444-version-negotiation-ssl

[444-version-negotiation-ssl]
server = 444-version-negotiation-server
client = 444-version-negotiation-client

[444-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[444-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-444]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[445-version-negotiation]
ssl_conf = 445-version-negotiation-ssl

[445-version-negotiation-ssl]
server = 445-version-negotiation-server
client = 445-version-negotiation-client

[445-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[445-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-445]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[446-version-negotiation]
ssl_conf = 446-version-negotiation-ssl

[446-version-negotiation-ssl]
server = 446-version-negotiation-server
client = 446-version-negotiation-client

[446-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[446-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-446]
ExpectedResult = ClientFail
Serialize = Server


# ===========================================================

[447-version-negotiation]
ssl_conf = 447-version-negotiation-ssl

[447-version-negotiation-ssl]
server = 447-version-negotiation-server
client = 447-version-negotiation-client

[447-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[447-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-447]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[448-version-negotiation]
ssl_conf = 448-version-negotiation-ssl

[448-version-negotiation-ssl]
server = 448-version-negotiation-server
client = 448-version-negotiation-client

[448-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[448-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-448]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[449-version-negotiation]
ssl_conf = 449-version-negotiation-ssl

[449-version-negotiation-ssl]
server = 449-version-negotiation-server
client = 449-version-negotiation-client

[449-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[449-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-449]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[450-version-negotiation]
ssl_conf = 450-version-negotiation-ssl

[450-version-negotiation-ssl]
server = 450-version-negotiation-server
client = 450-version-negotiation-client

[450-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[450-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-450]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[451-version-negotiation]
ssl_conf = 451-version-negotiation-ssl

[451-version-negotiation-ssl]
server = 451-version-negotiation-server
client = 451-version-negotiation-client

[451-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = SSLv3
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[451-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-451]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[452-version-negotiation]
ssl_conf = 452-version-negotiation-ssl

[452-version-negotiation-ssl]
server = 452-version-negotiation-server
client = 452-version-negotiation-client

[452-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[452-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-452]
ExpectedResult = ClientFail
Serialize = Server


# ===========================================================

[453-version-negotiation]
ssl_conf = 453-version-negotiation-ssl

[453-version-negotiation-ssl]
server = 453-version-negotiation-server
client = 453-version-negotiation-client

[453-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[453-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-453]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[454-version-negotiation]
ssl_conf = 454-version-negotiation-ssl

[454-version-negotiation-ssl]
server = 454-version-negotiation-server
client = 454-version-negotiation-client

[454-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[454-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-454]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[455-version-negotiation]
ssl_conf = 455-version-negotiation-ssl

[455-version-negotiation-ssl]
server = 455-version-negotiation-server
client = 455-version-negotiation-client

[455-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[455-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-455]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[456-version-negotiation]
ssl_conf = 456-version-negotiation-ssl

[456-version-negotiation-ssl]
server = 456-version-negotiation-server
client = 456-version-negotiation-client

[456-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[456-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-456]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[457-version-negotiation]
ssl_conf = 457-version-negotiation-ssl

[457-version-negotiation-ssl]
server = 457-version-negotiation-server
client = 457-version-negotiation-client

[457-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[457-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-457]
ExpectedResult = ClientFail
Serialize = Server


# ===========================================================

[458-version-negotiation]
ssl_conf = 458-version-negotiation-ssl

[458-version-negotiation-ssl]
server = 458-version-negotiation-server
client = 458-version-negotiation-client

[458-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[458-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-458]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[459-version-negotiation]
ssl_conf = 459-version-negotiation-ssl

[459-version-negotiation-ssl]
server = 459-version-negotiation-server
client = 459-version-negotiation-client

[459-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[459-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-459]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[460-version-negotiation]
ssl_conf = 460-version-negotiation-ssl

[460-version-negotiation-ssl]
server = 460-version-negotiation-server
client = 460-version-negotiation-client

[460-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[460-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-460]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[461-version-negotiation]
ssl_conf = 461-version-negotiation-ssl

[461-version-negotiation-ssl]
server = 461-version-negotiation-server
client = 461-version-negotiation-client

[461-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[461-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-461]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[462-version-negotiation]
ssl_conf = 462-version-negotiation-ssl

[462-version-negotiation-ssl]
server = 462-version-negotiation-server
client = 462-version-negotiation-client

[462-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[462-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-462]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[463-version-negotiation]
ssl_conf = 463-version-negotiation-ssl

[463-version-negotiation-ssl]
server = 463-version-negotiation-server
client = 463-version-negotiation-client

[463-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[463-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-463]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[464-version-negotiation]
ssl_conf = 464-version-negotiation-ssl

[464-version-negotiation-ssl]
server = 464-version-negotiation-server
client = 464-version-negotiation-client

[464-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[464-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-464]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[465-version-negotiation]
ssl_conf = 465-version-negotiation-ssl

[465-version-negotiation-ssl]
server = 465-version-negotiation-server
client = 465-version-negotiation-client

[465-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[465-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-465]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[466-version-negotiation]
ssl_conf = 466-version-negotiation-ssl

[466-version-negotiation-ssl]
server = 466-version-negotiation-server
client = 466-version-negotiation-client

[466-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[466-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-466]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[467-version-negotiation]
ssl_conf = 467-version-negotiation-ssl

[467-version-negotiation-ssl]
server = 467-version-negotiation-server
client = 467-version-negotiation-client

[467-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[467-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-467]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[468-version-negotiation]
ssl_conf = 468-version-negotiation-ssl

[468-version-negotiation-ssl]
server = 468-version-negotiation-server
client = 468-version-negotiation-client

[468-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[468-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-468]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[469-version-negotiation]
ssl_conf = 469-version-negotiation-ssl

[469-version-negotiation-ssl]
server = 469-version-negotiation-server
client = 469-version-negotiation-client

[469-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[469-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-469]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[470-version-negotiation]
ssl_conf = 470-version-negotiation-ssl

[470-version-negotiation-ssl]
server = 470-version-negotiation-server
client = 470-version-negotiation-client

[470-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[470-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-470]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[471-version-negotiation]
ssl_conf = 471-version-negotiation-ssl

[471-version-negotiation-ssl]
server = 471-version-negotiation-server
client = 471-version-negotiation-client

[471-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[471-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-471]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[472-version-negotiation]
ssl_conf = 472-version-negotiation-ssl

[472-version-negotiation-ssl]
server = 472-version-negotiation-server
client = 472-version-negotiation-client

[472-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[472-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-472]
ExpectedResult = ClientFail
Serialize = Server


# ===========================================================

[473-version-negotiation]
ssl_conf = 473-version-negotiation-ssl

[473-version-negotiation-ssl]
server = 473-version-negotiation-server
client = 473-version-negotiation-client

[473-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[473-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-473]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[474-version-negotiation]
ssl_conf = 474-version-negotiation-ssl

[474-version-negotiation-ssl]
server = 474-version-negotiation-server
client = 474-version-negotiation-client

[474-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[474-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-474]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Server


# ===========================================================

[475-version-negotiation]
ssl_conf = 475-version-negotiation-ssl

[475-version-negotiation-ssl]
server = 475-version-negotiation-server
client = 475-version-negotiation-client

[475-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[475-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-475]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Server


# ===========================================================

[476-version-negotiation]
ssl_conf = 476-version-negotiation-ssl

[476-version-negotiation-ssl]
server = 476-version-negotiation-server
client = 476-version-negotiation-client

[476-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[476-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-476]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Server


# ===========================================================

[477-version-negotiation]
ssl_conf = 477-version-negotiation-ssl

[477-version-negotiation-ssl]
server = 477-version-negotiation-server
client = 477-version-negotiation-client

[477-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = SSLv3
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[477-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-477]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[478-version-negotiation]
ssl_conf = 478-version-negotiation-ssl

[478-version-negotiation-ssl]
server = 478-version-negotiation-server
client = 478-version-negotiation-client

[478-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[478-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-478]
ExpectedResult = ClientFail
Serialize = Server


# ===========================================================

[479-version-negotiation]
ssl_conf = 479-version-negotiation-ssl

[479-version-negotiation-ssl]
server = 479-version-negotiation-server
client = 479-version-negotiation-client

[479-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[479-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-479]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[480-version-negotiation]
ssl_conf = 480-version-negotiation-ssl

[480-version-negotiation-ssl]
server = 480-version-negotiation-server
client = 480-version-negotiation-client

[480-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[480-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-480]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Server


# ===========================================================

[481-version-negotiation]
ssl_conf = 481-version-negotiation-ssl

[481-version-negotiation-ssl]
server = 481-version-negotiation-server
client = 481-version-negotiation-client

[481-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[481-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-481]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Server


# ===========================================================

[482-version-negotiation]
ssl_conf = 482-version-negotiation-ssl

[482-version-negotiation-ssl]
server = 482-version-negotiation-server
client = 482-version-negotiation-client

[482-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[482-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-482]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Server


# ===========================================================

[483-version-negotiation]
ssl_conf = 483-version-negotiation-ssl

[483-version-negotiation-ssl]
server = 483-version-negotiation-server
client = 483-version-negotiation-client

[483-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[483-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-483]
ExpectedResult = ClientFail
Serialize = Server


# ===========================================================

[484-version-negotiation]
ssl_conf = 484-version-negotiation-ssl

[484-version-negotiation-ssl]
server = 484-version-negotiation-server
client = 484-version-negotiation-client

[484-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[484-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-484]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[485-version-negotiation]
ssl_conf = 485-version-negotiation-ssl

[485-version-negotiation-ssl]
server = 485-version-negotiation-server
client = 485-version-negotiation-client

[485-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[485-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-485]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Server


# ===========================================================

[486-version-negotiation]
ssl_conf = 486-version-negotiation-ssl

[486-version-negotiation-ssl]
server = 486-version-negotiation-server
client = 486-version-negotiation-client

[486-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[486-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-486]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Server


# ===========================================================

[487-version-negotiation]
ssl_conf = 487-version-negotiation-ssl

[487-version-negotiation-ssl]
server = 487-version-negotiation-server
client = 487-version-negotiation-client

[487-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[487-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-487]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Server


# ===========================================================

[488-version-negotiation]
ssl_conf = 488-version-negotiation-ssl

[488-version-negotiation-ssl]
server = 488-version-negotiation-server
client = 488-version-negotiation-client

[488-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[488-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-488]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[489-version-negotiation]
ssl_conf = 489-version-negotiation-ssl

[489-version-negotiation-ssl]
server = 489-version-negotiation-server
client = 489-version-negotiation-client

[489-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[489-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-489]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Server


# ===========================================================

[490-version-negotiation]
ssl_conf = 490-version-negotiation-ssl

[490-version-negotiation-ssl]
server = 490-version-negotiation-server
client = 490-version-negotiation-client

[490-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[490-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-490]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Server


# ===========================================================

[491-version-negotiation]
ssl_conf = 491-version-negotiation-ssl

[491-version-negotiation-ssl]
server = 491-version-negotiation-server
client = 491-version-negotiation-client

[491-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[491-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-491]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Server


# ===========================================================

[492-version-negotiation]
ssl_conf = 492-version-negotiation-ssl

[492-version-negotiation-ssl]
server = 492-version-negotiation-server
client = 492-version-negotiation-client

[492-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[492-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-492]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Server


# ===========================================================

[493-version-negotiation]
ssl_conf = 493-version-negotiation-ssl

[493-version-negotiation-ssl]
server = 493-version-negotiation-server
client = 493-version-negotiation-client

[493-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[493-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-493]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Server


# ===========================================================

[494-version-negotiation]
ssl_conf = 494-version-negotiation-ssl

[494-version-negotiation-ssl]
server = 494-version-negotiation-server
client = 494-version-negotiation-client

[494-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[494-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-494]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Server


# ===========================================================

[495-version-negotiation]
ssl_conf = 495-version-negotiation-ssl

[495-version-negotiation-ssl]
server = 495-version-negotiation-server
client = 495-version-negotiation-client

[495-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[495-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-495]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[496-version-negotiation]
ssl_conf = 496-version-negotiation-ssl

[496-version-negotiation-ssl]
server = 496-version-negotiation-server
client = 496-version-negotiation-client

[496-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[496-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-496]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[497-version-negotiation]
ssl_conf = 497-version-negotiation-ssl

[497-version-negotiation-ssl]
server = 497-version-negotiation-server
client = 497-version-negotiation-client

[497-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[497-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-497]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[498-version-negotiation]
ssl_conf = 498-version-negotiation-ssl

[498-version-negotiation-ssl]
server = 498-version-negotiation-server
client = 498-version-negotiation-client

[498-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[498-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-498]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[499-version-negotiation]
ssl_conf = 499-version-negotiation-ssl

[499-version-negotiation-ssl]
server = 499-version-negotiation-server
client = 499-version-negotiation-client

[499-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[499-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-499]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[500-version-negotiation]
ssl_conf = 500-version-negotiation-ssl

[500-version-negotiation-ssl]
server = 500-version-negotiation-server
client = 500-version-negotiation-client

[500-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[500-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-500]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Server


# ===========================================================

[501-version-negotiation]
ssl_conf = 501-version-negotiation-ssl

[501-version-negotiation-ssl]
server = 501-version-negotiation-server
client = 501-version-negotiation-client

[501-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[501-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-501]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[502-version-negotiation]
ssl_conf = 502-version-negotiation-ssl

[502-version-negotiation-ssl]
server = 502-version-negotiation-server
client = 502-version-negotiation-client

[502-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[502-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-502]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[503-version-negotiation]
ssl_conf = 503-version-negotiation-ssl

[503-version-negotiation-ssl]
server = 503-version-negotiation-server
client = 503-version-negotiation-client

[503-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = SSLv3
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[503-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-503]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[504-version-negotiation]
ssl_conf = 504-version-negotiation-ssl

[504-version-negotiation-ssl]
server = 504-version-negotiation-server
client = 504-version-negotiation-client

[504-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[504-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-504]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[505-version-negotiation]
ssl_conf = 505-version-negotiation-ssl

[505-version-negotiation-ssl]
server = 505-version-negotiation-server
client = 505-version-negotiation-client

[505-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[505-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-505]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[506-version-negotiation]
ssl_conf = 506-version-negotiation-ssl

[506-version-negotiation-ssl]
server = 506-version-negotiation-server
client = 506-version-negotiation-client

[506-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[506-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-506]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Server


# ===========================================================

[507-version-negotiation]
ssl_conf = 507-version-negotiation-ssl

[507-version-negotiation-ssl]
server = 507-version-negotiation-server
client = 507-version-negotiation-client

[507-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[507-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-507]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[508-version-negotiation]
ssl_conf = 508-version-negotiation-ssl

[508-version-negotiation-ssl]
server = 508-version-negotiation-server
client = 508-version-negotiation-client

[508-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[508-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-508]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[509-version-negotiation]
ssl_conf = 509-version-negotiation-ssl

[509-version-negotiation-ssl]
server = 509-version-negotiation-server
client = 509-version-negotiation-client

[509-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[509-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-509]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[510-version-negotiation]
ssl_conf = 510-version-negotiation-ssl

[510-version-negotiation-ssl]
server = 510-version-negotiation-server
client = 510-version-negotiation-client

[510-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[510-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-510]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[511-version-negotiation]
ssl_conf = 511-version-negotiation-ssl

[511-version-negotiation-ssl]
server = 511-version-negotiation-server
client = 511-version-negotiation-client

[511-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[511-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-511]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Server


# ===========================================================

[512-version-negotiation]
ssl_conf = 512-version-negotiation-ssl

[512-version-negotiation-ssl]
server = 512-version-negotiation-server
client = 512-version-negotiation-client

[512-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[512-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-512]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[513-version-negotiation]
ssl_conf = 513-version-negotiation-ssl

[513-version-negotiation-ssl]
server = 513-version-negotiation-server
client = 513-version-negotiation-client

[513-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[513-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-513]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[514-version-negotiation]
ssl_conf = 514-version-negotiation-ssl

[514-version-negotiation-ssl]
server = 514-version-negotiation-server
client = 514-version-negotiation-client

[514-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[514-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-514]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[515-version-negotiation]
ssl_conf = 515-version-negotiation-ssl

[515-version-negotiation-ssl]
server = 515-version-negotiation-server
client = 515-version-negotiation-client

[515-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[515-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-515]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Server


# ===========================================================

[516-version-negotiation]
ssl_conf = 516-version-negotiation-ssl

[516-version-negotiation-ssl]
server = 516-version-negotiation-server
client = 516-version-negotiation-client

[516-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[516-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-516]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[517-version-negotiation]
ssl_conf = 517-version-negotiation-ssl

[517-version-negotiation-ssl]
server = 517-version-negotiation-server
client = 517-version-negotiation-client

[517-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[517-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-517]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[518-version-negotiation]
ssl_conf = 518-version-negotiation-ssl

[518-version-negotiation-ssl]
server = 518-version-negotiation-server
client = 518-version-negotiation-client

[518-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[518-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-518]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Server


# ===========================================================

[519-version-negotiation]
ssl_conf = 519-version-negotiation-ssl

[519-version-negotiation-ssl]
server = 519-version-negotiation-server
client = 519-version-negotiation-client

[519-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[519-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-519]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[520-version-negotiation]
ssl_conf = 520-version-negotiation-ssl

[520-version-negotiation-ssl]
server = 520-version-negotiation-server
client = 520-version-negotiation-client

[520-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[520-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-520]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[521-version-negotiation]
ssl_conf = 521-version-negotiation-ssl

[521-version-negotiation-ssl]
server = 521-version-negotiation-server
client = 521-version-negotiation-client

[521-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[521-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-521]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[522-version-negotiation]
ssl_conf = 522-version-negotiation-ssl

[522-version-negotiation-ssl]
server = 522-version-negotiation-server
client = 522-version-negotiation-client

[522-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[522-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-522]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[523-version-negotiation]
ssl_conf = 523-version-negotiation-ssl

[523-version-negotiation-ssl]
server = 523-version-negotiation-server
client = 523-version-negotiation-client

[523-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[523-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-523]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[524-version-negotiation]
ssl_conf = 524-version-negotiation-ssl

[524-version-negotiation-ssl]
server = 524-version-negotiation-server
client = 524-version-negotiation-client

[524-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[524-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-524]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[525-version-negotiation]
ssl_conf = 525-version-negotiation-ssl

[525-version-negotiation-ssl]
server = 525-version-negotiation-server
client = 525-version-negotiation-client

[525-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[525-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-525]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[526-version-negotiation]
ssl_conf = 526-version-negotiation-ssl

[526-version-negotiation-ssl]
server = 526-version-negotiation-server
client = 526-version-negotiation-client

[526-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[526-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-526]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Server


# ===========================================================

[527-version-negotiation]
ssl_conf = 527-version-negotiation-ssl

[527-version-negotiation-ssl]
server = 527-version-negotiation-server
client = 527-version-negotiation-client

[527-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[527-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-527]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[528-version-negotiation]
ssl_conf = 528-version-negotiation-ssl

[528-version-negotiation-ssl]
server = 528-version-negotiation-server
client = 528-version-negotiation-client

[528-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[528-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-528]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[529-version-negotiation]
ssl_conf = 529-version-negotiation-ssl

[529-version-negotiation-ssl]
server = 529-version-negotiation-server
client = 529-version-negotiation-client

[529-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = SSLv3
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[529-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-529]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[530-version-negotiation]
ssl_conf = 530-version-negotiation-ssl

[530-version-negotiation-ssl]
server = 530-version-negotiation-server
client = 530-version-negotiation-client

[530-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[530-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-530]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[531-version-negotiation]
ssl_conf = 531-version-negotiation-ssl

[531-version-negotiation-ssl]
server = 531-version-negotiation-server
client = 531-version-negotiation-client

[531-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[531-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-531]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[532-version-negotiation]
ssl_conf = 532-version-negotiation-ssl

[532-version-negotiation-ssl]
server = 532-version-negotiation-server
client = 532-version-negotiation-client

[532-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[532-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-532]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Server


# ===========================================================

[533-version-negotiation]
ssl_conf = 533-version-negotiation-ssl

[533-version-negotiation-ssl]
server = 533-version-negotiation-server
client = 533-version-negotiation-client

[533-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[533-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-533]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[534-version-negotiation]
ssl_conf = 534-version-negotiation-ssl

[534-version-negotiation-ssl]
server = 534-version-negotiation-server
client = 534-version-negotiation-client

[534-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[534-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-534]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[535-version-negotiation]
ssl_conf = 535-version-negotiation-ssl

[535-version-negotiation-ssl]
server = 535-version-negotiation-server
client = 535-version-negotiation-client

[535-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[535-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-535]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[536-version-negotiation]
ssl_conf = 536-version-negotiation-ssl

[536-version-negotiation-ssl]
server = 536-version-negotiation-server
client = 536-version-negotiation-client

[536-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[536-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-536]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[537-version-negotiation]
ssl_conf = 537-version-negotiation-ssl

[537-version-negotiation-ssl]
server = 537-version-negotiation-server
client = 537-version-negotiation-client

[537-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[537-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-537]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Server


# ===========================================================

[538-version-negotiation]
ssl_conf = 538-version-negotiation-ssl

[538-version-negotiation-ssl]
server = 538-version-negotiation-server
client = 538-version-negotiation-client

[538-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[538-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-538]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[539-version-negotiation]
ssl_conf = 539-version-negotiation-ssl

[539-version-negotiation-ssl]
server = 539-version-negotiation-server
client = 539-version-negotiation-client

[539-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[539-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-539]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[540-version-negotiation]
ssl_conf = 540-version-negotiation-ssl

[540-version-negotiation-ssl]
server = 540-version-negotiation-server
client = 540-version-negotiation-client

[540-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[540-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-540]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Server


# ===========================================================

[541-version-negotiation]
ssl_conf = 541-version-negotiation-ssl

[541-version-negotiation-ssl]
server = 541-version-negotiation-server
client = 541-version-negotiation-client

[541-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[541-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-541]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Server


# ===========================================================

[542-version-negotiation]
ssl_conf = 542-version-negotiation-ssl

[542-version-negotiation-ssl]
server = 542-version-negotiation-server
client = 542-version-negotiation-client

[542-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[542-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-542]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[543-version-negotiation]
ssl_conf = 543-version-negotiation-ssl

[543-version-negotiation-ssl]
server = 543-version-negotiation-server
client = 543-version-negotiation-client

[543-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[543-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-543]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[544-version-negotiation]
ssl_conf = 544-version-negotiation-ssl

[544-version-negotiation-ssl]
server = 544-version-negotiation-server
client = 544-version-negotiation-client

[544-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[544-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-544]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Server


# ===========================================================

[545-version-negotiation]
ssl_conf = 545-version-negotiation-ssl

[545-version-negotiation-ssl]
server = 545-version-negotiation-server
client = 545-version-negotiation-client

[545-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[545-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-545]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[546-version-negotiation]
ssl_conf = 546-version-negotiation-ssl

[546-version-negotiation-ssl]
server = 546-version-negotiation-server
client = 546-version-negotiation-client

[546-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[546-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-546]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[547-version-negotiation]
ssl_conf = 547-version-negotiation-ssl

[547-version-negotiation-ssl]
server = 547-version-negotiation-server
client = 547-version-negotiation-client

[547-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[547-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-547]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[548-version-negotiation]
ssl_conf = 548-version-negotiation-ssl

[548-version-negotiation-ssl]
server = 548-version-negotiation-server
client = 548-version-negotiation-client

[548-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[548-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-548]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[549-version-negotiation]
ssl_conf = 549-version-negotiation-ssl

[549-version-negotiation-ssl]
server = 549-version-negotiation-server
client = 549-version-negotiation-client

[549-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[549-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-549]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[550-version-negotiation]
ssl_conf = 550-version-negotiation-ssl

[550-version-negotiation-ssl]
server = 550-version-negotiation-server
client = 550-version-negotiation-client

[550-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[550-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-550]
ExpectedResult = ClientFail
Serialize = Server


# ===========================================================

[551-version-negotiation]
ssl_conf = 551-version-negotiation-ssl

[551-version-negotiation-ssl]
server = 551-version-negotiation-server
client = 551-version-negotiation-client

[551-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[551-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-551]
ExpectedResult = ClientFail
Serialize = Server


# ===========================================================

[552-version-negotiation]
ssl_conf = 552-version-negotiation-ssl

[552-version-negotiation-ssl]
server = 552-version-negotiation-server
client = 552-version-negotiation-client

[552-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[552-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-552]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Server


# ===========================================================

[553-version-negotiation]
ssl_conf = 553-version-negotiation-ssl

[553-version-negotiation-ssl]
server = 553-version-negotiation-server
client = 553-version-negotiation-client

[553-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[553-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-553]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Server


# ===========================================================

[554-version-negotiation]
ssl_conf = 554-version-negotiation-ssl

[554-version-negotiation-ssl]
server = 554-version-negotiation-server
client = 554-version-negotiation-client

[554-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[554-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-554]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Server


# ===========================================================

[555-version-negotiation]
ssl_conf = 555-version-negotiation-ssl

[555-version-negotiation-ssl]
server = 555-version-negotiation-server
client = 555-version-negotiation-client

[555-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = SSLv3
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[555-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-555]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[556-version-negotiation]
ssl_conf = 556-version-negotiation-ssl

[556-version-negotiation-ssl]
server = 556-version-negotiation-server
client = 556-version-negotiation-client

[556-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[556-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-556]
ExpectedResult = ClientFail
Serialize = Server


# ===========================================================

[557-version-negotiation]
ssl_conf = 557-version-negotiation-ssl

[557-version-negotiation-ssl]
server = 557-version-negotiation-server
client = 557-version-negotiation-client

[557-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[557-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-557]
ExpectedResult = ClientFail
Serialize = Server


# ===========================================================

[558-version-negotiation]
ssl_conf = 558-version-negotiation-ssl

[558-version-negotiation-ssl]
server = 558-version-negotiation-server
client = 558-version-negotiation-client

[558-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[558-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-558]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Server


# ===========================================================

[559-version-negotiation]
ssl_conf = 559-version-negotiation-ssl

[559-version-negotiation-ssl]
server = 559-version-negotiation-server
client = 559-version-negotiation-client

[559-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[559-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-559]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Server


# ===========================================================

[560-version-negotiation]
ssl_conf = 560-version-negotiation-ssl

[560-version-negotiation-ssl]
server = 560-version-negotiation-server
client = 560-version-negotiation-client

[560-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[560-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-560]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Server


# ===========================================================

[561-version-negotiation]
ssl_conf = 561-version-negotiation-ssl

[561-version-negotiation-ssl]
server = 561-version-negotiation-server
client = 561-version-negotiation-client

[561-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[561-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-561]
ExpectedResult = ClientFail
Serialize = Server


# ===========================================================

[562-version-negotiation]
ssl_conf = 562-version-negotiation-ssl

[562-version-negotiation-ssl]
server = 562-version-negotiation-server
client = 562-version-negotiation-client

[562-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[562-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-562]
ExpectedResult = ClientFail
Serialize = Server


# ===========================================================

[563-version-negotiation]
ssl_conf = 563-version-negotiation-ssl

[563-version-negotiation-ssl]
server = 563-version-negotiation-server
client = 563-version-negotiation-client

[563-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[563-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-563]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Server


# ===========================================================

[564-version-negotiation]
ssl_conf = 564-version-negotiation-ssl

[564-version-negotiation-ssl]
server = 564-version-negotiation-server
client = 564-version-negotiation-client

[564-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[564-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-564]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Server


# ===========================================================

[565-version-negotiation]
ssl_conf = 565-version-negotiation-ssl

[565-version-negotiation-ssl]
server = 565-version-negotiation-server
client = 565-version-negotiation-client

[565-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[565-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-565]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Server


# ===========================================================

[566-version-negotiation]
ssl_conf = 566-version-negotiation-ssl

[566-version-negotiation-ssl]
server = 566-version-negotiation-server
client = 566-version-negotiation-client

[566-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[566-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-566]
ExpectedResult = ClientFail
Serialize = Server


# ===========================================================

[567-version-negotiation]
ssl_conf = 567-version-negotiation-ssl

[567-version-negotiation-ssl]
server = 567-version-negotiation-server
client = 567-version-negotiation-client

[567-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[567-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-567]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Server


# ===========================================================

[568-version-negotiation]
ssl_conf = 568-version-negotiation-ssl

[568-version-negotiation-ssl]
server = 568-version-negotiation-server
client = 568-version-negotiation-client

[568-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[568-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-568]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Server


# ===========================================================

[569-version-negotiation]
ssl_conf = 569-version-negotiation-ssl

[569-version-negotiation-ssl]
server = 569-version-negotiation-server
client = 569-version-negotiation-client

[569-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[569-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-569]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Server


# ===========================================================

[570-version-negotiation]
ssl_conf = 570-version-negotiation-ssl

[570-version-negotiation-ssl]
server = 570-version-negotiation-server
client = 570-version-negotiation-client

[570-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[570-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-570]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Server


# ===========================================================

[571-version-negotiation]
ssl_conf = 571-version-negotiation-ssl

[571-version-negotiation-ssl]
server = 571-version-negotiation-server
client = 571-version-negotiation-client

[571-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[571-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-571]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Server


# ===========================================================

[572-version-negotiation]
ssl_conf = 572-version-negotiation-ssl

[572-version-negotiation-ssl]
server = 572-version-negotiation-server
client = 572-version-negotiation-client

[572-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[572-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-572]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Server


# ===========================================================

[573-version-negotiation]
ssl_conf = 573-version-negotiation-ssl

[573-version-negotiation-ssl]
server = 573-version-negotiation-server
client = 573-version-negotiation-client

[573-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[573-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-573]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[574-version-negotiation]
ssl_conf = 574-version-negotiation-ssl

[574-version-negotiation-ssl]
server = 574-version-negotiation-server
client = 574-version-negotiation-client

[574-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[574-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-574]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[575-version-negotiation]
ssl_conf = 575-version-negotiation-ssl

[575-version-negotiation-ssl]
server = 575-version-negotiation-server
client = 575-version-negotiation-client

[575-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[575-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-575]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[576-version-negotiation]
ssl_conf = 576-version-negotiation-ssl

[576-version-negotiation-ssl]
server = 576-version-negotiation-server
client = 576-version-negotiation-client

[576-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[576-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-576]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[577-version-negotiation]
ssl_conf = 577-version-negotiation-ssl

[577-version-negotiation-ssl]
server = 577-version-negotiation-server
client = 577-version-negotiation-client

[577-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[577-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-577]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[578-version-negotiation]
ssl_conf = 578-version-negotiation-ssl

[578-version-negotiation-ssl]
server = 578-version-negotiation-server
client = 578-version-negotiation-client

[578-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[578-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-578]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Server


# ===========================================================

[579-version-negotiation]
ssl_conf = 579-version-negotiation-ssl

[579-version-negotiation-ssl]
server = 579-version-negotiation-server
client = 579-version-negotiation-client

[579-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[579-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-579]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[580-version-negotiation]
ssl_conf = 580-version-negotiation-ssl

[580-version-negotiation-ssl]
server = 580-version-negotiation-server
client = 580-version-negotiation-client

[580-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[580-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-580]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[581-version-negotiation]
ssl_conf = 581-version-negotiation-ssl

[581-version-negotiation-ssl]
server = 581-version-negotiation-server
client = 581-version-negotiation-client

[581-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = SSLv3
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[581-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-581]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[582-version-negotiation]
ssl_conf = 582-version-negotiation-ssl

[582-version-negotiation-ssl]
server = 582-version-negotiation-server
client = 582-version-negotiation-client

[582-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[582-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-582]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[583-version-negotiation]
ssl_conf = 583-version-negotiation-ssl

[583-version-negotiation-ssl]
server = 583-version-negotiation-server
client = 583-version-negotiation-client

[583-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[583-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-583]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[584-version-negotiation]
ssl_conf = 584-version-negotiation-ssl

[584-version-negotiation-ssl]
server = 584-version-negotiation-server
client = 584-version-negotiation-client

[584-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[584-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-584]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Server


# ===========================================================

[585-version-negotiation]
ssl_conf = 585-version-negotiation-ssl

[585-version-negotiation-ssl]
server = 585-version-negotiation-server
client = 585-version-negotiation-client

[585-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[585-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-585]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[586-version-negotiation]
ssl_conf = 586-version-negotiation-ssl

[586-version-negotiation-ssl]
server = 586-version-negotiation-server
client = 586-version-negotiation-client

[586-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[586-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-586]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[587-version-negotiation]
ssl_conf = 587-version-negotiation-ssl

[587-version-negotiation-ssl]
server = 587-version-negotiation-server
client = 587-version-negotiation-client

[587-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[587-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-587]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[588-version-negotiation]
ssl_conf = 588-version-negotiation-ssl

[588-version-negotiation-ssl]
server = 588-version-negotiation-server
client = 588-version-negotiation-client

[588-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[588-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-588]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[589-version-negotiation]
ssl_conf = 589-version-negotiation-ssl

[589-version-negotiation-ssl]
server = 589-version-negotiation-server
client = 589-version-negotiation-client

[589-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[589-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-589]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Server


# ===========================================================

[590-version-negotiation]
ssl_conf = 590-version-negotiation-ssl

[590-version-negotiation-ssl]
server = 590-version-negotiation-server
client = 590-version-negotiation-client

[590-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[590-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-590]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[591-version-negotiation]
ssl_conf = 591-version-negotiation-ssl

[591-version-negotiation-ssl]
server = 591-version-negotiation-server
client = 591-version-negotiation-client

[591-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[591-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-591]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[592-version-negotiation]
ssl_conf = 592-version-negotiation-ssl

[592-version-negotiation-ssl]
server = 592-version-negotiation-server
client = 592-version-negotiation-client

[592-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[592-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-592]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[593-version-negotiation]
ssl_conf = 593-version-negotiation-ssl

[593-version-negotiation-ssl]
server = 593-version-negotiation-server
client = 593-version-negotiation-client

[593-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[593-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-593]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Server


# ===========================================================

[594-version-negotiation]
ssl_conf = 594-version-negotiation-ssl

[594-version-negotiation-ssl]
server = 594-version-negotiation-server
client = 594-version-negotiation-client

[594-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[594-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-594]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[595-version-negotiation]
ssl_conf = 595-version-negotiation-ssl

[595-version-negotiation-ssl]
server = 595-version-negotiation-server
client = 595-version-negotiation-client

[595-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[595-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-595]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[596-version-negotiation]
ssl_conf = 596-version-negotiation-ssl

[596-version-negotiation-ssl]
server = 596-version-negotiation-server
client = 596-version-negotiation-client

[596-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[596-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-596]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Server


# ===========================================================

[597-version-negotiation]
ssl_conf = 597-version-negotiation-ssl

[597-version-negotiation-ssl]
server = 597-version-negotiation-server
client = 597-version-negotiation-client

[597-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[597-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-597]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[598-version-negotiation]
ssl_conf = 598-version-negotiation-ssl

[598-version-negotiation-ssl]
server = 598-version-negotiation-server
client = 598-version-negotiation-client

[598-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[598-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-598]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[599-version-negotiation]
ssl_conf = 599-version-negotiation-ssl

[599-version-negotiation-ssl]
server = 599-version-negotiation-server
client = 599-version-negotiation-client

[599-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[599-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-599]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[600-version-negotiation]
ssl_conf = 600-version-negotiation-ssl

[600-version-negotiation-ssl]
server = 600-version-negotiation-server
client = 600-version-negotiation-client

[600-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[600-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-600]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[601-version-negotiation]
ssl_conf = 601-version-negotiation-ssl

[601-version-negotiation-ssl]
server = 601-version-negotiation-server
client = 601-version-negotiation-client

[601-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[601-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-601]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[602-version-negotiation]
ssl_conf = 602-version-negotiation-ssl

[602-version-negotiation-ssl]
server = 602-version-negotiation-server
client = 602-version-negotiation-client

[602-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[602-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-602]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[603-version-negotiation]
ssl_conf = 603-version-negotiation-ssl

[603-version-negotiation-ssl]
server = 603-version-negotiation-server
client = 603-version-negotiation-client

[603-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[603-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-603]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[604-version-negotiation]
ssl_conf = 604-version-negotiation-ssl

[604-version-negotiation-ssl]
server = 604-version-negotiation-server
client = 604-version-negotiation-client

[604-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[604-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-604]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Server


# ===========================================================

[605-version-negotiation]
ssl_conf = 605-version-negotiation-ssl

[605-version-negotiation-ssl]
server = 605-version-negotiation-server
client = 605-version-negotiation-client

[605-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[605-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-605]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[606-version-negotiation]
ssl_conf = 606-version-negotiation-ssl

[606-version-negotiation-ssl]
server = 606-version-negotiation-server
client = 606-version-negotiation-client

[606-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[606-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-606]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[607-version-negotiation]
ssl_conf = 607-version-negotiation-ssl

[607-version-negotiation-ssl]
server = 607-version-negotiation-server
client = 607-version-negotiation-client

[607-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = SSLv3
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[607-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-607]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[608-version-negotiation]
ssl_conf = 608-version-negotiation-ssl

[608-version-negotiation-ssl]
server = 608-version-negotiation-server
client = 608-version-negotiation-client

[608-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[608-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-608]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[609-version-negotiation]
ssl_conf = 609-version-negotiation-ssl

[609-version-negotiation-ssl]
server = 609-version-negotiation-server
client = 609-version-negotiation-client

[609-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[609-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-609]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[610-version-negotiation]
ssl_conf = 610-version-negotiation-ssl

[610-version-negotiation-ssl]
server = 610-version-negotiation-server
client = 610-version-negotiation-client

[610-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[610-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-610]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Server


# ===========================================================

[611-version-negotiation]
ssl_conf = 611-version-negotiation-ssl

[611-version-negotiation-ssl]
server = 611-version-negotiation-server
client = 611-version-negotiation-client

[611-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[611-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-611]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[612-version-negotiation]
ssl_conf = 612-version-negotiation-ssl

[612-version-negotiation-ssl]
server = 612-version-negotiation-server
client = 612-version-negotiation-client

[612-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[612-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-612]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[613-version-negotiation]
ssl_conf = 613-version-negotiation-ssl

[613-version-negotiation-ssl]
server = 613-version-negotiation-server
client = 613-version-negotiation-client

[613-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[613-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-613]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[614-version-negotiation]
ssl_conf = 614-version-negotiation-ssl

[614-version-negotiation-ssl]
server = 614-version-negotiation-server
client = 614-version-negotiation-client

[614-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[614-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-614]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[615-version-negotiation]
ssl_conf = 615-version-negotiation-ssl

[615-version-negotiation-ssl]
server = 615-version-negotiation-server
client = 615-version-negotiation-client

[615-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[615-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-615]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Server


# ===========================================================

[616-version-negotiation]
ssl_conf = 616-version-negotiation-ssl

[616-version-negotiation-ssl]
server = 616-version-negotiation-server
client = 616-version-negotiation-client

[616-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[616-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-616]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[617-version-negotiation]
ssl_conf = 617-version-negotiation-ssl

[617-version-negotiation-ssl]
server = 617-version-negotiation-server
client = 617-version-negotiation-client

[617-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[617-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-617]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[618-version-negotiation]
ssl_conf = 618-version-negotiation-ssl

[618-version-negotiation-ssl]
server = 618-version-negotiation-server
client = 618-version-negotiation-client

[618-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[618-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-618]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[619-version-negotiation]
ssl_conf = 619-version-negotiation-ssl

[619-version-negotiation-ssl]
server = 619-version-negotiation-server
client = 619-version-negotiation-client

[619-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[619-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-619]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Server


# ===========================================================

[620-version-negotiation]
ssl_conf = 620-version-negotiation-ssl

[620-version-negotiation-ssl]
server = 620-version-negotiation-server
client = 620-version-negotiation-client

[620-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[620-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-620]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[621-version-negotiation]
ssl_conf = 621-version-negotiation-ssl

[621-version-negotiation-ssl]
server = 621-version-negotiation-server
client = 621-version-negotiation-client

[621-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[621-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-621]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[622-version-negotiation]
ssl_conf = 622-version-negotiation-ssl

[622-version-negotiation-ssl]
server = 622-version-negotiation-server
client = 622-version-negotiation-client

[622-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[622-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-622]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Server


# ===========================================================

[623-version-negotiation]
ssl_conf = 623-version-negotiation-ssl

[623-version-negotiation-ssl]
server = 623-version-negotiation-server
client = 623-version-negotiation-client

[623-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[623-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-623]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[624-version-negotiation]
ssl_conf = 624-version-negotiation-ssl

[624-version-negotiation-ssl]
server = 624-version-negotiation-server
client = 624-version-negotiation-client

[624-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[624-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-624]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[625-version-negotiation]
ssl_conf = 625-version-negotiation-ssl

[625-version-negotiation-ssl]
server = 625-version-negotiation-server
client = 625-version-negotiation-client

[625-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[625-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-625]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[626-version-negotiation]
ssl_conf = 626-version-negotiation-ssl

[626-version-negotiation-ssl]
server = 626-version-negotiation-server
client = 626-version-negotiation-client

[626-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[626-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-626]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[627-version-negotiation]
ssl_conf = 627-version-negotiation-ssl

[627-version-negotiation-ssl]
server = 627-version-negotiation-server
client = 627-version-negotiation-client

[627-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[627-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-627]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[628-version-negotiation]
ssl_conf = 628-version-negotiation-ssl

[628-version-negotiation-ssl]
server = 628-version-negotiation-server
client = 628-version-negotiation-client

[628-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[628-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-628]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[629-version-negotiation]
ssl_conf = 629-version-negotiation-ssl

[629-version-negotiation-ssl]
server = 629-version-negotiation-server
client = 629-version-negotiation-client

[629-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[629-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-629]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[630-version-negotiation]
ssl_conf = 630-version-negotiation-ssl

[630-version-negotiation-ssl]
server = 630-version-negotiation-server
client = 630-version-negotiation-client

[630-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[630-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-630]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[631-version-negotiation]
ssl_conf = 631-version-negotiation-ssl

[631-version-negotiation-ssl]
server = 631-version-negotiation-server
client = 631-version-negotiation-client

[631-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[631-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-631]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[632-version-negotiation]
ssl_conf = 632-version-negotiation-ssl

[632-version-negotiation-ssl]
server = 632-version-negotiation-server
client = 632-version-negotiation-client

[632-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[632-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-632]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[633-version-negotiation]
ssl_conf = 633-version-negotiation-ssl

[633-version-negotiation-ssl]
server = 633-version-negotiation-server
client = 633-version-negotiation-client

[633-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = SSLv3
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[633-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-633]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[634-version-negotiation]
ssl_conf = 634-version-negotiation-ssl

[634-version-negotiation-ssl]
server = 634-version-negotiation-server
client = 634-version-negotiation-client

[634-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[634-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-634]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[635-version-negotiation]
ssl_conf = 635-version-negotiation-ssl

[635-version-negotiation-ssl]
server = 635-version-negotiation-server
client = 635-version-negotiation-client

[635-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[635-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-635]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[636-version-negotiation]
ssl_conf = 636-version-negotiation-ssl

[636-version-negotiation-ssl]
server = 636-version-negotiation-server
client = 636-version-negotiation-client

[636-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[636-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-636]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[637-version-negotiation]
ssl_conf = 637-version-negotiation-ssl

[637-version-negotiation-ssl]
server = 637-version-negotiation-server
client = 637-version-negotiation-client

[637-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[637-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-637]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[638-version-negotiation]
ssl_conf = 638-version-negotiation-ssl

[638-version-negotiation-ssl]
server = 638-version-negotiation-server
client = 638-version-negotiation-client

[638-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[638-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-638]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[639-version-negotiation]
ssl_conf = 639-version-negotiation-ssl

[639-version-negotiation-ssl]
server = 639-version-negotiation-server
client = 639-version-negotiation-client

[639-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[639-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-639]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[640-version-negotiation]
ssl_conf = 640-version-negotiation-ssl

[640-version-negotiation-ssl]
server = 640-version-negotiation-server
client = 640-version-negotiation-client

[640-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[640-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-640]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[641-version-negotiation]
ssl_conf = 641-version-negotiation-ssl

[641-version-negotiation-ssl]
server = 641-version-negotiation-server
client = 641-version-negotiation-client

[641-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[641-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-641]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[642-version-negotiation]
ssl_conf = 642-version-negotiation-ssl

[642-version-negotiation-ssl]
server = 642-version-negotiation-server
client = 642-version-negotiation-client

[642-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[642-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-642]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[643-version-negotiation]
ssl_conf = 643-version-negotiation-ssl

[643-version-negotiation-ssl]
server = 643-version-negotiation-server
client = 643-version-negotiation-client

[643-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[643-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-643]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[644-version-negotiation]
ssl_conf = 644-version-negotiation-ssl

[644-version-negotiation-ssl]
server = 644-version-negotiation-server
client = 644-version-negotiation-client

[644-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[644-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-644]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[645-version-negotiation]
ssl_conf = 645-version-negotiation-ssl

[645-version-negotiation-ssl]
server = 645-version-negotiation-server
client = 645-version-negotiation-client

[645-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[645-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-645]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[646-version-negotiation]
ssl_conf = 646-version-negotiation-ssl

[646-version-negotiation-ssl]
server = 646-version-negotiation-server
client = 646-version-negotiation-client

[646-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[646-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-646]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[647-version-negotiation]
ssl_conf = 647-version-negotiation-ssl

[647-version-negotiation-ssl]
server = 647-version-negotiation-server
client = 647-version-negotiation-client

[647-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[647-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-647]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[648-version-negotiation]
ssl_conf = 648-version-negotiation-ssl

[648-version-negotiation-ssl]
server = 648-version-negotiation-server
client = 648-version-negotiation-client

[648-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[648-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-648]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[649-version-negotiation]
ssl_conf = 649-version-negotiation-ssl

[649-version-negotiation-ssl]
server = 649-version-negotiation-server
client = 649-version-negotiation-client

[649-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[649-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-649]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[650-version-negotiation]
ssl_conf = 650-version-negotiation-ssl

[650-version-negotiation-ssl]
server = 650-version-negotiation-server
client = 650-version-negotiation-client

[650-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[650-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-650]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[651-version-negotiation]
ssl_conf = 651-version-negotiation-ssl

[651-version-negotiation-ssl]
server = 651-version-negotiation-server
client = 651-version-negotiation-client

[651-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[651-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-651]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[652-version-negotiation]
ssl_conf = 652-version-negotiation-ssl

[652-version-negotiation-ssl]
server = 652-version-negotiation-server
client = 652-version-negotiation-client

[652-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[652-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-652]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[653-version-negotiation]
ssl_conf = 653-version-negotiation-ssl

[653-version-negotiation-ssl]
server = 653-version-negotiation-server
client = 653-version-negotiation-client

[653-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[653-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-653]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[654-version-negotiation]
ssl_conf = 654-version-negotiation-ssl

[654-version-negotiation-ssl]
server = 654-version-negotiation-server
client = 654-version-negotiation-client

[654-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[654-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-654]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[655-version-negotiation]
ssl_conf = 655-version-negotiation-ssl

[655-version-negotiation-ssl]
server = 655-version-negotiation-server
client = 655-version-negotiation-client

[655-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[655-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-655]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[656-version-negotiation]
ssl_conf = 656-version-negotiation-ssl

[656-version-negotiation-ssl]
server = 656-version-negotiation-server
client = 656-version-negotiation-client

[656-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[656-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-656]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[657-version-negotiation]
ssl_conf = 657-version-negotiation-ssl

[657-version-negotiation-ssl]
server = 657-version-negotiation-server
client = 657-version-negotiation-client

[657-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[657-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-657]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[658-version-negotiation]
ssl_conf = 658-version-negotiation-ssl

[658-version-negotiation-ssl]
server = 658-version-negotiation-server
client = 658-version-negotiation-client

[658-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[658-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-658]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[659-version-negotiation]
ssl_conf = 659-version-negotiation-ssl

[659-version-negotiation-ssl]
server = 659-version-negotiation-server
client = 659-version-negotiation-client

[659-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = SSLv3
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[659-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-659]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[660-version-negotiation]
ssl_conf = 660-version-negotiation-ssl

[660-version-negotiation-ssl]
server = 660-version-negotiation-server
client = 660-version-negotiation-client

[660-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[660-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-660]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[661-version-negotiation]
ssl_conf = 661-version-negotiation-ssl

[661-version-negotiation-ssl]
server = 661-version-negotiation-server
client = 661-version-negotiation-client

[661-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[661-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-661]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[662-version-negotiation]
ssl_conf = 662-version-negotiation-ssl

[662-version-negotiation-ssl]
server = 662-version-negotiation-server
client = 662-version-negotiation-client

[662-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[662-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-662]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[663-version-negotiation]
ssl_conf = 663-version-negotiation-ssl

[663-version-negotiation-ssl]
server = 663-version-negotiation-server
client = 663-version-negotiation-client

[663-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[663-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-663]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[664-version-negotiation]
ssl_conf = 664-version-negotiation-ssl

[664-version-negotiation-ssl]
server = 664-version-negotiation-server
client = 664-version-negotiation-client

[664-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[664-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-664]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[665-version-negotiation]
ssl_conf = 665-version-negotiation-ssl

[665-version-negotiation-ssl]
server = 665-version-negotiation-server
client = 665-version-negotiation-client

[665-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[665-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-665]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[666-version-negotiation]
ssl_conf = 666-version-negotiation-ssl

[666-version-negotiation-ssl]
server = 666-version-negotiation-server
client = 666-version-negotiation-client

[666-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[666-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-666]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[667-version-negotiation]
ssl_conf = 667-version-negotiation-ssl

[667-version-negotiation-ssl]
server = 667-version-negotiation-server
client = 667-version-negotiation-client

[667-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[667-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-667]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[668-version-negotiation]
ssl_conf = 668-version-negotiation-ssl

[668-version-negotiation-ssl]
server = 668-version-negotiation-server
client = 668-version-negotiation-client

[668-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[668-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-668]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[669-version-negotiation]
ssl_conf = 669-version-negotiation-ssl

[669-version-negotiation-ssl]
server = 669-version-negotiation-server
client = 669-version-negotiation-client

[669-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[669-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-669]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[670-version-negotiation]
ssl_conf = 670-version-negotiation-ssl

[670-version-negotiation-ssl]
server = 670-version-negotiation-server
client = 670-version-negotiation-client

[670-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[670-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-670]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[671-version-negotiation]
ssl_conf = 671-version-negotiation-ssl

[671-version-negotiation-ssl]
server = 671-version-negotiation-server
client = 671-version-negotiation-client

[671-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[671-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-671]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[672-version-negotiation]
ssl_conf = 672-version-negotiation-ssl

[672-version-negotiation-ssl]
server = 672-version-negotiation-server
client = 672-version-negotiation-client

[672-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[672-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-672]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[673-version-negotiation]
ssl_conf = 673-version-negotiation-ssl

[673-version-negotiation-ssl]
server = 673-version-negotiation-server
client = 673-version-negotiation-client

[673-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[673-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-673]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[674-version-negotiation]
ssl_conf = 674-version-negotiation-ssl

[674-version-negotiation-ssl]
server = 674-version-negotiation-server
client = 674-version-negotiation-client

[674-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[674-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-674]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[675-version-negotiation]
ssl_conf = 675-version-negotiation-ssl

[675-version-negotiation-ssl]
server = 675-version-negotiation-server
client = 675-version-negotiation-client

[675-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[675-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-675]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[676-version-negotiation]
ssl_conf = 676-version-negotiation-ssl

[676-version-negotiation-ssl]
server = 676-version-negotiation-server
client = 676-version-negotiation-client

[676-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[676-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-676]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[677-version-negotiation]
ssl_conf = 677-version-negotiation-ssl

[677-version-negotiation-ssl]
server = 677-version-negotiation-server
client = 677-version-negotiation-client

[677-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[677-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-677]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[678-version-negotiation]
ssl_conf = 678-version-negotiation-ssl

[678-version-negotiation-ssl]
server = 678-version-negotiation-server
client = 678-version-negotiation-client

[678-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[678-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-678]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Server


# ===========================================================

[679-ciphersuite-sanity-check-client]
ssl_conf = 679-ciphersuite-sanity-check-client-ssl

[679-ciphersuite-sanity-check-client-ssl]
server = 679-ciphersuite-sanity-check-client-server
client = 679-ciphersuite-sanity-check-client-client

[679-ciphersuite-sanity-check-client-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[679-ciphersuite-sanity-check-client-client]
CipherString = AES128-SHA
Ciphersuites = 
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-679]
ExpectedResult = ClientFail
Serialize = Server


# ===========================================================

[680-ciphersuite-sanity-check-server]
ssl_conf = 680-ciphersuite-sanity-check-server-ssl

[680-ciphersuite-sanity-check-server-ssl]
server = 680-ciphersuite-sanity-check-server-server
client = 680-ciphersuite-sanity-check-server-client

[680-ciphersuite-sanity-check-server-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = AES128-SHA
Ciphersuites = 
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[680-ciphersuite-sanity-check-server-client]
CipherString = AES128-SHA
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-680]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[681-verify-success]
ssl_conf = 681-verify-success-ssl

[681-verify-success-ssl]
server = 681-verify-success-server
client = 681-verify-success-client

[681-verify-success-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[681-verify-success-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-681]
ExpectedResult = Success
Serialize = Server


# ===========================================================

[682-verify-custom-reject]
ssl_conf = 682-verify-custom-reject-ssl

[682-verify-custom-reject-ssl]
server = 682-verify-custom-reject-server
client = 682-verify-custom-reject-client

[682-verify-custom-reject-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[682-verify-custom-reject-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-682]
ExpectedClientAlert = HandshakeFailure
ExpectedResult = ClientFail
Serialize = Server
client = 682-verify-custom-reject-client-extra

[682-verify-custom-reject-client-extra]
VerifyCallback = RejectAll


# ===========================================================

[683-verify-custom-allow]
ssl_conf = 683-verify-custom-allow-ssl

[683-verify-custom-allow-ssl]
server = 683-verify-custom-allow-server
client = 683-verify-custom-allow-client

[683-verify-custom-allow-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[683-verify-custom-allow-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-683]
ExpectedResult = Success
Serialize = Server
client = 683-verify-custom-allow-client-extra

[683-verify-custom-allow-client-extra]
VerifyCallback = AcceptAll


# ===========================================================

[684-noverify-success]
ssl_conf = 684-noverify-success-ssl

[684-noverify-success-ssl]
server = 684-noverify-success-server
client = 684-noverify-success-client

[684-noverify-success-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[684-noverify-success-client]
CipherString = DEFAULT

[test-684]
ExpectedResult = Success
Serialize = Server


# ===========================================================

[685-noverify-ignore-custom-reject]
ssl_conf = 685-noverify-ignore-custom-reject-ssl

[685-noverify-ignore-custom-reject-ssl]
server = 685-noverify-ignore-custom-reject-server
client = 685-noverify-ignore-custom-reject-client

[685-noverify-ignore-custom-reject-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[685-noverify-ignore-custom-reject-client]
CipherString = DEFAULT

[test-685]
ExpectedResult = Success
Serialize = Server
client = 685-noverify-ignore-custom-reject-client-extra

[685-noverify-ignore-custom-reject-client-extra]
VerifyCallback = RejectAll


# ===========================================================

[686-noverify-accept-custom-allow]
ssl_conf = 686-noverify-accept-custom-allow-ssl

[686-noverify-accept-custom-allow-ssl]
server = 686-noverify-accept-custom-allow-server
client = 686-noverify-accept-custom-allow-client

[686-noverify-accept-custom-allow-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[686-noverify-accept-custom-allow-client]
CipherString = DEFAULT

[test-686]
ExpectedResult = Success
Serialize = Server
client = 686-noverify-accept-custom-allow-client-extra

[686-noverify-accept-custom-allow-client-extra]
VerifyCallback = AcceptAll


# ===========================================================

[687-verify-fail-no-root]
ssl_conf = 687-verify-fail-no-root-ssl

[687-verify-fail-no-root-ssl]
server = 687-verify-fail-no-root-server
client = 687-verify-fail-no-root-client

[687-verify-fail-no-root-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[687-verify-fail-no-root-client]
CipherString = DEFAULT
VerifyMode = Peer

[test-687]
ExpectedClientAlert = UnknownCA
ExpectedResult = ClientFail
Serialize = Server


# ===========================================================

[688-verify-custom-success-no-root]
ssl_conf = 688-verify-custom-success-no-root-ssl

[688-verify-custom-success-no-root-ssl]
server = 688-verify-custom-success-no-root-server
client = 688-verify-custom-success-no-root-client

[688-verify-custom-success-no-root-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[688-verify-custom-success-no-root-client]
CipherString = DEFAULT
VerifyMode = Peer

[test-688]
ExpectedResult = Success
Serialize = Server
client = 688-verify-custom-success-no-root-client-extra

[688-verify-custom-success-no-root-client-extra]
VerifyCallback = AcceptAll


# ===========================================================

[689-verify-custom-fail-no-root]
ssl_conf = 689-verify-custom-fail-no-root-ssl

[689-verify-custom-fail-no-root-ssl]
server = 689-verify-custom-fail-no-root-server
client = 689-verify-custom-fail-no-root-client

[689-verify-custom-fail-no-root-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[689-verify-custom-fail-no-root-client]
CipherString = DEFAULT
VerifyMode = Peer

[test-689]
ExpectedClientAlert = HandshakeFailure
ExpectedResult = ClientFail
Serialize = Server
client = 689-verify-custom-fail-no-root-client-extra

[689-verify-custom-fail-no-root-client-extra]
VerifyCallback = RejectAll


# ===========================================================

[690-server-auth-flex]
ssl_conf = 690-server-auth-flex-ssl

[690-server-auth-flex-ssl]
server = 690-server-auth-flex-server
client = 690-server-auth-flex-client

[690-server-auth-flex-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[690-server-auth-flex-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-690]
ExpectedResult = Success
Serialize = Server


# ===========================================================

[691-client-auth-flex-request]
ssl_conf = 691-client-auth-flex-request-ssl

[691-client-auth-flex-request-ssl]
server = 691-client-auth-flex-request-server
client = 691-client-auth-flex-request-client

[691-client-auth-flex-request-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem
VerifyMode = Request

[691-client-auth-flex-request-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-691]
ExpectedResult = Success
Serialize = Server


# ===========================================================

[692-client-auth-flex-require-fail]
ssl_conf = 692-client-auth-flex-require-fail-ssl

[692-client-auth-flex-require-fail-ssl]
server = 692-client-auth-flex-require-fail-server
client = 692-client-auth-flex-require-fail-client

[692-client-auth-flex-require-fail-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/root-cert.pem
VerifyMode = Require

[692-client-auth-flex-require-fail-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-692]
ExpectedResult = ServerFail
ExpectedServerAlert = CertificateRequired
Serialize = Server


# ===========================================================

[693-client-auth-flex-require]
ssl_conf = 693-client-auth-flex-require-ssl

[693-client-auth-flex-require-ssl]
server = 693-client-auth-flex-require-server
client = 693-client-auth-flex-require-client

[693-client-auth-flex-require-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/root-cert.pem
VerifyMode = Request

[693-client-auth-flex-require-client]
Certificate = ${ENV::TEST_CERTS_DIR}/ee-client-chain.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/ee-key.pem
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-693]
ExpectedClientCANames = empty
ExpectedClientCertType = RSA
ExpectedResult = Success
Serialize = Server


# ===========================================================

[694-client-auth-flex-require-non-empty-names]
ssl_conf = 694-client-auth-flex-require-non-empty-names-ssl

[694-client-auth-flex-require-non-empty-names-ssl]
server = 694-client-auth-flex-require-non-empty-names-server
client = 694-client-auth-flex-require-non-empty-names-client

[694-client-auth-flex-require-non-empty-names-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
ClientCAFile = ${ENV::TEST_CERTS_DIR}/root-cert.pem
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/root-cert.pem
VerifyMode = Request

[694-client-auth-flex-require-non-empty-names-client]
Certificate = ${ENV::TEST_CERTS_DIR}/ee-client-chain.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/ee-key.pem
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-694]
ExpectedClientCANames = ${ENV::TEST_CERTS_DIR}/root-cert.pem
ExpectedClientCertType = RSA
ExpectedResult = Success
Serialize = Server


# ===========================================================

[695-client-auth-flex-noroot]
ssl_conf = 695-client-auth-flex-noroot-ssl

[695-client-auth-flex-noroot-ssl]
server = 695-client-auth-flex-noroot-server
client = 695-client-auth-flex-noroot-client

[695-client-auth-flex-noroot-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem
VerifyMode = Require

[695-client-auth-flex-noroot-client]
Certificate = ${ENV::TEST_CERTS_DIR}/ee-client-chain.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/ee-key.pem
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-695]
ExpectedResult = ServerFail
ExpectedServerAlert = UnknownCA
Serialize = Server


# ===========================================================

[696-server-auth-TLSv1]
ssl_conf = 696-server-auth-TLSv1-ssl

[696-server-auth-TLSv1-ssl]
server = 696-server-auth-TLSv1-server
client = 696-server-auth-TLSv1-client

[696-server-auth-TLSv1-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[696-server-auth-TLSv1-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-696]
ExpectedResult = Success
Serialize = Server


# ===========================================================

[697-client-auth-TLSv1-request]
ssl_conf = 697-client-auth-TLSv1-request-ssl

[697-client-auth-TLSv1-request-ssl]
server = 697-client-auth-TLSv1-request-server
client = 697-client-auth-TLSv1-request-client

[697-client-auth-TLSv1-request-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem
VerifyMode = Request

[697-client-auth-TLSv1-request-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-697]
ExpectedResult = Success
Serialize = Server


# ===========================================================

[698-client-auth-TLSv1-require-fail]
ssl_conf = 698-client-auth-TLSv1-require-fail-ssl

[698-client-auth-TLSv1-require-fail-ssl]
server = 698-client-auth-TLSv1-require-fail-server
client = 698-client-auth-TLSv1-require-fail-client

[698-client-auth-TLSv1-require-fail-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/root-cert.pem
VerifyMode = Require

[698-client-auth-TLSv1-require-fail-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-698]
ExpectedResult = ServerFail
ExpectedServerAlert = HandshakeFailure
Serialize = Server


# ===========================================================

[699-client-auth-TLSv1-require]
ssl_conf = 699-client-auth-TLSv1-require-ssl

[699-client-auth-TLSv1-require-ssl]
server = 699-client-auth-TLSv1-require-server
client = 699-client-auth-TLSv1-require-client

[699-client-auth-TLSv1-require-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/root-cert.pem
VerifyMode = Request

[699-client-auth-TLSv1-require-client]
Certificate = ${ENV::TEST_CERTS_DIR}/ee-client-chain.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/ee-key.pem
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-699]
ExpectedClientCANames = empty
ExpectedClientCertType = RSA
ExpectedResult = Success
Serialize = Server


# ===========================================================

[700-client-auth-TLSv1-require-non-empty-names]
ssl_conf = 700-client-auth-TLSv1-require-non-empty-names-ssl

[700-client-auth-TLSv1-require-non-empty-names-ssl]
server = 700-client-auth-TLSv1-require-non-empty-names-server
client = 700-client-auth-TLSv1-require-non-empty-names-client

[700-client-auth-TLSv1-require-non-empty-names-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
ClientCAFile = ${ENV::TEST_CERTS_DIR}/root-cert.pem
MaxProtocol = TLSv1
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/root-cert.pem
VerifyMode = Request

[700-client-auth-TLSv1-require-non-empty-names-client]
Certificate = ${ENV::TEST_CERTS_DIR}/ee-client-chain.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/ee-key.pem
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-700]
ExpectedClientCANames = ${ENV::TEST_CERTS_DIR}/root-cert.pem
ExpectedClientCertType = RSA
ExpectedResult = Success
Serialize = Server


# ===========================================================

[701-client-auth-TLSv1-noroot]
ssl_conf = 701-client-auth-TLSv1-noroot-ssl

[701-client-auth-TLSv1-noroot-ssl]
server = 701-client-auth-TLSv1-noroot-server
client = 701-client-auth-TLSv1-noroot-client

[701-client-auth-TLSv1-noroot-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem
VerifyMode = Require

[701-client-auth-TLSv1-noroot-client]
Certificate = ${ENV::TEST_CERTS_DIR}/ee-client-chain.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/ee-key.pem
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-701]
ExpectedResult = ServerFail
ExpectedServerAlert = UnknownCA
Serialize = Server


# ===========================================================

[702-server-auth-TLSv1.1]
ssl_conf = 702-server-auth-TLSv1.1-ssl

[702-server-auth-TLSv1.1-ssl]
server = 702-server-auth-TLSv1.1-server
client = 702-server-auth-TLSv1.1-client

[702-server-auth-TLSv1.1-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[702-server-auth-TLSv1.1-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-702]
ExpectedResult = Success
Serialize = Server


# ===========================================================

[703-client-auth-TLSv1.1-request]
ssl_conf = 703-client-auth-TLSv1.1-request-ssl

[703-client-auth-TLSv1.1-request-ssl]
server = 703-client-auth-TLSv1.1-request-server
client = 703-client-auth-TLSv1.1-request-client

[703-client-auth-TLSv1.1-request-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem
VerifyMode = Request

[703-client-auth-TLSv1.1-request-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-703]
ExpectedResult = Success
Serialize = Server


# ===========================================================

[704-client-auth-TLSv1.1-require-fail]
ssl_conf = 704-client-auth-TLSv1.1-require-fail-ssl

[704-client-auth-TLSv1.1-require-fail-ssl]
server = 704-client-auth-TLSv1.1-require-fail-server
client = 704-client-auth-TLSv1.1-require-fail-client

[704-client-auth-TLSv1.1-require-fail-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/root-cert.pem
VerifyMode = Require

[704-client-auth-TLSv1.1-require-fail-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-704]
ExpectedResult = ServerFail
ExpectedServerAlert = HandshakeFailure
Serialize = Server


# ===========================================================

[705-client-auth-TLSv1.1-require]
ssl_conf = 705-client-auth-TLSv1.1-require-ssl

[705-client-auth-TLSv1.1-require-ssl]
server = 705-client-auth-TLSv1.1-require-server
client = 705-client-auth-TLSv1.1-require-client

[705-client-auth-TLSv1.1-require-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/root-cert.pem
VerifyMode = Request

[705-client-auth-TLSv1.1-require-client]
Certificate = ${ENV::TEST_CERTS_DIR}/ee-client-chain.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/ee-key.pem
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-705]
ExpectedClientCANames = empty
ExpectedClientCertType = RSA
ExpectedResult = Success
Serialize = Server


# ===========================================================

[706-client-auth-TLSv1.1-require-non-empty-names]
ssl_conf = 706-client-auth-TLSv1.1-require-non-empty-names-ssl

[706-client-auth-TLSv1.1-require-non-empty-names-ssl]
server = 706-client-auth-TLSv1.1-require-non-empty-names-server
client = 706-client-auth-TLSv1.1-require-non-empty-names-client

[706-client-auth-TLSv1.1-require-non-empty-names-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
ClientCAFile = ${ENV::TEST_CERTS_DIR}/root-cert.pem
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/root-cert.pem
VerifyMode = Request

[706-client-auth-TLSv1.1-require-non-empty-names-client]
Certificate = ${ENV::TEST_CERTS_DIR}/ee-client-chain.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/ee-key.pem
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-706]
ExpectedClientCANames = ${ENV::TEST_CERTS_DIR}/root-cert.pem
ExpectedClientCertType = RSA
ExpectedResult = Success
Serialize = Server


# ===========================================================

[707-client-auth-TLSv1.1-noroot]
ssl_conf = 707-client-auth-TLSv1.1-noroot-ssl

[707-client-auth-TLSv1.1-noroot-ssl]
server = 707-client-auth-TLSv1.1-noroot-server
client = 707-client-auth-TLSv1.1-noroot-client

[707-client-auth-TLSv1.1-noroot-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem
VerifyMode = Require

[707-client-auth-TLSv1.1-noroot-client]
Certificate = ${ENV::TEST_CERTS_DIR}/ee-client-chain.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/ee-key.pem
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-707]
ExpectedResult = ServerFail
ExpectedServerAlert = UnknownCA
Serialize = Server


# ===========================================================

[708-server-auth-TLSv1.2]
ssl_conf = 708-server-auth-TLSv1.2-ssl

[708-server-auth-TLSv1.2-ssl]
server = 708-server-auth-TLSv1.2-server
client = 708-server-auth-TLSv1.2-client

[708-server-auth-TLSv1.2-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[708-server-auth-TLSv1.2-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-708]
ExpectedResult = Success
Serialize = Server


# ===========================================================

[709-client-auth-TLSv1.2-request]
ssl_conf = 709-client-auth-TLSv1.2-request-ssl

[709-client-auth-TLSv1.2-request-ssl]
server = 709-client-auth-TLSv1.2-request-server
client = 709-client-auth-TLSv1.2-request-client

[709-client-auth-TLSv1.2-request-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem
VerifyMode = Request

[709-client-auth-TLSv1.2-request-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-709]
ExpectedResult = Success
Serialize = Server


# ===========================================================

[710-client-auth-TLSv1.2-require-fail]
ssl_conf = 710-client-auth-TLSv1.2-require-fail-ssl

[710-client-auth-TLSv1.2-require-fail-ssl]
server = 710-client-auth-TLSv1.2-require-fail-server
client = 710-client-auth-TLSv1.2-require-fail-client

[710-client-auth-TLSv1.2-require-fail-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/root-cert.pem
VerifyMode = Require

[710-client-auth-TLSv1.2-require-fail-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-710]
ExpectedResult = ServerFail
ExpectedServerAlert = HandshakeFailure
Serialize = Server


# ===========================================================

[711-client-auth-TLSv1.2-require]
ssl_conf = 711-client-auth-TLSv1.2-require-ssl

[711-client-auth-TLSv1.2-require-ssl]
server = 711-client-auth-TLSv1.2-require-server
client = 711-client-auth-TLSv1.2-require-client

[711-client-auth-TLSv1.2-require-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
ClientSignatureAlgorithms = SHA256+RSA
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/root-cert.pem
VerifyMode = Request

[711-client-auth-TLSv1.2-require-client]
Certificate = ${ENV::TEST_CERTS_DIR}/ee-client-chain.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/ee-key.pem
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-711]
ExpectedClientCANames = empty
ExpectedClientCertType = RSA
ExpectedClientSignHash = SHA256
ExpectedClientSignType = RSA
ExpectedResult = Success
Serialize = Server


# ===========================================================

[712-client-auth-TLSv1.2-require-non-empty-names]
ssl_conf = 712-client-auth-TLSv1.2-require-non-empty-names-ssl

[712-client-auth-TLSv1.2-require-non-empty-names-ssl]
server = 712-client-auth-TLSv1.2-require-non-empty-names-server
client = 712-client-auth-TLSv1.2-require-non-empty-names-client

[712-client-auth-TLSv1.2-require-non-empty-names-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
ClientCAFile = ${ENV::TEST_CERTS_DIR}/root-cert.pem
ClientSignatureAlgorithms = SHA256+RSA
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/root-cert.pem
VerifyMode = Request

[712-client-auth-TLSv1.2-require-non-empty-names-client]
Certificate = ${ENV::TEST_CERTS_DIR}/ee-client-chain.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/ee-key.pem
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-712]
ExpectedClientCANames = ${ENV::TEST_CERTS_DIR}/root-cert.pem
ExpectedClientCertType = RSA
ExpectedClientSignHash = SHA256
ExpectedClientSignType = RSA
ExpectedResult = Success
Serialize = Server


# ===========================================================

[713-client-auth-TLSv1.2-noroot]
ssl_conf = 713-client-auth-TLSv1.2-noroot-ssl

[713-client-auth-TLSv1.2-noroot-ssl]
server = 713-client-auth-TLSv1.2-noroot-server
client = 713-client-auth-TLSv1.2-noroot-client

[713-client-auth-TLSv1.2-noroot-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem
VerifyMode = Require

[713-client-auth-TLSv1.2-noroot-client]
Certificate = ${ENV::TEST_CERTS_DIR}/ee-client-chain.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/ee-key.pem
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-713]
ExpectedResult = ServerFail
ExpectedServerAlert = UnknownCA
Serialize = Server


# ===========================================================

[714-SNI-switch-context]
ssl_conf = 714-SNI-switch-context-ssl

[714-SNI-switch-context-ssl]
server = 714-SNI-switch-context-server
client = 714-SNI-switch-context-client
server2 = 714-SNI-switch-context-server

[714-SNI-switch-context-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[714-SNI-switch-context-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-714]
ExpectedResult = Success
ExpectedServerName = server2
Serialize = Server
server = 714-SNI-switch-context-server-extra
server2 = 714-SNI-switch-context-server-extra
client = 714-SNI-switch-context-client-extra

[714-SNI-switch-context-server-extra]
ServerNameCallback = IgnoreMismatch

[714-SNI-switch-context-client-extra]
ServerName = server2


# ===========================================================

[715-SNI-keep-context]
ssl_conf = 715-SNI-keep-context-ssl

[715-SNI-keep-context-ssl]
server = 715-SNI-keep-context-server
client = 715-SNI-keep-context-client
server2 = 715-SNI-keep-context-server

[715-SNI-keep-context-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[715-SNI-keep-context-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-715]
ExpectedResult = Success
ExpectedServerName = server1
Serialize = Server
server = 715-SNI-keep-context-server-extra
server2 = 715-SNI-keep-context-server-extra
client = 715-SNI-keep-context-client-extra

[715-SNI-keep-context-server-extra]
ServerNameCallback = IgnoreMismatch

[715-SNI-keep-context-client-extra]
ServerName = server1


# ===========================================================

[716-SNI-no-server-support]
ssl_conf = 716-SNI-no-server-support-ssl

[716-SNI-no-server-support-ssl]
server = 716-SNI-no-server-support-server
client = 716-SNI-no-server-support-client

[716-SNI-no-server-support-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[716-SNI-no-server-support-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-716]
ExpectedResult = Success
Serialize = Server
client = 716-SNI-no-server-support-client-extra

[716-SNI-no-server-support-client-extra]
ServerName = server1


# ===========================================================

[717-SNI-no-client-support]
ssl_conf = 717-SNI-no-client-support-ssl

[717-SNI-no-client-support-ssl]
server = 717-SNI-no-client-support-server
client = 717-SNI-no-client-support-client
server2 = 717-SNI-no-client-support-server

[717-SNI-no-client-support-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[717-SNI-no-client-support-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-717]
ExpectedResult = Success
ExpectedServerName = server1
Serialize = Server
server = 717-SNI-no-client-support-server-extra
server2 = 717-SNI-no-client-support-server-extra

[717-SNI-no-client-support-server-extra]
ServerNameCallback = IgnoreMismatch


# ===========================================================

[718-SNI-bad-sni-ignore-mismatch]
ssl_conf = 718-SNI-bad-sni-ignore-mismatch-ssl

[718-SNI-bad-sni-ignore-mismatch-ssl]
server = 718-SNI-bad-sni-ignore-mismatch-server
client = 718-SNI-bad-sni-ignore-mismatch-client
server2 = 718-SNI-bad-sni-ignore-mismatch-server

[718-SNI-bad-sni-ignore-mismatch-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[718-SNI-bad-sni-ignore-mismatch-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-718]
ExpectedResult = Success
ExpectedServerName = server1
Serialize = Server
server = 718-SNI-bad-sni-ignore-mismatch-server-extra
server2 = 718-SNI-bad-sni-ignore-mismatch-server-extra
client = 718-SNI-bad-sni-ignore-mismatch-client-extra

[718-SNI-bad-sni-ignore-mismatch-server-extra]
ServerNameCallback = IgnoreMismatch

[718-SNI-bad-sni-ignore-mismatch-client-extra]
ServerName = invalid


# ===========================================================

[719-SNI-bad-sni-reject-mismatch]
ssl_conf = 719-SNI-bad-sni-reject-mismatch-ssl

[719-SNI-bad-sni-reject-mismatch-ssl]
server = 719-SNI-bad-sni-reject-mismatch-server
client = 719-SNI-bad-sni-reject-mismatch-client
server2 = 719-SNI-bad-sni-reject-mismatch-server

[719-SNI-bad-sni-reject-mismatch-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[719-SNI-bad-sni-reject-mismatch-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-719]
ExpectedResult = ServerFail
ExpectedServerAlert = UnrecognizedName
Serialize = Server
server = 719-SNI-bad-sni-reject-mismatch-server-extra
server2 = 719-SNI-bad-sni-reject-mismatch-server-extra
client = 719-SNI-bad-sni-reject-mismatch-client-extra

[719-SNI-bad-sni-reject-mismatch-server-extra]
ServerNameCallback = RejectMismatch

[719-SNI-bad-sni-reject-mismatch-client-extra]
ServerName = invalid


# ===========================================================

[720-SNI-bad-clienthello-sni-ignore-mismatch]
ssl_conf = 720-SNI-bad-clienthello-sni-ignore-mismatch-ssl

[720-SNI-bad-clienthello-sni-ignore-mismatch-ssl]
server = 720-SNI-bad-clienthello-sni-ignore-mismatch-server
client = 720-SNI-bad-clienthello-sni-ignore-mismatch-client
server2 = 720-SNI-bad-clienthello-sni-ignore-mismatch-server

[720-SNI-bad-clienthello-sni-ignore-mismatch-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[720-SNI-bad-clienthello-sni-ignore-mismatch-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-720]
ExpectedResult = Success
ExpectedServerName = server1
Serialize = Server
server = 720-SNI-bad-clienthello-sni-ignore-mismatch-server-extra
server2 = 720-SNI-bad-clienthello-sni-ignore-mismatch-server-extra
client = 720-SNI-bad-clienthello-sni-ignore-mismatch-client-extra

[720-SNI-bad-clienthello-sni-ignore-mismatch-server-extra]
ServerNameCallback = ClientHelloIgnoreMismatch

[720-SNI-bad-clienthello-sni-ignore-mismatch-client-extra]
ServerName = invalid


# ===========================================================

[721-SNI-bad-clienthello-sni-reject-mismatch]
ssl_conf = 721-SNI-bad-clienthello-sni-reject-mismatch-ssl

[721-SNI-bad-clienthello-sni-reject-mismatch-ssl]
server = 721-SNI-bad-clienthello-sni-reject-mismatch-server
client = 721-SNI-bad-clienthello-sni-reject-mismatch-client
server2 = 721-SNI-bad-clienthello-sni-reject-mismatch-server

[721-SNI-bad-clienthello-sni-reject-mismatch-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[721-SNI-bad-clienthello-sni-reject-mismatch-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-721]
ExpectedResult = ServerFail
ExpectedServerAlert = UnrecognizedName
Serialize = Server
server = 721-SNI-bad-clienthello-sni-reject-mismatch-server-extra
server2 = 721-SNI-bad-clienthello-sni-reject-mismatch-server-extra
client = 721-SNI-bad-clienthello-sni-reject-mismatch-client-extra

[721-SNI-bad-clienthello-sni-reject-mismatch-server-extra]
ServerNameCallback = ClientHelloRejectMismatch

[721-SNI-bad-clienthello-sni-reject-mismatch-client-extra]
ServerName = invalid


# ===========================================================

[722-SNI-clienthello-disable-v12]
ssl_conf = 722-SNI-clienthello-disable-v12-ssl

[722-SNI-clienthello-disable-v12-ssl]
server = 722-SNI-clienthello-disable-v12-server
client = 722-SNI-clienthello-disable-v12-client
server2 = 722-SNI-clienthello-disable-v12-server

[722-SNI-clienthello-disable-v12-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[722-SNI-clienthello-disable-v12-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-722]
ExpectedProtocol = TLSv1.1
ExpectedServerName = server2
Serialize = Server
server = 722-SNI-clienthello-disable-v12-server-extra
server2 = 722-SNI-clienthello-disable-v12-server-extra
client = 722-SNI-clienthello-disable-v12-client-extra

[722-SNI-clienthello-disable-v12-server-extra]
ServerNameCallback = ClientHelloNoV12

[722-SNI-clienthello-disable-v12-client-extra]
ServerName = server2


# ===========================================================

[723-sni-session-ticket]
ssl_conf = 723-sni-session-ticket-ssl

[723-sni-session-ticket-ssl]
server = 723-sni-session-ticket-server
client = 723-sni-session-ticket-client
server2 = 723-sni-session-ticket-server2

[723-sni-session-ticket-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[723-sni-session-ticket-server2]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[723-sni-session-ticket-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
Options = SessionTicket
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-723]
ExpectedResult = Success
Serialize = Server
SessionTicketExpected = No
server = 723-sni-session-ticket-server-extra
client = 723-sni-session-ticket-client-extra

[723-sni-session-ticket-server-extra]
BrokenSessionTicket = Yes

[723-sni-session-ticket-client-extra]
ServerName = server1


# ===========================================================

[724-sni-session-ticket]
ssl_conf = 724-sni-session-ticket-ssl

[724-sni-session-ticket-ssl]
server = 724-sni-session-ticket-server
client = 724-sni-session-ticket-client
server2 = 724-sni-session-ticket-server2

[724-sni-session-ticket-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[724-sni-session-ticket-server2]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[724-sni-session-ticket-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
Options = SessionTicket
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-724]
ExpectedResult = Success
ExpectedServerName = server1
Serialize = Server
SessionIdExpected = Yes
SessionTicketExpected = Yes
server = 724-sni-session-ticket-server-extra
client = 724-sni-session-ticket-client-extra

[724-sni-session-ticket-server-extra]
ServerNameCallback = IgnoreMismatch

[724-sni-session-ticket-client-extra]
ServerName = server1


# ===========================================================

[725-sni-session-ticket]
ssl_conf = 725-sni-session-ticket-ssl

[725-sni-session-ticket-ssl]
server = 725-sni-session-ticket-server
client = 725-sni-session-ticket-client
server2 = 725-sni-session-ticket-server2

[725-sni-session-ticket-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[725-sni-session-ticket-server2]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[725-sni-session-ticket-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
Options = SessionTicket
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-725]
ExpectedResult = Success
ExpectedServerName = server2
Serialize = Server
SessionIdExpected = Yes
SessionTicketExpected = Yes
server = 725-sni-session-ticket-server-extra
client = 725-sni-session-ticket-client-extra

[725-sni-session-ticket-server-extra]
ServerNameCallback = IgnoreMismatch

[725-sni-session-ticket-client-extra]
ServerName = server2


# ===========================================================

[726-sni-session-ticket]
ssl_conf = 726-sni-session-ticket-ssl

[726-sni-session-ticket-ssl]
server = 726-sni-session-ticket-server
client = 726-sni-session-ticket-client
server2 = 726-sni-session-ticket-server2

[726-sni-session-ticket-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[726-sni-session-ticket-server2]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = -SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[726-sni-session-ticket-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
Options = SessionTicket
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-726]
ExpectedResult = Success
ExpectedServerName = server1
Serialize = Server
SessionIdExpected = Yes
SessionTicketExpected = Yes
server = 726-sni-session-ticket-server-extra
client = 726-sni-session-ticket-client-extra

[726-sni-session-ticket-server-extra]
ServerNameCallback = IgnoreMismatch

[726-sni-session-ticket-client-extra]
ServerName = server1


# ===========================================================

[727-sni-session-ticket]
ssl_conf = 727-sni-session-ticket-ssl

[727-sni-session-ticket-ssl]
server = 727-sni-session-ticket-server
client = 727-sni-session-ticket-client
server2 = 727-sni-session-ticket-server2

[727-sni-session-ticket-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[727-sni-session-ticket-server2]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = -SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[727-sni-session-ticket-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
Options = SessionTicket
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-727]
ExpectedResult = Success
ExpectedServerName = server2
Serialize = Server
SessionIdExpected = Yes
SessionTicketExpected = No
server = 727-sni-session-ticket-server-extra
client = 727-sni-session-ticket-client-extra

[727-sni-session-ticket-server-extra]
ServerNameCallback = IgnoreMismatch

[727-sni-session-ticket-client-extra]
ServerName = server2


# ===========================================================

[728-sni-session-ticket]
ssl_conf = 728-sni-session-ticket-ssl

[728-sni-session-ticket-ssl]
server = 728-sni-session-ticket-server
client = 728-sni-session-ticket-client
server2 = 728-sni-session-ticket-server2

[728-sni-session-ticket-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = -SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[728-sni-session-ticket-server2]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[728-sni-session-ticket-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
Options = SessionTicket
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-728]
ExpectedResult = Success
ExpectedServerName = server1
Serialize = Server
SessionIdExpected = Yes
SessionTicketExpected = No
server = 728-sni-session-ticket-server-extra
client = 728-sni-session-ticket-client-extra

[728-sni-session-ticket-server-extra]
ServerNameCallback = IgnoreMismatch

[728-sni-session-ticket-client-extra]
ServerName = server1


# ===========================================================

[729-sni-session-ticket]
ssl_conf = 729-sni-session-ticket-ssl

[729-sni-session-ticket-ssl]
server = 729-sni-session-ticket-server
client = 729-sni-session-ticket-client
server2 = 729-sni-session-ticket-server2

[729-sni-session-ticket-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = -SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[729-sni-session-ticket-server2]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[729-sni-session-ticket-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
Options = SessionTicket
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-729]
ExpectedResult = Success
ExpectedServerName = server2
Serialize = Server
SessionIdExpected = Yes
SessionTicketExpected = No
server = 729-sni-session-ticket-server-extra
client = 729-sni-session-ticket-client-extra

[729-sni-session-ticket-server-extra]
ServerNameCallback = IgnoreMismatch

[729-sni-session-ticket-client-extra]
ServerName = server2


# ===========================================================

[730-sni-session-ticket]
ssl_conf = 730-sni-session-ticket-ssl

[730-sni-session-ticket-ssl]
server = 730-sni-session-ticket-server
client = 730-sni-session-ticket-client
server2 = 730-sni-session-ticket-server2

[730-sni-session-ticket-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = -SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[730-sni-session-ticket-server2]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = -SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[730-sni-session-ticket-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
Options = SessionTicket
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-730]
ExpectedResult = Success
ExpectedServerName = server1
Serialize = Server
SessionIdExpected = Yes
SessionTicketExpected = No
server = 730-sni-session-ticket-server-extra
client = 730-sni-session-ticket-client-extra

[730-sni-session-ticket-server-extra]
ServerNameCallback = IgnoreMismatch

[730-sni-session-ticket-client-extra]
ServerName = server1


# ===========================================================

[731-sni-session-ticket]
ssl_conf = 731-sni-session-ticket-ssl

[731-sni-session-ticket-ssl]
server = 731-sni-session-ticket-server
client = 731-sni-session-ticket-client
server2 = 731-sni-session-ticket-server2

[731-sni-session-ticket-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = -SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[731-sni-session-ticket-server2]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = -SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[731-sni-session-ticket-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
Options = SessionTicket
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-731]
ExpectedResult = Success
ExpectedServerName = server2
Serialize = Server
SessionIdExpected = Yes
SessionTicketExpected = No
server = 731-sni-session-ticket-server-extra
client = 731-sni-session-ticket-client-extra

[731-sni-session-ticket-server-extra]
ServerNameCallback = IgnoreMismatch

[731-sni-session-ticket-client-extra]
ServerName = server2


# ===========================================================

[732-sni-session-ticket]
ssl_conf = 732-sni-session-ticket-ssl

[732-sni-session-ticket-ssl]
server = 732-sni-session-ticket-server
client = 732-sni-session-ticket-client
server2 = 732-sni-session-ticket-server2

[732-sni-session-ticket-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[732-sni-session-ticket-server2]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[732-sni-session-ticket-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
Options = -SessionTicket
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-732]
ExpectedResult = Success
ExpectedServerName = server1
Serialize = Server
SessionIdExpected = Yes
SessionTicketExpected = No
server = 732-sni-session-ticket-server-extra
client = 732-sni-session-ticket-client-extra

[732-sni-session-ticket-server-extra]
ServerNameCallback = IgnoreMismatch

[732-sni-session-ticket-client-extra]
ServerName = server1


# ===========================================================

[733-sni-session-ticket]
ssl_conf = 733-sni-session-ticket-ssl

[733-sni-session-ticket-ssl]
server = 733-sni-session-ticket-server
client = 733-sni-session-ticket-client
server2 = 733-sni-session-ticket-server2

[733-sni-session-ticket-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[733-sni-session-ticket-server2]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[733-sni-session-ticket-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
Options = -SessionTicket
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-733]
ExpectedResult = Success
ExpectedServerName = server2
Serialize = Server
SessionIdExpected = Yes
SessionTicketExpected = No
server = 733-sni-session-ticket-server-extra
client = 733-sni-session-ticket-client-extra

[733-sni-session-ticket-server-extra]
ServerNameCallback = IgnoreMismatch

[733-sni-session-ticket-client-extra]
ServerName = server2


# ===========================================================

[734-sni-session-ticket]
ssl_conf = 734-sni-session-ticket-ssl

[734-sni-session-ticket-ssl]
server = 734-sni-session-ticket-server
client = 734-sni-session-ticket-client
server2 = 734-sni-session-ticket-server2

[734-sni-session-ticket-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[734-sni-session-ticket-server2]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = -SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[734-sni-session-ticket-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
Options = -SessionTicket
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-734]
ExpectedResult = Success
ExpectedServerName = server1
Serialize = Server
SessionIdExpected = Yes
SessionTicketExpected = No
server = 734-sni-session-ticket-server-extra
client = 734-sni-session-ticket-client-extra

[734-sni-session-ticket-server-extra]
ServerNameCallback = IgnoreMismatch

[734-sni-session-ticket-client-extra]
ServerName = server1


# ===========================================================

[735-sni-session-ticket]
ssl_conf = 735-sni-session-ticket-ssl

[735-sni-session-ticket-ssl]
server = 735-sni-session-ticket-server
client = 735-sni-session-ticket-client
server2 = 735-sni-session-ticket-server2

[735-sni-session-ticket-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[735-sni-session-ticket-server2]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = -SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[735-sni-session-ticket-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
Options = -SessionTicket
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-735]
ExpectedResult = Success
ExpectedServerName = server2
Serialize = Server
SessionIdExpected = Yes
SessionTicketExpected = No
server = 735-sni-session-ticket-server-extra
client = 735-sni-session-ticket-client-extra

[735-sni-session-ticket-server-extra]
ServerNameCallback = IgnoreMismatch

[735-sni-session-ticket-client-extra]
ServerName = server2


# ===========================================================

[736-sni-session-ticket]
ssl_conf = 736-sni-session-ticket-ssl

[736-sni-session-ticket-ssl]
server = 736-sni-session-ticket-server
client = 736-sni-session-ticket-client
server2 = 736-sni-session-ticket-server2

[736-sni-session-ticket-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = -SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[736-sni-session-ticket-server2]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[736-sni-session-ticket-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
Options = -SessionTicket
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-736]
ExpectedResult = Success
ExpectedServerName = server1
Serialize = Server
SessionIdExpected = Yes
SessionTicketExpected = No
server = 736-sni-session-ticket-server-extra
client = 736-sni-session-ticket-client-extra

[736-sni-session-ticket-server-extra]
ServerNameCallback = IgnoreMismatch

[736-sni-session-ticket-client-extra]
ServerName = server1


# ===========================================================

[737-sni-session-ticket]
ssl_conf = 737-sni-session-ticket-ssl

[737-sni-session-ticket-ssl]
server = 737-sni-session-ticket-server
client = 737-sni-session-ticket-client
server2 = 737-sni-session-ticket-server2

[737-sni-session-ticket-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = -SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[737-sni-session-ticket-server2]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[737-sni-session-ticket-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
Options = -SessionTicket
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-737]
ExpectedResult = Success
ExpectedServerName = server2
Serialize = Server
SessionIdExpected = Yes
SessionTicketExpected = No
server = 737-sni-session-ticket-server-extra
client = 737-sni-session-ticket-client-extra

[737-sni-session-ticket-server-extra]
ServerNameCallback = IgnoreMismatch

[737-sni-session-ticket-client-extra]
ServerName = server2


# ===========================================================

[738-sni-session-ticket]
ssl_conf = 738-sni-session-ticket-ssl

[738-sni-session-ticket-ssl]
server = 738-sni-session-ticket-server
client = 738-sni-session-ticket-client
server2 = 738-sni-session-ticket-server2

[738-sni-session-ticket-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = -SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[738-sni-session-ticket-server2]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = -SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[738-sni-session-ticket-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
Options = -SessionTicket
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-738]
ExpectedResult = Success
ExpectedServerName = server1
Serialize = Server
SessionIdExpected = Yes
SessionTicketExpected = No
server = 738-sni-session-ticket-server-extra
client = 738-sni-session-ticket-client-extra

[738-sni-session-ticket-server-extra]
ServerNameCallback = IgnoreMismatch

[738-sni-session-ticket-client-extra]
ServerName = server1


# ===========================================================

[739-sni-session-ticket]
ssl_conf = 739-sni-session-ticket-ssl

[739-sni-session-ticket-ssl]
server = 739-sni-session-ticket-server
client = 739-sni-session-ticket-client
server2 = 739-sni-session-ticket-server2

[739-sni-session-ticket-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = -SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[739-sni-session-ticket-server2]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = -SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[739-sni-session-ticket-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
Options = -SessionTicket
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-739]
ExpectedResult = Success
ExpectedServerName = server2
Serialize = Server
SessionIdExpected = Yes
SessionTicketExpected = No
server = 739-sni-session-ticket-server-extra
client = 739-sni-session-ticket-client-extra

[739-sni-session-ticket-server-extra]
ServerNameCallback = IgnoreMismatch

[739-sni-session-ticket-client-extra]
ServerName = server2


# ===========================================================

[740-alpn-simple]
ssl_conf = 740-alpn-simple-ssl

[740-alpn-simple-ssl]
server = 740-alpn-simple-server
client = 740-alpn-simple-client

[740-alpn-simple-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[740-alpn-simple-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-740]
ExpectedALPNProtocol = foo
Serialize = Server
server = 740-alpn-simple-server-extra
client = 740-alpn-simple-client-extra

[740-alpn-simple-server-extra]
ALPNProtocols = foo

[740-alpn-simple-client-extra]
ALPNProtocols = foo


# ===========================================================

[741-alpn-server-finds-match]
ssl_conf = 741-alpn-server-finds-match-ssl

[741-alpn-server-finds-match-ssl]
server = 741-alpn-server-finds-match-server
client = 741-alpn-server-finds-match-client

[741-alpn-server-finds-match-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[741-alpn-server-finds-match-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-741]
ExpectedALPNProtocol = bar
Serialize = Server
server = 741-alpn-server-finds-match-server-extra
client = 741-alpn-server-finds-match-client-extra

[741-alpn-server-finds-match-server-extra]
ALPNProtocols = baz,bar

[741-alpn-server-finds-match-client-extra]
ALPNProtocols = foo,bar


# ===========================================================

[742-alpn-server-honours-server-pref]
ssl_conf = 742-alpn-server-honours-server-pref-ssl

[742-alpn-server-honours-server-pref-ssl]
server = 742-alpn-server-honours-server-pref-server
client = 742-alpn-server-honours-server-pref-client

[742-alpn-server-honours-server-pref-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[742-alpn-server-honours-server-pref-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-742]
ExpectedALPNProtocol = bar
Serialize = Server
server = 742-alpn-server-honours-server-pref-server-extra
client = 742-alpn-server-honours-server-pref-client-extra

[742-alpn-server-honours-server-pref-server-extra]
ALPNProtocols = bar,foo

[742-alpn-server-honours-server-pref-client-extra]
ALPNProtocols = foo,bar


# ===========================================================

[743-alpn-alert-on-mismatch]
ssl_conf = 743-alpn-alert-on-mismatch-ssl

[743-alpn-alert-on-mismatch-ssl]
server = 743-alpn-alert-on-mismatch-server
client = 743-alpn-alert-on-mismatch-client

[743-alpn-alert-on-mismatch-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[743-alpn-alert-on-mismatch-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-743]
ExpectedResult = ServerFail
ExpectedServerAlert = NoApplicationProtocol
Serialize = Server
server = 743-alpn-alert-on-mismatch-server-extra
client = 743-alpn-alert-on-mismatch-client-extra

[743-alpn-alert-on-mismatch-server-extra]
ALPNProtocols = baz

[743-alpn-alert-on-mismatch-client-extra]
ALPNProtocols = foo,bar


# ===========================================================

[744-alpn-no-server-support]
ssl_conf = 744-alpn-no-server-support-ssl

[744-alpn-no-server-support-ssl]
server = 744-alpn-no-server-support-server
client = 744-alpn-no-server-support-client

[744-alpn-no-server-support-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[744-alpn-no-server-support-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-744]
Serialize = Server
client = 744-alpn-no-server-support-client-extra

[744-alpn-no-server-support-client-extra]
ALPNProtocols = foo


# ===========================================================

[745-alpn-no-client-support]
ssl_conf = 745-alpn-no-client-support-ssl

[745-alpn-no-client-support-ssl]
server = 745-alpn-no-client-support-server
client = 745-alpn-no-client-support-client

[745-alpn-no-client-support-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[745-alpn-no-client-support-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-745]
Serialize = Server
server = 745-alpn-no-client-support-server-extra

[745-alpn-no-client-support-server-extra]
ALPNProtocols = foo


# ===========================================================

[746-alpn-with-sni-no-context-switch]
ssl_conf = 746-alpn-with-sni-no-context-switch-ssl

[746-alpn-with-sni-no-context-switch-ssl]
server = 746-alpn-with-sni-no-context-switch-server
client = 746-alpn-with-sni-no-context-switch-client
server2 = 746-alpn-with-sni-no-context-switch-server2

[746-alpn-with-sni-no-context-switch-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[746-alpn-with-sni-no-context-switch-server2]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[746-alpn-with-sni-no-context-switch-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-746]
ExpectedALPNProtocol = foo
ExpectedServerName = server1
Serialize = Server
server = 746-alpn-with-sni-no-context-switch-server-extra
server2 = 746-alpn-with-sni-no-context-switch-server2-extra
client = 746-alpn-with-sni-no-context-switch-client-extra

[746-alpn-with-sni-no-context-switch-server-extra]
ALPNProtocols = foo
ServerNameCallback = IgnoreMismatch

[746-alpn-with-sni-no-context-switch-server2-extra]
ALPNProtocols = bar

[746-alpn-with-sni-no-context-switch-client-extra]
ALPNProtocols = foo,bar
ServerName = server1


# ===========================================================

[747-alpn-with-sni-context-switch]
ssl_conf = 747-alpn-with-sni-context-switch-ssl

[747-alpn-with-sni-context-switch-ssl]
server = 747-alpn-with-sni-context-switch-server
client = 747-alpn-with-sni-context-switch-client
server2 = 747-alpn-with-sni-context-switch-server2

[747-alpn-with-sni-context-switch-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[747-alpn-with-sni-context-switch-server2]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[747-alpn-with-sni-context-switch-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-747]
ExpectedALPNProtocol = bar
ExpectedServerName = server2
Serialize = Server
server = 747-alpn-with-sni-context-switch-server-extra
server2 = 747-alpn-with-sni-context-switch-server2-extra
client = 747-alpn-with-sni-context-switch-client-extra

[747-alpn-with-sni-context-switch-server-extra]
ALPNProtocols = foo
ServerNameCallback = IgnoreMismatch

[747-alpn-with-sni-context-switch-server2-extra]
ALPNProtocols = bar

[747-alpn-with-sni-context-switch-client-extra]
ALPNProtocols = foo,bar
ServerName = server2


# ===========================================================

[748-alpn-selected-sni-server-supports-alpn]
ssl_conf = 748-alpn-selected-sni-server-supports-alpn-ssl

[748-alpn-selected-sni-server-supports-alpn-ssl]
server = 748-alpn-selected-sni-server-supports-alpn-server
client = 748-alpn-selected-sni-server-supports-alpn-client
server2 = 748-alpn-selected-sni-server-supports-alpn-server2

[748-alpn-selected-sni-server-supports-alpn-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[748-alpn-selected-sni-server-supports-alpn-server2]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[748-alpn-selected-sni-server-supports-alpn-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-748]
ExpectedALPNProtocol = bar
ExpectedServerName = server2
Serialize = Server
server = 748-alpn-selected-sni-server-supports-alpn-server-extra
server2 = 748-alpn-selected-sni-server-supports-alpn-server2-extra
client = 748-alpn-selected-sni-server-supports-alpn-client-extra

[748-alpn-selected-sni-server-supports-alpn-server-extra]
ServerNameCallback = IgnoreMismatch

[748-alpn-selected-sni-server-supports-alpn-server2-extra]
ALPNProtocols = bar

[748-alpn-selected-sni-server-supports-alpn-client-extra]
ALPNProtocols = foo,bar
ServerName = server2


# ===========================================================

[749-alpn-selected-sni-server-does-not-support-alpn]
ssl_conf = 749-alpn-selected-sni-server-does-not-support-alpn-ssl

[749-alpn-selected-sni-server-does-not-support-alpn-ssl]
server = 749-alpn-selected-sni-server-does-not-support-alpn-server
client = 749-alpn-selected-sni-server-does-not-support-alpn-client
server2 = 749-alpn-selected-sni-server-does-not-support-alpn-server2

[749-alpn-selected-sni-server-does-not-support-alpn-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[749-alpn-selected-sni-server-does-not-support-alpn-server2]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[749-alpn-selected-sni-server-does-not-support-alpn-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-749]
ExpectedServerName = server2
Serialize = Server
server = 749-alpn-selected-sni-server-does-not-support-alpn-server-extra
client = 749-alpn-selected-sni-server-does-not-support-alpn-client-extra

[749-alpn-selected-sni-server-does-not-support-alpn-server-extra]
ALPNProtocols = bar
ServerNameCallback = IgnoreMismatch

[749-alpn-selected-sni-server-does-not-support-alpn-client-extra]
ALPNProtocols = foo,bar
ServerName = server2


# ===========================================================

[750-alpn-simple-resumption]
ssl_conf = 750-alpn-simple-resumption-ssl

[750-alpn-simple-resumption-ssl]
server = 750-alpn-simple-resumption-server
client = 750-alpn-simple-resumption-client
resume-server = 750-alpn-simple-resumption-server
resume-client = 750-alpn-simple-resumption-client

[750-alpn-simple-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[750-alpn-simple-resumption-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-750]
ExpectedALPNProtocol = foo
HandshakeMode = Resume
ResumptionExpected = Yes
Serialize = Server
server = 750-alpn-simple-resumption-server-extra
resume-server = 750-alpn-simple-resumption-server-extra
client = 750-alpn-simple-resumption-client-extra
resume-client = 750-alpn-simple-resumption-client-extra

[750-alpn-simple-resumption-server-extra]
ALPNProtocols = foo

[750-alpn-simple-resumption-client-extra]
ALPNProtocols = foo


# ===========================================================

[751-alpn-server-switch-resumption]
ssl_conf = 751-alpn-server-switch-resumption-ssl

[751-alpn-server-switch-resumption-ssl]
server = 751-alpn-server-switch-resumption-server
client = 751-alpn-server-switch-resumption-client
resume-server = 751-alpn-server-switch-resumption-resume-server
resume-client = 751-alpn-server-switch-resumption-client

[751-alpn-server-switch-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[751-alpn-server-switch-resumption-resume-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[751-alpn-server-switch-resumption-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-751]
ExpectedALPNProtocol = baz
HandshakeMode = Resume
ResumptionExpected = Yes
Serialize = Server
server = 751-alpn-server-switch-resumption-server-extra
resume-server = 751-alpn-server-switch-resumption-resume-server-extra
client = 751-alpn-server-switch-resumption-client-extra
resume-client = 751-alpn-server-switch-resumption-client-extra

[751-alpn-server-switch-resumption-server-extra]
ALPNProtocols = bar,foo

[751-alpn-server-switch-resumption-resume-server-extra]
ALPNProtocols = baz,foo

[751-alpn-server-switch-resumption-client-extra]
ALPNProtocols = foo,bar,baz


# ===========================================================

[752-alpn-client-switch-resumption]
ssl_conf = 752-alpn-client-switch-resumption-ssl

[752-alpn-client-switch-resumption-ssl]
server = 752-alpn-client-switch-resumption-server
client = 752-alpn-client-switch-resumption-client
resume-server = 752-alpn-client-switch-resumption-server
resume-client = 752-alpn-client-switch-resumption-resume-client

[752-alpn-client-switch-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[752-alpn-client-switch-resumption-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[752-alpn-client-switch-resumption-resume-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-752]
ExpectedALPNProtocol = bar
HandshakeMode = Resume
ResumptionExpected = Yes
Serialize = Server
server = 752-alpn-client-switch-resumption-server-extra
resume-server = 752-alpn-client-switch-resumption-server-extra
client = 752-alpn-client-switch-resumption-client-extra
resume-client = 752-alpn-client-switch-resumption-resume-client-extra

[752-alpn-client-switch-resumption-server-extra]
ALPNProtocols = foo,bar,baz

[752-alpn-client-switch-resumption-client-extra]
ALPNProtocols = foo,baz

[752-alpn-client-switch-resumption-resume-client-extra]
ALPNProtocols = bar,baz


# ===========================================================

[753-alpn-alert-on-mismatch-resumption]
ssl_conf = 753-alpn-alert-on-mismatch-resumption-ssl

[753-alpn-alert-on-mismatch-resumption-ssl]
server = 753-alpn-alert-on-mismatch-resumption-server
client = 753-alpn-alert-on-mismatch-resumption-client
resume-server = 753-alpn-alert-on-mismatch-resumption-resume-server
resume-client = 753-alpn-alert-on-mismatch-resumption-client

[753-alpn-alert-on-mismatch-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[753-alpn-alert-on-mismatch-resumption-resume-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[753-alpn-alert-on-mismatch-resumption-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-753]
ExpectedResult = ServerFail
ExpectedServerAlert = NoApplicationProtocol
HandshakeMode = Resume
Serialize = Server
server = 753-alpn-alert-on-mismatch-resumption-server-extra
resume-server = 753-alpn-alert-on-mismatch-resumption-resume-server-extra
client = 753-alpn-alert-on-mismatch-resumption-client-extra
resume-client = 753-alpn-alert-on-mismatch-resumption-client-extra

[753-alpn-alert-on-mismatch-resumption-server-extra]
ALPNProtocols = bar

[753-alpn-alert-on-mismatch-resumption-resume-server-extra]
ALPNProtocols = baz

[753-alpn-alert-on-mismatch-resumption-client-extra]
ALPNProtocols = foo,bar


# ===========================================================

[754-alpn-no-server-support-resumption]
ssl_conf = 754-alpn-no-server-support-resumption-ssl

[754-alpn-no-server-support-resumption-ssl]
server = 754-alpn-no-server-support-resumption-server
client = 754-alpn-no-server-support-resumption-client
resume-server = 754-alpn-no-server-support-resumption-resume-server
resume-client = 754-alpn-no-server-support-resumption-client

[754-alpn-no-server-support-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[754-alpn-no-server-support-resumption-resume-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[754-alpn-no-server-support-resumption-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-754]
HandshakeMode = Resume
ResumptionExpected = Yes
Serialize = Server
server = 754-alpn-no-server-support-resumption-server-extra
client = 754-alpn-no-server-support-resumption-client-extra
resume-client = 754-alpn-no-server-support-resumption-client-extra

[754-alpn-no-server-support-resumption-server-extra]
ALPNProtocols = foo

[754-alpn-no-server-support-resumption-client-extra]
ALPNProtocols = foo


# ===========================================================

[755-alpn-no-client-support-resumption]
ssl_conf = 755-alpn-no-client-support-resumption-ssl

[755-alpn-no-client-support-resumption-ssl]
server = 755-alpn-no-client-support-resumption-server
client = 755-alpn-no-client-support-resumption-client
resume-server = 755-alpn-no-client-support-resumption-server
resume-client = 755-alpn-no-client-support-resumption-resume-client

[755-alpn-no-client-support-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[755-alpn-no-client-support-resumption-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[755-alpn-no-client-support-resumption-resume-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-755]
HandshakeMode = Resume
ResumptionExpected = Yes
Serialize = Server
server = 755-alpn-no-client-support-resumption-server-extra
resume-server = 755-alpn-no-client-support-resumption-server-extra
client = 755-alpn-no-client-support-resumption-client-extra

[755-alpn-no-client-support-resumption-server-extra]
ALPNProtocols = foo

[755-alpn-no-client-support-resumption-client-extra]
ALPNProtocols = foo


# ===========================================================

[756-resumption]
ssl_conf = 756-resumption-ssl

[756-resumption-ssl]
server = 756-resumption-server
client = 756-resumption-client
resume-server = 756-resumption-resume-server
resume-client = 756-resumption-client

[756-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[756-resumption-resume-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[756-resumption-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-756]
ExpectedProtocol = TLSv1
HandshakeMode = Resume
ResumptionExpected = Yes
Serialize = Server


# ===========================================================

[757-resumption]
ssl_conf = 757-resumption-ssl

[757-resumption-ssl]
server = 757-resumption-server
client = 757-resumption-client
resume-server = 757-resumption-resume-server
resume-client = 757-resumption-client

[757-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
Options = -SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[757-resumption-resume-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
Options = -SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[757-resumption-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-757]
ExpectedProtocol = TLSv1
HandshakeMode = Resume
ResumptionExpected = Yes
Serialize = Server


# ===========================================================

[758-resumption]
ssl_conf = 758-resumption-ssl

[758-resumption-ssl]
server = 758-resumption-server
client = 758-resumption-client
resume-server = 758-resumption-resume-server
resume-client = 758-resumption-client

[758-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[758-resumption-resume-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[758-resumption-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-758]
ExpectedProtocol = TLSv1.1
HandshakeMode = Resume
ResumptionExpected = No
Serialize = Server


# ===========================================================

[759-resumption]
ssl_conf = 759-resumption-ssl

[759-resumption-ssl]
server = 759-resumption-server
client = 759-resumption-client
resume-server = 759-resumption-resume-server
resume-client = 759-resumption-client

[759-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
Options = -SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[759-resumption-resume-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
Options = -SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[759-resumption-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-759]
ExpectedProtocol = TLSv1.1
HandshakeMode = Resume
ResumptionExpected = No
Serialize = Server


# ===========================================================

[760-resumption]
ssl_conf = 760-resumption-ssl

[760-resumption-ssl]
server = 760-resumption-server
client = 760-resumption-client
resume-server = 760-resumption-resume-server
resume-client = 760-resumption-client

[760-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[760-resumption-resume-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[760-resumption-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-760]
ExpectedProtocol = TLSv1.2
HandshakeMode = Resume
ResumptionExpected = No
Serialize = Server


# ===========================================================

[761-resumption]
ssl_conf = 761-resumption-ssl

[761-resumption-ssl]
server = 761-resumption-server
client = 761-resumption-client
resume-server = 761-resumption-resume-server
resume-client = 761-resumption-client

[761-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
Options = -SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[761-resumption-resume-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
Options = -SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[761-resumption-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-761]
ExpectedProtocol = TLSv1.2
HandshakeMode = Resume
ResumptionExpected = No
Serialize = Server


# ===========================================================

[762-resumption]
ssl_conf = 762-resumption-ssl

[762-resumption-ssl]
server = 762-resumption-server
client = 762-resumption-client
resume-server = 762-resumption-resume-server
resume-client = 762-resumption-client

[762-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[762-resumption-resume-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[762-resumption-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-762]
ExpectedProtocol = TLSv1.3
HandshakeMode = Resume
ResumptionExpected = No
Serialize = Server


# ===========================================================

[763-resumption]
ssl_conf = 763-resumption-ssl

[763-resumption-ssl]
server = 763-resumption-server
client = 763-resumption-client
resume-server = 763-resumption-resume-server
resume-client = 763-resumption-client

[763-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
Options = -SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[763-resumption-resume-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
Options = -SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[763-resumption-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-763]
ExpectedProtocol = TLSv1.3
HandshakeMode = Resume
ResumptionExpected = No
Serialize = Server


# ===========================================================

[764-resumption]
ssl_conf = 764-resumption-ssl

[764-resumption-ssl]
server = 764-resumption-server
client = 764-resumption-client
resume-server = 764-resumption-resume-server
resume-client = 764-resumption-client

[764-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[764-resumption-resume-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[764-resumption-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-764]
ExpectedProtocol = TLSv1
HandshakeMode = Resume
ResumptionExpected = No
Serialize = Server


# ===========================================================

[765-resumption]
ssl_conf = 765-resumption-ssl

[765-resumption-ssl]
server = 765-resumption-server
client = 765-resumption-client
resume-server = 765-resumption-resume-server
resume-client = 765-resumption-client

[765-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
Options = -SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[765-resumption-resume-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
Options = -SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[765-resumption-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-765]
ExpectedProtocol = TLSv1
HandshakeMode = Resume
ResumptionExpected = No
Serialize = Server


# ===========================================================

[766-resumption]
ssl_conf = 766-resumption-ssl

[766-resumption-ssl]
server = 766-resumption-server
client = 766-resumption-client
resume-server = 766-resumption-resume-server
resume-client = 766-resumption-client

[766-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[766-resumption-resume-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[766-resumption-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-766]
ExpectedProtocol = TLSv1.1
HandshakeMode = Resume
ResumptionExpected = Yes
Serialize = Server


# ===========================================================

[767-resumption]
ssl_conf = 767-resumption-ssl

[767-resumption-ssl]
server = 767-resumption-server
client = 767-resumption-client
resume-server = 767-resumption-resume-server
resume-client = 767-resumption-client

[767-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
Options = -SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[767-resumption-resume-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
Options = -SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[767-resumption-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-767]
ExpectedProtocol = TLSv1.1
HandshakeMode = Resume
ResumptionExpected = Yes
Serialize = Server


# ===========================================================

[768-resumption]
ssl_conf = 768-resumption-ssl

[768-resumption-ssl]
server = 768-resumption-server
client = 768-resumption-client
resume-server = 768-resumption-resume-server
resume-client = 768-resumption-client

[768-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[768-resumption-resume-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[768-resumption-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-768]
ExpectedProtocol = TLSv1.2
HandshakeMode = Resume
ResumptionExpected = No
Serialize = Server


# ===========================================================

[769-resumption]
ssl_conf = 769-resumption-ssl

[769-resumption-ssl]
server = 769-resumption-server
client = 769-resumption-client
resume-server = 769-resumption-resume-server
resume-client = 769-resumption-client

[769-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
Options = -SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[769-resumption-resume-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
Options = -SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[769-resumption-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-769]
ExpectedProtocol = TLSv1.2
HandshakeMode = Resume
ResumptionExpected = No
Serialize = Server


# ===========================================================

[770-resumption]
ssl_conf = 770-resumption-ssl

[770-resumption-ssl]
server = 770-resumption-server
client = 770-resumption-client
resume-server = 770-resumption-resume-server
resume-client = 770-resumption-client

[770-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[770-resumption-resume-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[770-resumption-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-770]
ExpectedProtocol = TLSv1.3
HandshakeMode = Resume
ResumptionExpected = No
Serialize = Server


# ===========================================================

[771-resumption]
ssl_conf = 771-resumption-ssl

[771-resumption-ssl]
server = 771-resumption-server
client = 771-resumption-client
resume-server = 771-resumption-resume-server
resume-client = 771-resumption-client

[771-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
Options = -SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[771-resumption-resume-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
Options = -SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[771-resumption-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-771]
ExpectedProtocol = TLSv1.3
HandshakeMode = Resume
ResumptionExpected = No
Serialize = Server


# ===========================================================

[772-resumption]
ssl_conf = 772-resumption-ssl

[772-resumption-ssl]
server = 772-resumption-server
client = 772-resumption-client
resume-server = 772-resumption-resume-server
resume-client = 772-resumption-client

[772-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[772-resumption-resume-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[772-resumption-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-772]
ExpectedProtocol = TLSv1
HandshakeMode = Resume
ResumptionExpected = No
Serialize = Server


# ===========================================================

[773-resumption]
ssl_conf = 773-resumption-ssl

[773-resumption-ssl]
server = 773-resumption-server
client = 773-resumption-client
resume-server = 773-resumption-resume-server
resume-client = 773-resumption-client

[773-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
Options = -SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[773-resumption-resume-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
Options = -SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[773-resumption-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-773]
ExpectedProtocol = TLSv1
HandshakeMode = Resume
ResumptionExpected = No
Serialize = Server


# ===========================================================

[774-resumption]
ssl_conf = 774-resumption-ssl

[774-resumption-ssl]
server = 774-resumption-server
client = 774-resumption-client
resume-server = 774-resumption-resume-server
resume-client = 774-resumption-client

[774-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[774-resumption-resume-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[774-resumption-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-774]
ExpectedProtocol = TLSv1.1
HandshakeMode = Resume
ResumptionExpected = No
Serialize = Server


# ===========================================================

[775-resumption]
ssl_conf = 775-resumption-ssl

[775-resumption-ssl]
server = 775-resumption-server
client = 775-resumption-client
resume-server = 775-resumption-resume-server
resume-client = 775-resumption-client

[775-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
Options = -SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[775-resumption-resume-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
Options = -SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[775-resumption-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-775]
ExpectedProtocol = TLSv1.1
HandshakeMode = Resume
ResumptionExpected = No
Serialize = Server


# ===========================================================

[776-resumption]
ssl_conf = 776-resumption-ssl

[776-resumption-ssl]
server = 776-resumption-server
client = 776-resumption-client
resume-server = 776-resumption-resume-server
resume-client = 776-resumption-client

[776-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[776-resumption-resume-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[776-resumption-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-776]
ExpectedProtocol = TLSv1.2
HandshakeMode = Resume
ResumptionExpected = Yes
Serialize = Server


# ===========================================================

[777-resumption]
ssl_conf = 777-resumption-ssl

[777-resumption-ssl]
server = 777-resumption-server
client = 777-resumption-client
resume-server = 777-resumption-resume-server
resume-client = 777-resumption-client

[777-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
Options = -SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[777-resumption-resume-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
Options = -SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[777-resumption-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-777]
ExpectedProtocol = TLSv1.2
HandshakeMode = Resume
ResumptionExpected = Yes
Serialize = Server


# ===========================================================

[778-resumption]
ssl_conf = 778-resumption-ssl

[778-resumption-ssl]
server = 778-resumption-server
client = 778-resumption-client
resume-server = 778-resumption-resume-server
resume-client = 778-resumption-client

[778-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[778-resumption-resume-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[778-resumption-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-778]
ExpectedProtocol = TLSv1.3
HandshakeMode = Resume
ResumptionExpected = No
Serialize = Server


# ===========================================================

[779-resumption]
ssl_conf = 779-resumption-ssl

[779-resumption-ssl]
server = 779-resumption-server
client = 779-resumption-client
resume-server = 779-resumption-resume-server
resume-client = 779-resumption-client

[779-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
Options = -SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[779-resumption-resume-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
Options = -SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[779-resumption-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-779]
ExpectedProtocol = TLSv1.3
HandshakeMode = Resume
ResumptionExpected = No
Serialize = Server


# ===========================================================

[780-resumption]
ssl_conf = 780-resumption-ssl

[780-resumption-ssl]
server = 780-resumption-server
client = 780-resumption-client
resume-server = 780-resumption-resume-server
resume-client = 780-resumption-client

[780-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[780-resumption-resume-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[780-resumption-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-780]
ExpectedProtocol = TLSv1
HandshakeMode = Resume
ResumptionExpected = No
Serialize = Server


# ===========================================================

[781-resumption]
ssl_conf = 781-resumption-ssl

[781-resumption-ssl]
server = 781-resumption-server
client = 781-resumption-client
resume-server = 781-resumption-resume-server
resume-client = 781-resumption-client

[781-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
Options = -SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[781-resumption-resume-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
Options = -SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[781-resumption-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-781]
ExpectedProtocol = TLSv1
HandshakeMode = Resume
ResumptionExpected = No
Serialize = Server


# ===========================================================

[782-resumption]
ssl_conf = 782-resumption-ssl

[782-resumption-ssl]
server = 782-resumption-server
client = 782-resumption-client
resume-server = 782-resumption-resume-server
resume-client = 782-resumption-client

[782-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[782-resumption-resume-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[782-resumption-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-782]
ExpectedProtocol = TLSv1.1
HandshakeMode = Resume
ResumptionExpected = No
Serialize = Server


# ===========================================================

[783-resumption]
ssl_conf = 783-resumption-ssl

[783-resumption-ssl]
server = 783-resumption-server
client = 783-resumption-client
resume-server = 783-resumption-resume-server
resume-client = 783-resumption-client

[783-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
Options = -SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[783-resumption-resume-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
Options = -SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[783-resumption-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-783]
ExpectedProtocol = TLSv1.1
HandshakeMode = Resume
ResumptionExpected = No
Serialize = Server


# ===========================================================

[784-resumption]
ssl_conf = 784-resumption-ssl

[784-resumption-ssl]
server = 784-resumption-server
client = 784-resumption-client
resume-server = 784-resumption-resume-server
resume-client = 784-resumption-client

[784-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[784-resumption-resume-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[784-resumption-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-784]
ExpectedProtocol = TLSv1.2
HandshakeMode = Resume
ResumptionExpected = No
Serialize = Server


# ===========================================================

[785-resumption]
ssl_conf = 785-resumption-ssl

[785-resumption-ssl]
server = 785-resumption-server
client = 785-resumption-client
resume-server = 785-resumption-resume-server
resume-client = 785-resumption-client

[785-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
Options = -SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[785-resumption-resume-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
Options = -SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[785-resumption-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-785]
ExpectedProtocol = TLSv1.2
HandshakeMode = Resume
ResumptionExpected = No
Serialize = Server


# ===========================================================

[786-resumption]
ssl_conf = 786-resumption-ssl

[786-resumption-ssl]
server = 786-resumption-server
client = 786-resumption-client
resume-server = 786-resumption-resume-server
resume-client = 786-resumption-client

[786-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[786-resumption-resume-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[786-resumption-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-786]
ExpectedProtocol = TLSv1.3
HandshakeMode = Resume
ResumptionExpected = Yes
Serialize = Server


# ===========================================================

[787-resumption]
ssl_conf = 787-resumption-ssl

[787-resumption-ssl]
server = 787-resumption-server
client = 787-resumption-client
resume-server = 787-resumption-resume-server
resume-client = 787-resumption-client

[787-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
Options = -SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[787-resumption-resume-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
Options = -SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[787-resumption-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-787]
ExpectedProtocol = TLSv1.3
HandshakeMode = Resume
ResumptionExpected = Yes
Serialize = Server


# ===========================================================

[788-resumption]
ssl_conf = 788-resumption-ssl

[788-resumption-ssl]
server = 788-resumption-server
client = 788-resumption-client
resume-server = 788-resumption-server
resume-client = 788-resumption-resume-client

[788-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[788-resumption-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[788-resumption-resume-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-788]
ExpectedProtocol = TLSv1
HandshakeMode = Resume
ResumptionExpected = Yes
Serialize = Server


# ===========================================================

[789-resumption]
ssl_conf = 789-resumption-ssl

[789-resumption-ssl]
server = 789-resumption-server
client = 789-resumption-client
resume-server = 789-resumption-server
resume-client = 789-resumption-resume-client

[789-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = -SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[789-resumption-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[789-resumption-resume-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-789]
ExpectedProtocol = TLSv1
HandshakeMode = Resume
ResumptionExpected = Yes
Serialize = Server


# ===========================================================

[790-resumption]
ssl_conf = 790-resumption-ssl

[790-resumption-ssl]
server = 790-resumption-server
client = 790-resumption-client
resume-server = 790-resumption-server
resume-client = 790-resumption-resume-client

[790-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[790-resumption-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[790-resumption-resume-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-790]
ExpectedProtocol = TLSv1.1
HandshakeMode = Resume
ResumptionExpected = No
Serialize = Server


# ===========================================================

[791-resumption]
ssl_conf = 791-resumption-ssl

[791-resumption-ssl]
server = 791-resumption-server
client = 791-resumption-client
resume-server = 791-resumption-server
resume-client = 791-resumption-resume-client

[791-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = -SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[791-resumption-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[791-resumption-resume-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-791]
ExpectedProtocol = TLSv1.1
HandshakeMode = Resume
ResumptionExpected = No
Serialize = Server


# ===========================================================

[792-resumption]
ssl_conf = 792-resumption-ssl

[792-resumption-ssl]
server = 792-resumption-server
client = 792-resumption-client
resume-server = 792-resumption-server
resume-client = 792-resumption-resume-client

[792-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[792-resumption-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[792-resumption-resume-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-792]
ExpectedProtocol = TLSv1.2
HandshakeMode = Resume
ResumptionExpected = No
Serialize = Server


# ===========================================================

[793-resumption]
ssl_conf = 793-resumption-ssl

[793-resumption-ssl]
server = 793-resumption-server
client = 793-resumption-client
resume-server = 793-resumption-server
resume-client = 793-resumption-resume-client

[793-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = -SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[793-resumption-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[793-resumption-resume-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-793]
ExpectedProtocol = TLSv1.2
HandshakeMode = Resume
ResumptionExpected = No
Serialize = Server


# ===========================================================

[794-resumption]
ssl_conf = 794-resumption-ssl

[794-resumption-ssl]
server = 794-resumption-server
client = 794-resumption-client
resume-server = 794-resumption-server
resume-client = 794-resumption-resume-client

[794-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[794-resumption-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[794-resumption-resume-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-794]
ExpectedProtocol = TLSv1.3
HandshakeMode = Resume
ResumptionExpected = No
Serialize = Server


# ===========================================================

[795-resumption]
ssl_conf = 795-resumption-ssl

[795-resumption-ssl]
server = 795-resumption-server
client = 795-resumption-client
resume-server = 795-resumption-server
resume-client = 795-resumption-resume-client

[795-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = -SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[795-resumption-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[795-resumption-resume-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-795]
ExpectedProtocol = TLSv1.3
HandshakeMode = Resume
ResumptionExpected = No
Serialize = Server


# ===========================================================

[796-resumption]
ssl_conf = 796-resumption-ssl

[796-resumption-ssl]
server = 796-resumption-server
client = 796-resumption-client
resume-server = 796-resumption-server
resume-client = 796-resumption-resume-client

[796-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[796-resumption-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[796-resumption-resume-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-796]
ExpectedProtocol = TLSv1
HandshakeMode = Resume
ResumptionExpected = No
Serialize = Server


# ===========================================================

[797-resumption]
ssl_conf = 797-resumption-ssl

[797-resumption-ssl]
server = 797-resumption-server
client = 797-resumption-client
resume-server = 797-resumption-server
resume-client = 797-resumption-resume-client

[797-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = -SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[797-resumption-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[797-resumption-resume-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-797]
ExpectedProtocol = TLSv1
HandshakeMode = Resume
ResumptionExpected = No
Serialize = Server


# ===========================================================

[798-resumption]
ssl_conf = 798-resumption-ssl

[798-resumption-ssl]
server = 798-resumption-server
client = 798-resumption-client
resume-server = 798-resumption-server
resume-client = 798-resumption-resume-client

[798-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[798-resumption-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[798-resumption-resume-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-798]
ExpectedProtocol = TLSv1.1
HandshakeMode = Resume
ResumptionExpected = Yes
Serialize = Server


# ===========================================================

[799-resumption]
ssl_conf = 799-resumption-ssl

[799-resumption-ssl]
server = 799-resumption-server
client = 799-resumption-client
resume-server = 799-resumption-server
resume-client = 799-resumption-resume-client

[799-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = -SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[799-resumption-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[799-resumption-resume-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-799]
ExpectedProtocol = TLSv1.1
HandshakeMode = Resume
ResumptionExpected = Yes
Serialize = Server


# ===========================================================

[800-resumption]
ssl_conf = 800-resumption-ssl

[800-resumption-ssl]
server = 800-resumption-server
client = 800-resumption-client
resume-server = 800-resumption-server
resume-client = 800-resumption-resume-client

[800-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[800-resumption-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[800-resumption-resume-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-800]
ExpectedProtocol = TLSv1.2
HandshakeMode = Resume
ResumptionExpected = No
Serialize = Server


# ===========================================================

[801-resumption]
ssl_conf = 801-resumption-ssl

[801-resumption-ssl]
server = 801-resumption-server
client = 801-resumption-client
resume-server = 801-resumption-server
resume-client = 801-resumption-resume-client

[801-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = -SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[801-resumption-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[801-resumption-resume-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-801]
ExpectedProtocol = TLSv1.2
HandshakeMode = Resume
ResumptionExpected = No
Serialize = Server


# ===========================================================

[802-resumption]
ssl_conf = 802-resumption-ssl

[802-resumption-ssl]
server = 802-resumption-server
client = 802-resumption-client
resume-server = 802-resumption-server
resume-client = 802-resumption-resume-client

[802-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[802-resumption-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[802-resumption-resume-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-802]
ExpectedProtocol = TLSv1.3
HandshakeMode = Resume
ResumptionExpected = No
Serialize = Server


# ===========================================================

[803-resumption]
ssl_conf = 803-resumption-ssl

[803-resumption-ssl]
server = 803-resumption-server
client = 803-resumption-client
resume-server = 803-resumption-server
resume-client = 803-resumption-resume-client

[803-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = -SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[803-resumption-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[803-resumption-resume-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-803]
ExpectedProtocol = TLSv1.3
HandshakeMode = Resume
ResumptionExpected = No
Serialize = Server


# ===========================================================

[804-resumption]
ssl_conf = 804-resumption-ssl

[804-resumption-ssl]
server = 804-resumption-server
client = 804-resumption-client
resume-server = 804-resumption-server
resume-client = 804-resumption-resume-client

[804-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[804-resumption-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[804-resumption-resume-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-804]
ExpectedProtocol = TLSv1
HandshakeMode = Resume
ResumptionExpected = No
Serialize = Server


# ===========================================================

[805-resumption]
ssl_conf = 805-resumption-ssl

[805-resumption-ssl]
server = 805-resumption-server
client = 805-resumption-client
resume-server = 805-resumption-server
resume-client = 805-resumption-resume-client

[805-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = -SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[805-resumption-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[805-resumption-resume-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-805]
ExpectedProtocol = TLSv1
HandshakeMode = Resume
ResumptionExpected = No
Serialize = Server


# ===========================================================

[806-resumption]
ssl_conf = 806-resumption-ssl

[806-resumption-ssl]
server = 806-resumption-server
client = 806-resumption-client
resume-server = 806-resumption-server
resume-client = 806-resumption-resume-client

[806-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[806-resumption-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[806-resumption-resume-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-806]
ExpectedProtocol = TLSv1.1
HandshakeMode = Resume
ResumptionExpected = No
Serialize = Server


# ===========================================================

[807-resumption]
ssl_conf = 807-resumption-ssl

[807-resumption-ssl]
server = 807-resumption-server
client = 807-resumption-client
resume-server = 807-resumption-server
resume-client = 807-resumption-resume-client

[807-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = -SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[807-resumption-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[807-resumption-resume-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-807]
ExpectedProtocol = TLSv1.1
HandshakeMode = Resume
ResumptionExpected = No
Serialize = Server


# ===========================================================

[808-resumption]
ssl_conf = 808-resumption-ssl

[808-resumption-ssl]
server = 808-resumption-server
client = 808-resumption-client
resume-server = 808-resumption-server
resume-client = 808-resumption-resume-client

[808-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[808-resumption-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[808-resumption-resume-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-808]
ExpectedProtocol = TLSv1.2
HandshakeMode = Resume
ResumptionExpected = Yes
Serialize = Server


# ===========================================================

[809-resumption]
ssl_conf = 809-resumption-ssl

[809-resumption-ssl]
server = 809-resumption-server
client = 809-resumption-client
resume-server = 809-resumption-server
resume-client = 809-resumption-resume-client

[809-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = -SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[809-resumption-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[809-resumption-resume-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-809]
ExpectedProtocol = TLSv1.2
HandshakeMode = Resume
ResumptionExpected = Yes
Serialize = Server


# ===========================================================

[810-resumption]
ssl_conf = 810-resumption-ssl

[810-resumption-ssl]
server = 810-resumption-server
client = 810-resumption-client
resume-server = 810-resumption-server
resume-client = 810-resumption-resume-client

[810-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[810-resumption-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[810-resumption-resume-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-810]
ExpectedProtocol = TLSv1.3
HandshakeMode = Resume
ResumptionExpected = No
Serialize = Server


# ===========================================================

[811-resumption]
ssl_conf = 811-resumption-ssl

[811-resumption-ssl]
server = 811-resumption-server
client = 811-resumption-client
resume-server = 811-resumption-server
resume-client = 811-resumption-resume-client

[811-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = -SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[811-resumption-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[811-resumption-resume-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-811]
ExpectedProtocol = TLSv1.3
HandshakeMode = Resume
ResumptionExpected = No
Serialize = Server


# ===========================================================

[812-resumption]
ssl_conf = 812-resumption-ssl

[812-resumption-ssl]
server = 812-resumption-server
client = 812-resumption-client
resume-server = 812-resumption-server
resume-client = 812-resumption-resume-client

[812-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[812-resumption-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[812-resumption-resume-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-812]
ExpectedProtocol = TLSv1
HandshakeMode = Resume
ResumptionExpected = No
Serialize = Server


# ===========================================================

[813-resumption]
ssl_conf = 813-resumption-ssl

[813-resumption-ssl]
server = 813-resumption-server
client = 813-resumption-client
resume-server = 813-resumption-server
resume-client = 813-resumption-resume-client

[813-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = -SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[813-resumption-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[813-resumption-resume-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-813]
ExpectedProtocol = TLSv1
HandshakeMode = Resume
ResumptionExpected = No
Serialize = Server


# ===========================================================

[814-resumption]
ssl_conf = 814-resumption-ssl

[814-resumption-ssl]
server = 814-resumption-server
client = 814-resumption-client
resume-server = 814-resumption-server
resume-client = 814-resumption-resume-client

[814-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[814-resumption-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[814-resumption-resume-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-814]
ExpectedProtocol = TLSv1.1
HandshakeMode = Resume
ResumptionExpected = No
Serialize = Server


# ===========================================================

[815-resumption]
ssl_conf = 815-resumption-ssl

[815-resumption-ssl]
server = 815-resumption-server
client = 815-resumption-client
resume-server = 815-resumption-server
resume-client = 815-resumption-resume-client

[815-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = -SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[815-resumption-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[815-resumption-resume-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-815]
ExpectedProtocol = TLSv1.1
HandshakeMode = Resume
ResumptionExpected = No
Serialize = Server


# ===========================================================

[816-resumption]
ssl_conf = 816-resumption-ssl

[816-resumption-ssl]
server = 816-resumption-server
client = 816-resumption-client
resume-server = 816-resumption-server
resume-client = 816-resumption-resume-client

[816-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[816-resumption-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[816-resumption-resume-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-816]
ExpectedProtocol = TLSv1.2
HandshakeMode = Resume
ResumptionExpected = No
Serialize = Server


# ===========================================================

[817-resumption]
ssl_conf = 817-resumption-ssl

[817-resumption-ssl]
server = 817-resumption-server
client = 817-resumption-client
resume-server = 817-resumption-server
resume-client = 817-resumption-resume-client

[817-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = -SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[817-resumption-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[817-resumption-resume-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-817]
ExpectedProtocol = TLSv1.2
HandshakeMode = Resume
ResumptionExpected = No
Serialize = Server


# ===========================================================

[818-resumption]
ssl_conf = 818-resumption-ssl

[818-resumption-ssl]
server = 818-resumption-server
client = 818-resumption-client
resume-server = 818-resumption-server
resume-client = 818-resumption-resume-client

[818-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[818-resumption-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[818-resumption-resume-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-818]
ExpectedProtocol = TLSv1.3
HandshakeMode = Resume
ResumptionExpected = Yes
Serialize = Server


# ===========================================================

[819-resumption]
ssl_conf = 819-resumption-ssl

[819-resumption-ssl]
server = 819-resumption-server
client = 819-resumption-client
resume-server = 819-resumption-server
resume-client = 819-resumption-resume-client

[819-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = -SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[819-resumption-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[819-resumption-resume-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-819]
ExpectedProtocol = TLSv1.3
HandshakeMode = Resume
ResumptionExpected = Yes
Serialize = Server


# ===========================================================

[820-resumption-with-hrr]
ssl_conf = 820-resumption-with-hrr-ssl

[820-resumption-with-hrr-ssl]
server = 820-resumption-with-hrr-server
client = 820-resumption-with-hrr-client
resume-server = 820-resumption-with-hrr-server
resume-client = 820-resumption-with-hrr-resume-client

[820-resumption-with-hrr-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Curves = P-256
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[820-resumption-with-hrr-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[820-resumption-with-hrr-resume-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-820]
ExpectedProtocol = TLSv1.3
HandshakeMode = Resume
Method = TLS
ResumptionExpected = Yes
Serialize = Server


# ===========================================================

[821-ct-permissive-without-scts]
ssl_conf = 821-ct-permissive-without-scts-ssl

[821-ct-permissive-without-scts-ssl]
server = 821-ct-permissive-without-scts-server
client = 821-ct-permissive-without-scts-client

[821-ct-permissive-without-scts-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[821-ct-permissive-without-scts-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-821]
ExpectedResult = Success
Serialize = Server
client = 821-ct-permissive-without-scts-client-extra

[821-ct-permissive-without-scts-client-extra]
CTValidation = Permissive


# ===========================================================

[822-ct-permissive-with-scts]
ssl_conf = 822-ct-permissive-with-scts-ssl

[822-ct-permissive-with-scts-ssl]
server = 822-ct-permissive-with-scts-server
client = 822-ct-permissive-with-scts-client

[822-ct-permissive-with-scts-server]
Certificate = ${ENV::TEST_CERTS_DIR}/embeddedSCTs1.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/embeddedSCTs1-key.pem

[822-ct-permissive-with-scts-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/embeddedSCTs1_issuer.pem
VerifyMode = Peer

[test-822]
ExpectedResult = Success
Serialize = Server
client = 822-ct-permissive-with-scts-client-extra

[822-ct-permissive-with-scts-client-extra]
CTValidation = Permissive


# ===========================================================

[823-ct-strict-without-scts]
ssl_conf = 823-ct-strict-without-scts-ssl

[823-ct-strict-without-scts-ssl]
server = 823-ct-strict-without-scts-server
client = 823-ct-strict-without-scts-client

[823-ct-strict-without-scts-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[823-ct-strict-without-scts-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-823]
ExpectedClientAlert = HandshakeFailure
ExpectedResult = ClientFail
Serialize = Server
client = 823-ct-strict-without-scts-client-extra

[823-ct-strict-without-scts-client-extra]
CTValidation = Strict


# ===========================================================

[824-ct-strict-with-scts]
ssl_conf = 824-ct-strict-with-scts-ssl

[824-ct-strict-with-scts-ssl]
server = 824-ct-strict-with-scts-server
client = 824-ct-strict-with-scts-client

[824-ct-strict-with-scts-server]
Certificate = ${ENV::TEST_CERTS_DIR}/embeddedSCTs1.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/embeddedSCTs1-key.pem

[824-ct-strict-with-scts-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/embeddedSCTs1_issuer.pem
VerifyMode = Peer

[test-824]
ExpectedResult = Success
Serialize = Server
client = 824-ct-strict-with-scts-client-extra

[824-ct-strict-with-scts-client-extra]
CTValidation = Strict


# ===========================================================

[825-ct-permissive-resumption]
ssl_conf = 825-ct-permissive-resumption-ssl

[825-ct-permissive-resumption-ssl]
server = 825-ct-permissive-resumption-server
client = 825-ct-permissive-resumption-client
resume-server = 825-ct-permissive-resumption-server
resume-client = 825-ct-permissive-resumption-client

[825-ct-permissive-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/embeddedSCTs1.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/embeddedSCTs1-key.pem

[825-ct-permissive-resumption-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/embeddedSCTs1_issuer.pem
VerifyMode = Peer

[test-825]
ExpectedResult = Success
HandshakeMode = Resume
ResumptionExpected = Yes
Serialize = Server
client = 825-ct-permissive-resumption-client-extra
resume-client = 825-ct-permissive-resumption-client-extra

[825-ct-permissive-resumption-client-extra]
CTValidation = Permissive


# ===========================================================

[826-ct-strict-resumption]
ssl_conf = 826-ct-strict-resumption-ssl

[826-ct-strict-resumption-ssl]
server = 826-ct-strict-resumption-server
client = 826-ct-strict-resumption-client
resume-server = 826-ct-strict-resumption-server
resume-client = 826-ct-strict-resumption-resume-client

[826-ct-strict-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/embeddedSCTs1.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/embeddedSCTs1-key.pem

[826-ct-strict-resumption-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/embeddedSCTs1_issuer.pem
VerifyMode = Peer

[826-ct-strict-resumption-resume-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-826]
ExpectedResult = Success
HandshakeMode = Resume
ResumptionExpected = Yes
Serialize = Server
client = 826-ct-strict-resumption-client-extra
resume-client = 826-ct-strict-resumption-resume-client-extra

[826-ct-strict-resumption-client-extra]
CTValidation = Strict

[826-ct-strict-resumption-resume-client-extra]
CTValidation = Strict


# ===========================================================

[827-one-fragment-minus-app-data]
ssl_conf = 827-one-fragment-minus-app-data-ssl

[827-one-fragment-minus-app-data-ssl]
server = 827-one-fragment-minus-app-data-server
client = 827-one-fragment-minus-app-data-client

[827-one-fragment-minus-app-data-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[827-one-fragment-minus-app-data-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-827]
ApplicationData = 511
Serialize = Server


# ===========================================================

[828-one-fragment-app-data]
ssl_conf = 828-one-fragment-app-data-ssl

[828-one-fragment-app-data-ssl]
server = 828-one-fragment-app-data-server
client = 828-one-fragment-app-data-client

[828-one-fragment-app-data-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[828-one-fragment-app-data-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-828]
ApplicationData = 512
Serialize = Server


# ===========================================================

[829-one-fragment-plus-app-data]
ssl_conf = 829-one-fragment-plus-app-data-ssl

[829-one-fragment-plus-app-data-ssl]
server = 829-one-fragment-plus-app-data-server
client = 829-one-fragment-plus-app-data-client

[829-one-fragment-plus-app-data-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[829-one-fragment-plus-app-data-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-829]
ApplicationData = 513
Serialize = Server


# ===========================================================

[830-small-app-data]
ssl_conf = 830-small-app-data-ssl

[830-small-app-data-ssl]
server = 830-small-app-data-server
client = 830-small-app-data-client

[830-small-app-data-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[830-small-app-data-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-830]
ApplicationData = 4097
Serialize = Server


# ===========================================================

[831-small-app-data-large-fragment-size]
ssl_conf = 831-small-app-data-large-fragment-size-ssl

[831-small-app-data-large-fragment-size-ssl]
server = 831-small-app-data-large-fragment-size-server
client = 831-small-app-data-large-fragment-size-client

[831-small-app-data-large-fragment-size-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[831-small-app-data-large-fragment-size-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-831]
ApplicationData = 4097
MaxFragmentSize = 16384
Serialize = Server


# ===========================================================

[832-medium-app-data]
ssl_conf = 832-medium-app-data-ssl

[832-medium-app-data-ssl]
server = 832-medium-app-data-server
client = 832-medium-app-data-client

[832-medium-app-data-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[832-medium-app-data-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-832]
ApplicationData = 32775
Serialize = Server


# ===========================================================

[833-medium-plus-app-data]
ssl_conf = 833-medium-plus-app-data-ssl

[833-medium-plus-app-data-ssl]
server = 833-medium-plus-app-data-server
client = 833-medium-plus-app-data-client

[833-medium-plus-app-data-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[833-medium-plus-app-data-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-833]
ApplicationData = 131069
Serialize = Server


# ===========================================================

[834-large-app-data]
ssl_conf = 834-large-app-data-ssl

[834-large-app-data-ssl]
server = 834-large-app-data-server
client = 834-large-app-data-client

[834-large-app-data-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[834-large-app-data-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-834]
ApplicationData = 1048576
Serialize = Server


# ===========================================================

[835-large-app-data-large-fragment-size]
ssl_conf = 835-large-app-data-large-fragment-size-ssl

[835-large-app-data-large-fragment-size-ssl]
server = 835-large-app-data-large-fragment-size-server
client = 835-large-app-data-large-fragment-size-client

[835-large-app-data-large-fragment-size-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[835-large-app-data-large-fragment-size-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-835]
ApplicationData = 1048576
MaxFragmentSize = 16384
Serialize = Server


# ===========================================================

[836-large-app-data-odd-fragment-size]
ssl_conf = 836-large-app-data-odd-fragment-size-ssl

[836-large-app-data-odd-fragment-size-ssl]
server = 836-large-app-data-odd-fragment-size-server
client = 836-large-app-data-odd-fragment-size-client

[836-large-app-data-odd-fragment-size-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[836-large-app-data-odd-fragment-size-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-836]
ApplicationData = 1048576
MaxFragmentSize = 5115
Serialize = Server


# ===========================================================

[837-large-app-data-aes-sha1-multibuffer]
ssl_conf = 837-large-app-data-aes-sha1-multibuffer-ssl

[837-large-app-data-aes-sha1-multibuffer-ssl]
server = 837-large-app-data-aes-sha1-multibuffer-server
client = 837-large-app-data-aes-sha1-multibuffer-client

[837-large-app-data-aes-sha1-multibuffer-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[837-large-app-data-aes-sha1-multibuffer-client]
CipherString = AES128-SHA
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-837]
ApplicationData = 1048576
MaxFragmentSize = 4096
Serialize = Server


# ===========================================================

[838-large-app-data-aes-sha2-multibuffer]
ssl_conf = 838-large-app-data-aes-sha2-multibuffer-ssl

[838-large-app-data-aes-sha2-multibuffer-ssl]
server = 838-large-app-data-aes-sha2-multibuffer-server
client = 838-large-app-data-aes-sha2-multibuffer-client

[838-large-app-data-aes-sha2-multibuffer-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[838-large-app-data-aes-sha2-multibuffer-client]
CipherString = AES128-SHA256
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-838]
ApplicationData = 1048576
MaxFragmentSize = 4096
Serialize = Server


# ===========================================================

[839-large-app-data-aes-sha1-multibuffer-odd-fragment]
ssl_conf = 839-large-app-data-aes-sha1-multibuffer-odd-fragment-ssl

[839-large-app-data-aes-sha1-multibuffer-odd-fragment-ssl]
server = 839-large-app-data-aes-sha1-multibuffer-odd-fragment-server
client = 839-large-app-data-aes-sha1-multibuffer-odd-fragment-client

[839-large-app-data-aes-sha1-multibuffer-odd-fragment-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[839-large-app-data-aes-sha1-multibuffer-odd-fragment-client]
CipherString = AES128-SHA
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-839]
ApplicationData = 1048579
MaxFragmentSize = 5115
Serialize = Server


# ===========================================================

[840-large-app-data-aes-sha2-multibuffer-odd-fragment]
ssl_conf = 840-large-app-data-aes-sha2-multibuffer-odd-fragment-ssl

[840-large-app-data-aes-sha2-multibuffer-odd-fragment-ssl]
server = 840-large-app-data-aes-sha2-multibuffer-odd-fragment-server
client = 840-large-app-data-aes-sha2-multibuffer-odd-fragment-client

[840-large-app-data-aes-sha2-multibuffer-odd-fragment-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[840-large-app-data-aes-sha2-multibuffer-odd-fragment-client]
CipherString = AES128-SHA256
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-840]
ApplicationData = 1048573
MaxFragmentSize = 5125
Serialize = Server


# ===========================================================

[841-small-app-data-aes-sha1-multibuffer]
ssl_conf = 841-small-app-data-aes-sha1-multibuffer-ssl

[841-small-app-data-aes-sha1-multibuffer-ssl]
server = 841-small-app-data-aes-sha1-multibuffer-server
client = 841-small-app-data-aes-sha1-multibuffer-client

[841-small-app-data-aes-sha1-multibuffer-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[841-small-app-data-aes-sha1-multibuffer-client]
CipherString = AES128-SHA
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-841]
ApplicationData = 4096
MaxFragmentSize = 4096
Serialize = Server


# ===========================================================

[842-small-app-data-aes-sha2-multibuffer]
ssl_conf = 842-small-app-data-aes-sha2-multibuffer-ssl

[842-small-app-data-aes-sha2-multibuffer-ssl]
server = 842-small-app-data-aes-sha2-multibuffer-server
client = 842-small-app-data-aes-sha2-multibuffer-client

[842-small-app-data-aes-sha2-multibuffer-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[842-small-app-data-aes-sha2-multibuffer-client]
CipherString = AES128-SHA256
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-842]
ApplicationData = 4096
MaxFragmentSize = 4096
Serialize = Server


# ===========================================================

[843-Maximum Fragment Len extension set to 1024 w. FragmentSize disabled]
ssl_conf = 843-Maximum Fragment Len extension set to 1024 w. FragmentSize disabled-ssl

[843-Maximum Fragment Len extension set to 1024 w. FragmentSize disabled-ssl]
server = 843-Maximum Fragment Len extension set to 1024 w. FragmentSize disabled-server
client = 843-Maximum Fragment Len extension set to 1024 w. FragmentSize disabled-client

[843-Maximum Fragment Len extension set to 1024 w. FragmentSize disabled-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[843-Maximum Fragment Len extension set to 1024 w. FragmentSize disabled-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-843]
ApplicationData = 3072
MaxFragmentSize = 16384
Serialize = Server
client = 843-Maximum Fragment Len extension set to 1024 w. FragmentSize disabled-client-extra

[843-Maximum Fragment Len extension set to 1024 w. FragmentSize disabled-client-extra]
MaxFragmentLenExt = 1024


# ===========================================================

[844-Maximum Fragment Len extension equal FragmentSize to 2048]
ssl_conf = 844-Maximum Fragment Len extension equal FragmentSize to 2048-ssl

[844-Maximum Fragment Len extension equal FragmentSize to 2048-ssl]
server = 844-Maximum Fragment Len extension equal FragmentSize to 2048-server
client = 844-Maximum Fragment Len extension equal FragmentSize to 2048-client

[844-Maximum Fragment Len extension equal FragmentSize to 2048-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[844-Maximum Fragment Len extension equal FragmentSize to 2048-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-844]
ApplicationData = 3072
MaxFragmentSize = 2048
Serialize = Server
client = 844-Maximum Fragment Len extension equal FragmentSize to 2048-client-extra

[844-Maximum Fragment Len extension equal FragmentSize to 2048-client-extra]
MaxFragmentLenExt = 2048


# ===========================================================

[845-Maximum Fragment Len extension 512 lower than FragmentSize 1024]
ssl_conf = 845-Maximum Fragment Len extension 512 lower than FragmentSize 1024-ssl

[845-Maximum Fragment Len extension 512 lower than FragmentSize 1024-ssl]
server = 845-Maximum Fragment Len extension 512 lower than FragmentSize 1024-server
client = 845-Maximum Fragment Len extension 512 lower than FragmentSize 1024-client

[845-Maximum Fragment Len extension 512 lower than FragmentSize 1024-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[845-Maximum Fragment Len extension 512 lower than FragmentSize 1024-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-845]
ApplicationData = 3072
MaxFragmentSize = 1024
Serialize = Server
client = 845-Maximum Fragment Len extension 512 lower than FragmentSize 1024-client-extra

[845-Maximum Fragment Len extension 512 lower than FragmentSize 1024-client-extra]
MaxFragmentLenExt = 512


# ===========================================================

[846-Maximum Fragment Len extension 1024 lower than FragmentSize 1024]
ssl_conf = 846-Maximum Fragment Len extension 1024 lower than FragmentSize 1024-ssl

[846-Maximum Fragment Len extension 1024 lower than FragmentSize 1024-ssl]
server = 846-Maximum Fragment Len extension 1024 lower than FragmentSize 1024-server
client = 846-Maximum Fragment Len extension 1024 lower than FragmentSize 1024-client

[846-Maximum Fragment Len extension 1024 lower than FragmentSize 1024-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[846-Maximum Fragment Len extension 1024 lower than FragmentSize 1024-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-846]
ApplicationData = 3072
MaxFragmentSize = 1024
Serialize = Server
client = 846-Maximum Fragment Len extension 1024 lower than FragmentSize 1024-client-extra

[846-Maximum Fragment Len extension 1024 lower than FragmentSize 1024-client-extra]
MaxFragmentLenExt = 2048


# ===========================================================

[847-Maximum Fragment Len extension 4096 greater than FragmentSize 2048]
ssl_conf = 847-Maximum Fragment Len extension 4096 greater than FragmentSize 2048-ssl

[847-Maximum Fragment Len extension 4096 greater than FragmentSize 2048-ssl]
server = 847-Maximum Fragment Len extension 4096 greater than FragmentSize 2048-server
client = 847-Maximum Fragment Len extension 4096 greater than FragmentSize 2048-client

[847-Maximum Fragment Len extension 4096 greater than FragmentSize 2048-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[847-Maximum Fragment Len extension 4096 greater than FragmentSize 2048-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-847]
ApplicationData = 8196
MaxFragmentSize = 2048
Serialize = Server
client = 847-Maximum Fragment Len extension 4096 greater than FragmentSize 2048-client-extra

[847-Maximum Fragment Len extension 4096 greater than FragmentSize 2048-client-extra]
MaxFragmentLenExt = 4096


# ===========================================================

[848-Maximum Fragment Len extension 2048 greater than FragmentSize 1024]
ssl_conf = 848-Maximum Fragment Len extension 2048 greater than FragmentSize 1024-ssl

[848-Maximum Fragment Len extension 2048 greater than FragmentSize 1024-ssl]
server = 848-Maximum Fragment Len extension 2048 greater than FragmentSize 1024-server
client = 848-Maximum Fragment Len extension 2048 greater than FragmentSize 1024-client

[848-Maximum Fragment Len extension 2048 greater than FragmentSize 1024-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[848-Maximum Fragment Len extension 2048 greater than FragmentSize 1024-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-848]
ApplicationData = 3072
MaxFragmentSize = 1024
Serialize = Server
client = 848-Maximum Fragment Len extension 2048 greater than FragmentSize 1024-client-extra

[848-Maximum Fragment Len extension 2048 greater than FragmentSize 1024-client-extra]
MaxFragmentLenExt = 2048


# ===========================================================

[849-curve-sect163k1]
ssl_conf = 849-curve-sect163k1-ssl

[849-curve-sect163k1-ssl]
server = 849-curve-sect163k1-server
client = 849-curve-sect163k1-client

[849-curve-sect163k1-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Curves = sect163k1
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[849-curve-sect163k1-client]
CipherString = ECDHE
Curves = sect163k1
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-849]
ExpectedResult = Success
ExpectedTmpKeyType = sect163k1
Serialize = Server


# ===========================================================

[850-curve-sect163r1]
ssl_conf = 850-curve-sect163r1-ssl

[850-curve-sect163r1-ssl]
server = 850-curve-sect163r1-server
client = 850-curve-sect163r1-client

[850-curve-sect163r1-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Curves = sect163r1
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[850-curve-sect163r1-client]
CipherString = ECDHE
Curves = sect163r1
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-850]
ExpectedResult = Success
ExpectedTmpKeyType = sect163r1
Serialize = Server


# ===========================================================

[851-curve-sect163r2]
ssl_conf = 851-curve-sect163r2-ssl

[851-curve-sect163r2-ssl]
server = 851-curve-sect163r2-server
client = 851-curve-sect163r2-client

[851-curve-sect163r2-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Curves = sect163r2
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[851-curve-sect163r2-client]
CipherString = ECDHE
Curves = sect163r2
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-851]
ExpectedResult = Success
ExpectedTmpKeyType = sect163r2
Serialize = Server


# ===========================================================

[852-curve-sect193r1]
ssl_conf = 852-curve-sect193r1-ssl

[852-curve-sect193r1-ssl]
server = 852-curve-sect193r1-server
client = 852-curve-sect193r1-client

[852-curve-sect193r1-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Curves = sect193r1
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[852-curve-sect193r1-client]
CipherString = ECDHE
Curves = sect193r1
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-852]
ExpectedResult = Success
ExpectedTmpKeyType = sect193r1
Serialize = Server


# ===========================================================

[853-curve-sect193r2]
ssl_conf = 853-curve-sect193r2-ssl

[853-curve-sect193r2-ssl]
server = 853-curve-sect193r2-server
client = 853-curve-sect193r2-client

[853-curve-sect193r2-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Curves = sect193r2
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[853-curve-sect193r2-client]
CipherString = ECDHE
Curves = sect193r2
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-853]
ExpectedResult = Success
ExpectedTmpKeyType = sect193r2
Serialize = Server


# ===========================================================

[854-curve-sect233k1]
ssl_conf = 854-curve-sect233k1-ssl

[854-curve-sect233k1-ssl]
server = 854-curve-sect233k1-server
client = 854-curve-sect233k1-client

[854-curve-sect233k1-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Curves = sect233k1
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[854-curve-sect233k1-client]
CipherString = ECDHE
Curves = sect233k1
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-854]
ExpectedResult = Success
ExpectedTmpKeyType = sect233k1
Serialize = Server


# ===========================================================

[855-curve-sect233r1]
ssl_conf = 855-curve-sect233r1-ssl

[855-curve-sect233r1-ssl]
server = 855-curve-sect233r1-server
client = 855-curve-sect233r1-client

[855-curve-sect233r1-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Curves = sect233r1
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[855-curve-sect233r1-client]
CipherString = ECDHE
Curves = sect233r1
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-855]
ExpectedResult = Success
ExpectedTmpKeyType = sect233r1
Serialize = Server


# ===========================================================

[856-curve-sect239k1]
ssl_conf = 856-curve-sect239k1-ssl

[856-curve-sect239k1-ssl]
server = 856-curve-sect239k1-server
client = 856-curve-sect239k1-client

[856-curve-sect239k1-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Curves = sect239k1
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[856-curve-sect239k1-client]
CipherString = ECDHE
Curves = sect239k1
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-856]
ExpectedResult = Success
ExpectedTmpKeyType = sect239k1
Serialize = Server


# ===========================================================

[857-curve-sect283k1]
ssl_conf = 857-curve-sect283k1-ssl

[857-curve-sect283k1-ssl]
server = 857-curve-sect283k1-server
client = 857-curve-sect283k1-client

[857-curve-sect283k1-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Curves = sect283k1
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[857-curve-sect283k1-client]
CipherString = ECDHE
Curves = sect283k1
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-857]
ExpectedResult = Success
ExpectedTmpKeyType = sect283k1
Serialize = Server


# ===========================================================

[858-curve-sect283r1]
ssl_conf = 858-curve-sect283r1-ssl

[858-curve-sect283r1-ssl]
server = 858-curve-sect283r1-server
client = 858-curve-sect283r1-client

[858-curve-sect283r1-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Curves = sect283r1
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[858-curve-sect283r1-client]
CipherString = ECDHE
Curves = sect283r1
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-858]
ExpectedResult = Success
ExpectedTmpKeyType = sect283r1
Serialize = Server


# ===========================================================

[859-curve-sect409k1]
ssl_conf = 859-curve-sect409k1-ssl

[859-curve-sect409k1-ssl]
server = 859-curve-sect409k1-server
client = 859-curve-sect409k1-client

[859-curve-sect409k1-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Curves = sect409k1
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[859-curve-sect409k1-client]
CipherString = ECDHE
Curves = sect409k1
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-859]
ExpectedResult = Success
ExpectedTmpKeyType = sect409k1
Serialize = Server


# ===========================================================

[860-curve-sect409r1]
ssl_conf = 860-curve-sect409r1-ssl

[860-curve-sect409r1-ssl]
server = 860-curve-sect409r1-server
client = 860-curve-sect409r1-client

[860-curve-sect409r1-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Curves = sect409r1
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[860-curve-sect409r1-client]
CipherString = ECDHE
Curves = sect409r1
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-860]
ExpectedResult = Success
ExpectedTmpKeyType = sect409r1
Serialize = Server


# ===========================================================

[861-curve-sect571k1]
ssl_conf = 861-curve-sect571k1-ssl

[861-curve-sect571k1-ssl]
server = 861-curve-sect571k1-server
client = 861-curve-sect571k1-client

[861-curve-sect571k1-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Curves = sect571k1
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[861-curve-sect571k1-client]
CipherString = ECDHE
Curves = sect571k1
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-861]
ExpectedResult = Success
ExpectedTmpKeyType = sect571k1
Serialize = Server


# ===========================================================

[862-curve-sect571r1]
ssl_conf = 862-curve-sect571r1-ssl

[862-curve-sect571r1-ssl]
server = 862-curve-sect571r1-server
client = 862-curve-sect571r1-client

[862-curve-sect571r1-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Curves = sect571r1
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[862-curve-sect571r1-client]
CipherString = ECDHE
Curves = sect571r1
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-862]
ExpectedResult = Success
ExpectedTmpKeyType = sect571r1
Serialize = Server


# ===========================================================

[863-curve-secp160k1]
ssl_conf = 863-curve-secp160k1-ssl

[863-curve-secp160k1-ssl]
server = 863-curve-secp160k1-server
client = 863-curve-secp160k1-client

[863-curve-secp160k1-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Curves = secp160k1
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[863-curve-secp160k1-client]
CipherString = ECDHE
Curves = secp160k1
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-863]
ExpectedResult = Success
ExpectedTmpKeyType = secp160k1
Serialize = Server


# ===========================================================

[864-curve-secp160r1]
ssl_conf = 864-curve-secp160r1-ssl

[864-curve-secp160r1-ssl]
server = 864-curve-secp160r1-server
client = 864-curve-secp160r1-client

[864-curve-secp160r1-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Curves = secp160r1
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[864-curve-secp160r1-client]
CipherString = ECDHE
Curves = secp160r1
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-864]
ExpectedResult = Success
ExpectedTmpKeyType = secp160r1
Serialize = Server


# ===========================================================

[865-curve-secp160r2]
ssl_conf = 865-curve-secp160r2-ssl

[865-curve-secp160r2-ssl]
server = 865-curve-secp160r2-server
client = 865-curve-secp160r2-client

[865-curve-secp160r2-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Curves = secp160r2
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[865-curve-secp160r2-client]
CipherString = ECDHE
Curves = secp160r2
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-865]
ExpectedResult = Success
ExpectedTmpKeyType = secp160r2
Serialize = Server


# ===========================================================

[866-curve-secp192k1]
ssl_conf = 866-curve-secp192k1-ssl

[866-curve-secp192k1-ssl]
server = 866-curve-secp192k1-server
client = 866-curve-secp192k1-client

[866-curve-secp192k1-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Curves = secp192k1
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[866-curve-secp192k1-client]
CipherString = ECDHE
Curves = secp192k1
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-866]
ExpectedResult = Success
ExpectedTmpKeyType = secp192k1
Serialize = Server


# ===========================================================

[867-curve-prime192v1]
ssl_conf = 867-curve-prime192v1-ssl

[867-curve-prime192v1-ssl]
server = 867-curve-prime192v1-server
client = 867-curve-prime192v1-client

[867-curve-prime192v1-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Curves = prime192v1
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[867-curve-prime192v1-client]
CipherString = ECDHE
Curves = prime192v1
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-867]
ExpectedResult = Success
ExpectedTmpKeyType = prime192v1
Serialize = Server


# ===========================================================

[868-curve-secp224k1]
ssl_conf = 868-curve-secp224k1-ssl

[868-curve-secp224k1-ssl]
server = 868-curve-secp224k1-server
client = 868-curve-secp224k1-client

[868-curve-secp224k1-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Curves = secp224k1
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[868-curve-secp224k1-client]
CipherString = ECDHE
Curves = secp224k1
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-868]
ExpectedResult = Success
ExpectedTmpKeyType = secp224k1
Serialize = Server


# ===========================================================

[869-curve-secp224r1]
ssl_conf = 869-curve-secp224r1-ssl

[869-curve-secp224r1-ssl]
server = 869-curve-secp224r1-server
client = 869-curve-secp224r1-client

[869-curve-secp224r1-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Curves = secp224r1
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[869-curve-secp224r1-client]
CipherString = ECDHE
Curves = secp224r1
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-869]
ExpectedResult = Success
ExpectedTmpKeyType = secp224r1
Serialize = Server


# ===========================================================

[870-curve-secp256k1]
ssl_conf = 870-curve-secp256k1-ssl

[870-curve-secp256k1-ssl]
server = 870-curve-secp256k1-server
client = 870-curve-secp256k1-client

[870-curve-secp256k1-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Curves = secp256k1
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[870-curve-secp256k1-client]
CipherString = ECDHE
Curves = secp256k1
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-870]
ExpectedResult = Success
ExpectedTmpKeyType = secp256k1
Serialize = Server


# ===========================================================

[871-curve-prime256v1]
ssl_conf = 871-curve-prime256v1-ssl

[871-curve-prime256v1-ssl]
server = 871-curve-prime256v1-server
client = 871-curve-prime256v1-client

[871-curve-prime256v1-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Curves = prime256v1
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[871-curve-prime256v1-client]
CipherString = ECDHE
Curves = prime256v1
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-871]
ExpectedResult = Success
ExpectedTmpKeyType = prime256v1
Serialize = Server


# ===========================================================

[872-curve-secp384r1]
ssl_conf = 872-curve-secp384r1-ssl

[872-curve-secp384r1-ssl]
server = 872-curve-secp384r1-server
client = 872-curve-secp384r1-client

[872-curve-secp384r1-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Curves = secp384r1
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[872-curve-secp384r1-client]
CipherString = ECDHE
Curves = secp384r1
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-872]
ExpectedResult = Success
ExpectedTmpKeyType = secp384r1
Serialize = Server


# ===========================================================

[873-curve-secp521r1]
ssl_conf = 873-curve-secp521r1-ssl

[873-curve-secp521r1-ssl]
server = 873-curve-secp521r1-server
client = 873-curve-secp521r1-client

[873-curve-secp521r1-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Curves = secp521r1
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[873-curve-secp521r1-client]
CipherString = ECDHE
Curves = secp521r1
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-873]
ExpectedResult = Success
ExpectedTmpKeyType = secp521r1
Serialize = Server


# ===========================================================

[874-curve-brainpoolP256r1]
ssl_conf = 874-curve-brainpoolP256r1-ssl

[874-curve-brainpoolP256r1-ssl]
server = 874-curve-brainpoolP256r1-server
client = 874-curve-brainpoolP256r1-client

[874-curve-brainpoolP256r1-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Curves = brainpoolP256r1
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[874-curve-brainpoolP256r1-client]
CipherString = ECDHE
Curves = brainpoolP256r1
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-874]
ExpectedResult = Success
ExpectedTmpKeyType = brainpoolP256r1
Serialize = Server


# ===========================================================

[875-curve-brainpoolP384r1]
ssl_conf = 875-curve-brainpoolP384r1-ssl

[875-curve-brainpoolP384r1-ssl]
server = 875-curve-brainpoolP384r1-server
client = 875-curve-brainpoolP384r1-client

[875-curve-brainpoolP384r1-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Curves = brainpoolP384r1
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[875-curve-brainpoolP384r1-client]
CipherString = ECDHE
Curves = brainpoolP384r1
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-875]
ExpectedResult = Success
ExpectedTmpKeyType = brainpoolP384r1
Serialize = Server


# ===========================================================

[876-curve-brainpoolP512r1]
ssl_conf = 876-curve-brainpoolP512r1-ssl

[876-curve-brainpoolP512r1-ssl]
server = 876-curve-brainpoolP512r1-server
client = 876-curve-brainpoolP512r1-client

[876-curve-brainpoolP512r1-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Curves = brainpoolP512r1
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[876-curve-brainpoolP512r1-client]
CipherString = ECDHE
Curves = brainpoolP512r1
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-876]
ExpectedResult = Success
ExpectedTmpKeyType = brainpoolP512r1
Serialize = Server


# ===========================================================

[877-curve-X25519]
ssl_conf = 877-curve-X25519-ssl

[877-curve-X25519-ssl]
server = 877-curve-X25519-server
client = 877-curve-X25519-client

[877-curve-X25519-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Curves = X25519
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[877-curve-X25519-client]
CipherString = ECDHE
Curves = X25519
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-877]
ExpectedResult = Success
ExpectedTmpKeyType = X25519
Serialize = Server


# ===========================================================

[878-curve-X448]
ssl_conf = 878-curve-X448-ssl

[878-curve-X448-ssl]
server = 878-curve-X448-server
client = 878-curve-X448-client

[878-curve-X448-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Curves = X448
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[878-curve-X448-client]
CipherString = ECDHE
Curves = X448
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-878]
ExpectedResult = Success
ExpectedTmpKeyType = X448
Serialize = Server


# ===========================================================

[879-certstatus-good]
ssl_conf = 879-certstatus-good-ssl

[879-certstatus-good-ssl]
server = 879-certstatus-good-server
client = 879-certstatus-good-client

[879-certstatus-good-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[879-certstatus-good-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-879]
ExpectedResult = Success
Method = TLS
Serialize = Server
server = 879-certstatus-good-server-extra

[879-certstatus-good-server-extra]
CertStatus = GoodResponse


# ===========================================================

[880-certstatus-bad]
ssl_conf = 880-certstatus-bad-ssl

[880-certstatus-bad-ssl]
server = 880-certstatus-bad-server
client = 880-certstatus-bad-client

[880-certstatus-bad-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[880-certstatus-bad-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-880]
ExpectedResult = ClientFail
Method = TLS
Serialize = Server
server = 880-certstatus-bad-server-extra

[880-certstatus-bad-server-extra]
CertStatus = BadResponse


# ===========================================================

[881-renegotiate-client-no-resume]
ssl_conf = 881-renegotiate-client-no-resume-ssl

[881-renegotiate-client-no-resume-ssl]
server = 881-renegotiate-client-no-resume-server
client = 881-renegotiate-client-no-resume-client

[881-renegotiate-client-no-resume-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
Options = NoResumptionOnRenegotiation
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[881-renegotiate-client-no-resume-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-881]
ExpectedResult = Success
HandshakeMode = RenegotiateClient
Method = TLS
ResumptionExpected = No
Serialize = Server


# ===========================================================

[882-renegotiate-client-resume]
ssl_conf = 882-renegotiate-client-resume-ssl

[882-renegotiate-client-resume-ssl]
server = 882-renegotiate-client-resume-server
client = 882-renegotiate-client-resume-client

[882-renegotiate-client-resume-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[882-renegotiate-client-resume-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-882]
ExpectedResult = Success
HandshakeMode = RenegotiateClient
Method = TLS
ResumptionExpected = Yes
Serialize = Server


# ===========================================================

[883-renegotiate-server-no-resume]
ssl_conf = 883-renegotiate-server-no-resume-ssl

[883-renegotiate-server-no-resume-ssl]
server = 883-renegotiate-server-no-resume-server
client = 883-renegotiate-server-no-resume-client

[883-renegotiate-server-no-resume-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
Options = NoResumptionOnRenegotiation
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[883-renegotiate-server-no-resume-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-883]
ExpectedResult = Success
HandshakeMode = RenegotiateServer
Method = TLS
ResumptionExpected = No
Serialize = Server


# ===========================================================

[884-renegotiate-server-resume]
ssl_conf = 884-renegotiate-server-resume-ssl

[884-renegotiate-server-resume-ssl]
server = 884-renegotiate-server-resume-server
client = 884-renegotiate-server-resume-client

[884-renegotiate-server-resume-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[884-renegotiate-server-resume-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-884]
ExpectedResult = Success
HandshakeMode = RenegotiateServer
Method = TLS
ResumptionExpected = Yes
Serialize = Server


# ===========================================================

[885-renegotiate-client-auth-require]
ssl_conf = 885-renegotiate-client-auth-require-ssl

[885-renegotiate-client-auth-require-ssl]
server = 885-renegotiate-client-auth-require-server
client = 885-renegotiate-client-auth-require-client

[885-renegotiate-client-auth-require-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
Options = NoResumptionOnRenegotiation
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/root-cert.pem
VerifyMode = Require

[885-renegotiate-client-auth-require-client]
Certificate = ${ENV::TEST_CERTS_DIR}/ee-client-chain.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/ee-key.pem
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-885]
ExpectedResult = Success
HandshakeMode = RenegotiateServer
Method = TLS
ResumptionExpected = No
Serialize = Server


# ===========================================================

[886-renegotiate-client-auth-once]
ssl_conf = 886-renegotiate-client-auth-once-ssl

[886-renegotiate-client-auth-once-ssl]
server = 886-renegotiate-client-auth-once-server
client = 886-renegotiate-client-auth-once-client

[886-renegotiate-client-auth-once-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
Options = NoResumptionOnRenegotiation
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/root-cert.pem
VerifyMode = Once

[886-renegotiate-client-auth-once-client]
Certificate = ${ENV::TEST_CERTS_DIR}/ee-client-chain.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/ee-key.pem
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-886]
ExpectedResult = Success
HandshakeMode = RenegotiateServer
Method = TLS
ResumptionExpected = No
Serialize = Server


# ===========================================================

[887-renegotiate-aead-to-non-aead]
ssl_conf = 887-renegotiate-aead-to-non-aead-ssl

[887-renegotiate-aead-to-non-aead-ssl]
server = 887-renegotiate-aead-to-non-aead-server
client = 887-renegotiate-aead-to-non-aead-client

[887-renegotiate-aead-to-non-aead-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = NoResumptionOnRenegotiation
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[887-renegotiate-aead-to-non-aead-client]
CipherString = AES128-GCM-SHA256
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-887]
ExpectedResult = Success
HandshakeMode = RenegotiateClient
Method = TLS
ResumptionExpected = No
Serialize = Server
client = 887-renegotiate-aead-to-non-aead-client-extra

[887-renegotiate-aead-to-non-aead-client-extra]
RenegotiateCiphers = AES128-SHA


# ===========================================================

[888-renegotiate-non-aead-to-aead]
ssl_conf = 888-renegotiate-non-aead-to-aead-ssl

[888-renegotiate-non-aead-to-aead-ssl]
server = 888-renegotiate-non-aead-to-aead-server
client = 888-renegotiate-non-aead-to-aead-client

[888-renegotiate-non-aead-to-aead-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = NoResumptionOnRenegotiation
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[888-renegotiate-non-aead-to-aead-client]
CipherString = AES128-SHA
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-888]
ExpectedResult = Success
HandshakeMode = RenegotiateClient
Method = TLS
ResumptionExpected = No
Serialize = Server
client = 888-renegotiate-non-aead-to-aead-client-extra

[888-renegotiate-non-aead-to-aead-client-extra]
RenegotiateCiphers = AES128-GCM-SHA256


# ===========================================================

[889-renegotiate-non-aead-to-non-aead]
ssl_conf = 889-renegotiate-non-aead-to-non-aead-ssl

[889-renegotiate-non-aead-to-non-aead-ssl]
server = 889-renegotiate-non-aead-to-non-aead-server
client = 889-renegotiate-non-aead-to-non-aead-client

[889-renegotiate-non-aead-to-non-aead-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = NoResumptionOnRenegotiation
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[889-renegotiate-non-aead-to-non-aead-client]
CipherString = AES128-SHA
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-889]
ExpectedResult = Success
HandshakeMode = RenegotiateClient
Method = TLS
ResumptionExpected = No
Serialize = Server
client = 889-renegotiate-non-aead-to-non-aead-client-extra

[889-renegotiate-non-aead-to-non-aead-client-extra]
RenegotiateCiphers = AES256-SHA


# ===========================================================

[890-renegotiate-aead-to-aead]
ssl_conf = 890-renegotiate-aead-to-aead-ssl

[890-renegotiate-aead-to-aead-ssl]
server = 890-renegotiate-aead-to-aead-server
client = 890-renegotiate-aead-to-aead-client

[890-renegotiate-aead-to-aead-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = NoResumptionOnRenegotiation
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[890-renegotiate-aead-to-aead-client]
CipherString = AES128-GCM-SHA256
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-890]
ExpectedResult = Success
HandshakeMode = RenegotiateClient
Method = TLS
ResumptionExpected = No
Serialize = Server
client = 890-renegotiate-aead-to-aead-client-extra

[890-renegotiate-aead-to-aead-client-extra]
RenegotiateCiphers = AES256-GCM-SHA384


# ===========================================================

[891-no-renegotiation-server-by-client]
ssl_conf = 891-no-renegotiation-server-by-client-ssl

[891-no-renegotiation-server-by-client-ssl]
server = 891-no-renegotiation-server-by-client-server
client = 891-no-renegotiation-server-by-client-client

[891-no-renegotiation-server-by-client-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
Options = NoRenegotiation
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[891-no-renegotiation-server-by-client-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-891]
ExpectedResult = ClientFail
HandshakeMode = RenegotiateClient
Method = TLS
ResumptionExpected = No
Serialize = Server


# ===========================================================

[892-no-renegotiation-server-by-server]
ssl_conf = 892-no-renegotiation-server-by-server-ssl

[892-no-renegotiation-server-by-server-ssl]
server = 892-no-renegotiation-server-by-server-server
client = 892-no-renegotiation-server-by-server-client

[892-no-renegotiation-server-by-server-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
Options = NoRenegotiation
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[892-no-renegotiation-server-by-server-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-892]
ExpectedResult = ServerFail
HandshakeMode = RenegotiateServer
Method = TLS
ResumptionExpected = No
Serialize = Server


# ===========================================================

[893-no-renegotiation-client-by-server]
ssl_conf = 893-no-renegotiation-client-by-server-ssl

[893-no-renegotiation-client-by-server-ssl]
server = 893-no-renegotiation-client-by-server-server
client = 893-no-renegotiation-client-by-server-client

[893-no-renegotiation-client-by-server-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[893-no-renegotiation-client-by-server-client]
CipherString = DEFAULT
Options = NoRenegotiation
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-893]
ExpectedResult = ServerFail
HandshakeMode = RenegotiateServer
Method = TLS
ResumptionExpected = No
Serialize = Server


# ===========================================================

[894-no-renegotiation-client-by-client]
ssl_conf = 894-no-renegotiation-client-by-client-ssl

[894-no-renegotiation-client-by-client-ssl]
server = 894-no-renegotiation-client-by-client-server
client = 894-no-renegotiation-client-by-client-client

[894-no-renegotiation-client-by-client-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[894-no-renegotiation-client-by-client-client]
CipherString = DEFAULT
Options = NoRenegotiation
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-894]
ExpectedResult = ClientFail
HandshakeMode = RenegotiateClient
Method = TLS
ResumptionExpected = No
Serialize = Server


# ===========================================================

[895-disable-encrypt-then-mac-server-sha]
ssl_conf = 895-disable-encrypt-then-mac-server-sha-ssl

[895-disable-encrypt-then-mac-server-sha-ssl]
server = 895-disable-encrypt-then-mac-server-sha-server
client = 895-disable-encrypt-then-mac-server-sha-client

[895-disable-encrypt-then-mac-server-sha-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = -EncryptThenMac
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[895-disable-encrypt-then-mac-server-sha-client]
CipherString = AES128-SHA
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-895]
ExpectedResult = Success
Serialize = Server


# ===========================================================

[896-disable-encrypt-then-mac-client-sha]
ssl_conf = 896-disable-encrypt-then-mac-client-sha-ssl

[896-disable-encrypt-then-mac-client-sha-ssl]
server = 896-disable-encrypt-then-mac-client-sha-server
client = 896-disable-encrypt-then-mac-client-sha-client

[896-disable-encrypt-then-mac-client-sha-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[896-disable-encrypt-then-mac-client-sha-client]
CipherString = AES128-SHA
MaxProtocol = TLSv1.2
Options = -EncryptThenMac
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-896]
ExpectedResult = Success
Serialize = Server


# ===========================================================

[897-disable-encrypt-then-mac-both-sha]
ssl_conf = 897-disable-encrypt-then-mac-both-sha-ssl

[897-disable-encrypt-then-mac-both-sha-ssl]
server = 897-disable-encrypt-then-mac-both-sha-server
client = 897-disable-encrypt-then-mac-both-sha-client

[897-disable-encrypt-then-mac-both-sha-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = -EncryptThenMac
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[897-disable-encrypt-then-mac-both-sha-client]
CipherString = AES128-SHA
MaxProtocol = TLSv1.2
Options = -EncryptThenMac
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-897]
ExpectedResult = Success
Serialize = Server


# ===========================================================

[898-disable-encrypt-then-mac-server-sha2]
ssl_conf = 898-disable-encrypt-then-mac-server-sha2-ssl

[898-disable-encrypt-then-mac-server-sha2-ssl]
server = 898-disable-encrypt-then-mac-server-sha2-server
client = 898-disable-encrypt-then-mac-server-sha2-client

[898-disable-encrypt-then-mac-server-sha2-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = -EncryptThenMac
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[898-disable-encrypt-then-mac-server-sha2-client]
CipherString = AES128-SHA256
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-898]
ExpectedResult = Success
Serialize = Server


# ===========================================================

[899-disable-encrypt-then-mac-client-sha2]
ssl_conf = 899-disable-encrypt-then-mac-client-sha2-ssl

[899-disable-encrypt-then-mac-client-sha2-ssl]
server = 899-disable-encrypt-then-mac-client-sha2-server
client = 899-disable-encrypt-then-mac-client-sha2-client

[899-disable-encrypt-then-mac-client-sha2-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[899-disable-encrypt-then-mac-client-sha2-client]
CipherString = AES128-SHA256
MaxProtocol = TLSv1.2
Options = -EncryptThenMac
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-899]
ExpectedResult = Success
Serialize = Server


# ===========================================================

[900-disable-encrypt-then-mac-both-sha2]
ssl_conf = 900-disable-encrypt-then-mac-both-sha2-ssl

[900-disable-encrypt-then-mac-both-sha2-ssl]
server = 900-disable-encrypt-then-mac-both-sha2-server
client = 900-disable-encrypt-then-mac-both-sha2-client

[900-disable-encrypt-then-mac-both-sha2-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = -EncryptThenMac
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[900-disable-encrypt-then-mac-both-sha2-client]
CipherString = AES128-SHA256
MaxProtocol = TLSv1.2
Options = -EncryptThenMac
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-900]
ExpectedResult = Success
Serialize = Server


# ===========================================================

[901-ECDSA CipherString Selection]
ssl_conf = 901-ECDSA CipherString Selection-ssl

[901-ECDSA CipherString Selection-ssl]
server = 901-ECDSA CipherString Selection-server
client = 901-ECDSA CipherString Selection-client

[901-ECDSA CipherString Selection-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
ECDSA.Certificate = ${ENV::TEST_CERTS_DIR}/server-ecdsa-cert.pem
ECDSA.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ecdsa-key.pem
Ed25519.Certificate = ${ENV::TEST_CERTS_DIR}/server-ed25519-cert.pem
Ed25519.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ed25519-key.pem
Ed448.Certificate = ${ENV::TEST_CERTS_DIR}/server-ed448-cert.pem
Ed448.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ed448-key.pem
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[901-ECDSA CipherString Selection-client]
CipherString = aECDSA
MaxProtocol = TLSv1.2
RequestCAFile = ${ENV::TEST_CERTS_DIR}/root-cert.pem
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-901]
ExpectedResult = Success
ExpectedServerCANames = empty
ExpectedServerCertType = P-256
ExpectedServerSignType = EC
Serialize = Server


# ===========================================================

[902-ECDSA CipherString Selection]
ssl_conf = 902-ECDSA CipherString Selection-ssl

[902-ECDSA CipherString Selection-ssl]
server = 902-ECDSA CipherString Selection-server
client = 902-ECDSA CipherString Selection-client

[902-ECDSA CipherString Selection-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
ECDSA.Certificate = ${ENV::TEST_CERTS_DIR}/server-ecdsa-cert.pem
ECDSA.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ecdsa-key.pem
Groups = P-384
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[902-ECDSA CipherString Selection-client]
CipherString = aECDSA
Groups = P-256:P-384
MaxProtocol = TLSv1.2
RequestCAFile = ${ENV::TEST_CERTS_DIR}/root-cert.pem
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-902]
ExpectedResult = Success
ExpectedServerCANames = empty
ExpectedServerCertType = P-256
ExpectedServerSignType = EC
Serialize = Server


# ===========================================================

[903-ECDSA CipherString Selection]
ssl_conf = 903-ECDSA CipherString Selection-ssl

[903-ECDSA CipherString Selection-ssl]
server = 903-ECDSA CipherString Selection-server
client = 903-ECDSA CipherString Selection-client

[903-ECDSA CipherString Selection-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
ECDSA.Certificate = ${ENV::TEST_CERTS_DIR}/server-ecdsa-cert.pem
ECDSA.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ecdsa-key.pem
Groups = P-256:P-384
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[903-ECDSA CipherString Selection-client]
CipherString = aECDSA
Groups = P-384
MaxProtocol = TLSv1.2
RequestCAFile = ${ENV::TEST_CERTS_DIR}/root-cert.pem
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-903]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[904-Ed25519 CipherString and Signature Algorithm Selection]
ssl_conf = 904-Ed25519 CipherString and Signature Algorithm Selection-ssl

[904-Ed25519 CipherString and Signature Algorithm Selection-ssl]
server = 904-Ed25519 CipherString and Signature Algorithm Selection-server
client = 904-Ed25519 CipherString and Signature Algorithm Selection-client

[904-Ed25519 CipherString and Signature Algorithm Selection-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
ECDSA.Certificate = ${ENV::TEST_CERTS_DIR}/server-ecdsa-cert.pem
ECDSA.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ecdsa-key.pem
Ed25519.Certificate = ${ENV::TEST_CERTS_DIR}/server-ed25519-cert.pem
Ed25519.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ed25519-key.pem
Ed448.Certificate = ${ENV::TEST_CERTS_DIR}/server-ed448-cert.pem
Ed448.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ed448-key.pem
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[904-Ed25519 CipherString and Signature Algorithm Selection-client]
CipherString = aECDSA
MaxProtocol = TLSv1.2
RequestCAFile = ${ENV::TEST_CERTS_DIR}/root-cert.pem
SignatureAlgorithms = ed25519:ECDSA+SHA256
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-904]
ExpectedResult = Success
ExpectedServerCANames = empty
ExpectedServerCertType = Ed25519
ExpectedServerSignType = Ed25519
Serialize = Server


# ===========================================================

[905-Ed448 CipherString and Signature Algorithm Selection]
ssl_conf = 905-Ed448 CipherString and Signature Algorithm Selection-ssl

[905-Ed448 CipherString and Signature Algorithm Selection-ssl]
server = 905-Ed448 CipherString and Signature Algorithm Selection-server
client = 905-Ed448 CipherString and Signature Algorithm Selection-client

[905-Ed448 CipherString and Signature Algorithm Selection-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
ECDSA.Certificate = ${ENV::TEST_CERTS_DIR}/server-ecdsa-cert.pem
ECDSA.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ecdsa-key.pem
Ed25519.Certificate = ${ENV::TEST_CERTS_DIR}/server-ed25519-cert.pem
Ed25519.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ed25519-key.pem
Ed448.Certificate = ${ENV::TEST_CERTS_DIR}/server-ed448-cert.pem
Ed448.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ed448-key.pem
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[905-Ed448 CipherString and Signature Algorithm Selection-client]
CipherString = aECDSA
MaxProtocol = TLSv1.2
RequestCAFile = ${ENV::TEST_CERTS_DIR}/root-cert.pem
SignatureAlgorithms = ed448:ECDSA+SHA256
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-905]
ExpectedResult = Success
ExpectedServerCANames = empty
ExpectedServerCertType = Ed448
ExpectedServerSignType = Ed448
Serialize = Server


# ===========================================================

[906-ECDSA with brainpool]
ssl_conf = 906-ECDSA with brainpool-ssl

[906-ECDSA with brainpool-ssl]
server = 906-ECDSA with brainpool-server
client = 906-ECDSA with brainpool-client

[906-ECDSA with brainpool-server]
Certificate = ${ENV::TEST_CERTS_DIR}/server-ecdsa-brainpoolP256r1-cert.pem
CipherString = DEFAULT
Groups = brainpoolP256r1
PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ecdsa-brainpoolP256r1-key.pem

[906-ECDSA with brainpool-client]
CipherString = aECDSA
Groups = brainpoolP256r1
RequestCAFile = ${ENV::TEST_CERTS_DIR}/root-cert.pem
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-906]
ExpectedResult = Success
ExpectedServerCANames = empty
ExpectedServerCertType = brainpoolP256r1
ExpectedServerSignType = EC
Serialize = Server


# ===========================================================

[907-RSA CipherString Selection]
ssl_conf = 907-RSA CipherString Selection-ssl

[907-RSA CipherString Selection-ssl]
server = 907-RSA CipherString Selection-server
client = 907-RSA CipherString Selection-client

[907-RSA CipherString Selection-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
ECDSA.Certificate = ${ENV::TEST_CERTS_DIR}/server-ecdsa-cert.pem
ECDSA.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ecdsa-key.pem
Ed25519.Certificate = ${ENV::TEST_CERTS_DIR}/server-ed25519-cert.pem
Ed25519.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ed25519-key.pem
Ed448.Certificate = ${ENV::TEST_CERTS_DIR}/server-ed448-cert.pem
Ed448.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ed448-key.pem
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[907-RSA CipherString Selection-client]
CipherString = aRSA
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-907]
ExpectedResult = Success
ExpectedServerCertType = RSA
ExpectedServerSignType = RSA-PSS
Serialize = Server


# ===========================================================

[908-RSA-PSS Certificate CipherString Selection]
ssl_conf = 908-RSA-PSS Certificate CipherString Selection-ssl

[908-RSA-PSS Certificate CipherString Selection-ssl]
server = 908-RSA-PSS Certificate CipherString Selection-server
client = 908-RSA-PSS Certificate CipherString Selection-client

[908-RSA-PSS Certificate CipherString Selection-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
ECDSA.Certificate = ${ENV::TEST_CERTS_DIR}/server-ecdsa-cert.pem
ECDSA.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ecdsa-key.pem
Ed25519.Certificate = ${ENV::TEST_CERTS_DIR}/server-ed25519-cert.pem
Ed25519.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ed25519-key.pem
Ed448.Certificate = ${ENV::TEST_CERTS_DIR}/server-ed448-cert.pem
Ed448.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ed448-key.pem
MaxProtocol = TLSv1.2
PSS.Certificate = ${ENV::TEST_CERTS_DIR}/server-pss-cert.pem
PSS.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-pss-key.pem
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[908-RSA-PSS Certificate CipherString Selection-client]
CipherString = aRSA
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-908]
ExpectedResult = Success
ExpectedServerCertType = RSA-PSS
ExpectedServerSignType = RSA-PSS
Serialize = Server


# ===========================================================

[909-P-256 CipherString and Signature Algorithm Selection]
ssl_conf = 909-P-256 CipherString and Signature Algorithm Selection-ssl

[909-P-256 CipherString and Signature Algorithm Selection-ssl]
server = 909-P-256 CipherString and Signature Algorithm Selection-server
client = 909-P-256 CipherString and Signature Algorithm Selection-client

[909-P-256 CipherString and Signature Algorithm Selection-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
ECDSA.Certificate = ${ENV::TEST_CERTS_DIR}/server-ecdsa-cert.pem
ECDSA.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ecdsa-key.pem
Ed25519.Certificate = ${ENV::TEST_CERTS_DIR}/server-ed25519-cert.pem
Ed25519.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ed25519-key.pem
Ed448.Certificate = ${ENV::TEST_CERTS_DIR}/server-ed448-cert.pem
Ed448.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ed448-key.pem
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[909-P-256 CipherString and Signature Algorithm Selection-client]
CipherString = aECDSA
MaxProtocol = TLSv1.2
SignatureAlgorithms = ECDSA+SHA256:ed25519
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-909]
ExpectedResult = Success
ExpectedServerCertType = P-256
ExpectedServerSignHash = SHA256
ExpectedServerSignType = EC
Serialize = Server


# ===========================================================

[910-Ed25519 CipherString and Curves Selection]
ssl_conf = 910-Ed25519 CipherString and Curves Selection-ssl

[910-Ed25519 CipherString and Curves Selection-ssl]
server = 910-Ed25519 CipherString and Curves Selection-server
client = 910-Ed25519 CipherString and Curves Selection-client

[910-Ed25519 CipherString and Curves Selection-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
ECDSA.Certificate = ${ENV::TEST_CERTS_DIR}/server-ecdsa-cert.pem
ECDSA.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ecdsa-key.pem
Ed25519.Certificate = ${ENV::TEST_CERTS_DIR}/server-ed25519-cert.pem
Ed25519.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ed25519-key.pem
Ed448.Certificate = ${ENV::TEST_CERTS_DIR}/server-ed448-cert.pem
Ed448.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ed448-key.pem
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[910-Ed25519 CipherString and Curves Selection-client]
CipherString = aECDSA
Curves = X25519
MaxProtocol = TLSv1.2
SignatureAlgorithms = ECDSA+SHA256:ed25519
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-910]
ExpectedResult = Success
ExpectedServerCertType = Ed25519
ExpectedServerSignType = Ed25519
Serialize = Server


# ===========================================================

[911-Ed448 CipherString and Curves Selection]
ssl_conf = 911-Ed448 CipherString and Curves Selection-ssl

[911-Ed448 CipherString and Curves Selection-ssl]
server = 911-Ed448 CipherString and Curves Selection-server
client = 911-Ed448 CipherString and Curves Selection-client

[911-Ed448 CipherString and Curves Selection-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
ECDSA.Certificate = ${ENV::TEST_CERTS_DIR}/server-ecdsa-cert.pem
ECDSA.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ecdsa-key.pem
Ed25519.Certificate = ${ENV::TEST_CERTS_DIR}/server-ed25519-cert.pem
Ed25519.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ed25519-key.pem
Ed448.Certificate = ${ENV::TEST_CERTS_DIR}/server-ed448-cert.pem
Ed448.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ed448-key.pem
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[911-Ed448 CipherString and Curves Selection-client]
CipherString = aECDSA
Curves = X448
MaxProtocol = TLSv1.2
SignatureAlgorithms = ECDSA+SHA256:ed448
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-911]
ExpectedResult = Success
ExpectedServerCertType = Ed448
ExpectedServerSignType = Ed448
Serialize = Server


# ===========================================================

[912-ECDSA CipherString Selection, no ECDSA certificate]
ssl_conf = 912-ECDSA CipherString Selection, no ECDSA certificate-ssl

[912-ECDSA CipherString Selection, no ECDSA certificate-ssl]
server = 912-ECDSA CipherString Selection, no ECDSA certificate-server
client = 912-ECDSA CipherString Selection, no ECDSA certificate-client

[912-ECDSA CipherString Selection, no ECDSA certificate-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[912-ECDSA CipherString Selection, no ECDSA certificate-client]
CipherString = aECDSA
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-912]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[913-ECDSA Signature Algorithm Selection]
ssl_conf = 913-ECDSA Signature Algorithm Selection-ssl

[913-ECDSA Signature Algorithm Selection-ssl]
server = 913-ECDSA Signature Algorithm Selection-server
client = 913-ECDSA Signature Algorithm Selection-client

[913-ECDSA Signature Algorithm Selection-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
ECDSA.Certificate = ${ENV::TEST_CERTS_DIR}/server-ecdsa-cert.pem
ECDSA.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ecdsa-key.pem
Ed25519.Certificate = ${ENV::TEST_CERTS_DIR}/server-ed25519-cert.pem
Ed25519.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ed25519-key.pem
Ed448.Certificate = ${ENV::TEST_CERTS_DIR}/server-ed448-cert.pem
Ed448.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ed448-key.pem
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[913-ECDSA Signature Algorithm Selection-client]
CipherString = DEFAULT
SignatureAlgorithms = ECDSA+SHA256
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-913]
ExpectedResult = Success
ExpectedServerCertType = P-256
ExpectedServerSignHash = SHA256
ExpectedServerSignType = EC
Serialize = Server


# ===========================================================

[914-ECDSA Signature Algorithm Selection SHA384]
ssl_conf = 914-ECDSA Signature Algorithm Selection SHA384-ssl

[914-ECDSA Signature Algorithm Selection SHA384-ssl]
server = 914-ECDSA Signature Algorithm Selection SHA384-server
client = 914-ECDSA Signature Algorithm Selection SHA384-client

[914-ECDSA Signature Algorithm Selection SHA384-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
ECDSA.Certificate = ${ENV::TEST_CERTS_DIR}/server-ecdsa-cert.pem
ECDSA.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ecdsa-key.pem
Ed25519.Certificate = ${ENV::TEST_CERTS_DIR}/server-ed25519-cert.pem
Ed25519.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ed25519-key.pem
Ed448.Certificate = ${ENV::TEST_CERTS_DIR}/server-ed448-cert.pem
Ed448.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ed448-key.pem
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[914-ECDSA Signature Algorithm Selection SHA384-client]
CipherString = DEFAULT
SignatureAlgorithms = ECDSA+SHA384
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-914]
ExpectedResult = Success
ExpectedServerCertType = P-256
ExpectedServerSignHash = SHA384
ExpectedServerSignType = EC
Serialize = Server


# ===========================================================

[915-ECDSA Signature Algorithm Selection SHA1]
ssl_conf = 915-ECDSA Signature Algorithm Selection SHA1-ssl

[915-ECDSA Signature Algorithm Selection SHA1-ssl]
server = 915-ECDSA Signature Algorithm Selection SHA1-server
client = 915-ECDSA Signature Algorithm Selection SHA1-client

[915-ECDSA Signature Algorithm Selection SHA1-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
ECDSA.Certificate = ${ENV::TEST_CERTS_DIR}/server-ecdsa-cert.pem
ECDSA.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ecdsa-key.pem
Ed25519.Certificate = ${ENV::TEST_CERTS_DIR}/server-ed25519-cert.pem
Ed25519.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ed25519-key.pem
Ed448.Certificate = ${ENV::TEST_CERTS_DIR}/server-ed448-cert.pem
Ed448.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ed448-key.pem
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[915-ECDSA Signature Algorithm Selection SHA1-client]
CipherString = DEFAULT
SignatureAlgorithms = ECDSA+SHA1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-915]
ExpectedResult = Success
ExpectedServerCertType = P-256
ExpectedServerSignHash = SHA1
ExpectedServerSignType = EC
Serialize = Server


# ===========================================================

[916-ECDSA Signature Algorithm Selection compressed point]
ssl_conf = 916-ECDSA Signature Algorithm Selection compressed point-ssl

[916-ECDSA Signature Algorithm Selection compressed point-ssl]
server = 916-ECDSA Signature Algorithm Selection compressed point-server
client = 916-ECDSA Signature Algorithm Selection compressed point-client

[916-ECDSA Signature Algorithm Selection compressed point-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
ECDSA.Certificate = ${ENV::TEST_CERTS_DIR}/server-cecdsa-cert.pem
ECDSA.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-cecdsa-key.pem
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[916-ECDSA Signature Algorithm Selection compressed point-client]
CipherString = DEFAULT
SignatureAlgorithms = ECDSA+SHA256
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-916]
ExpectedResult = Success
ExpectedServerCertType = P-256
ExpectedServerSignHash = SHA256
ExpectedServerSignType = EC
Serialize = Server


# ===========================================================

[917-ECDSA Signature Algorithm Selection, no ECDSA certificate]
ssl_conf = 917-ECDSA Signature Algorithm Selection, no ECDSA certificate-ssl

[917-ECDSA Signature Algorithm Selection, no ECDSA certificate-ssl]
server = 917-ECDSA Signature Algorithm Selection, no ECDSA certificate-server
client = 917-ECDSA Signature Algorithm Selection, no ECDSA certificate-client

[917-ECDSA Signature Algorithm Selection, no ECDSA certificate-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[917-ECDSA Signature Algorithm Selection, no ECDSA certificate-client]
CipherString = DEFAULT
SignatureAlgorithms = ECDSA+SHA256
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-917]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[918-RSA Signature Algorithm Selection]
ssl_conf = 918-RSA Signature Algorithm Selection-ssl

[918-RSA Signature Algorithm Selection-ssl]
server = 918-RSA Signature Algorithm Selection-server
client = 918-RSA Signature Algorithm Selection-client

[918-RSA Signature Algorithm Selection-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
ECDSA.Certificate = ${ENV::TEST_CERTS_DIR}/server-ecdsa-cert.pem
ECDSA.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ecdsa-key.pem
Ed25519.Certificate = ${ENV::TEST_CERTS_DIR}/server-ed25519-cert.pem
Ed25519.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ed25519-key.pem
Ed448.Certificate = ${ENV::TEST_CERTS_DIR}/server-ed448-cert.pem
Ed448.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ed448-key.pem
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[918-RSA Signature Algorithm Selection-client]
CipherString = DEFAULT
SignatureAlgorithms = RSA+SHA256
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-918]
ExpectedResult = Success
ExpectedServerCertType = RSA
ExpectedServerSignHash = SHA256
ExpectedServerSignType = RSA
Serialize = Server


# ===========================================================

[919-RSA-PSS Signature Algorithm Selection]
ssl_conf = 919-RSA-PSS Signature Algorithm Selection-ssl

[919-RSA-PSS Signature Algorithm Selection-ssl]
server = 919-RSA-PSS Signature Algorithm Selection-server
client = 919-RSA-PSS Signature Algorithm Selection-client

[919-RSA-PSS Signature Algorithm Selection-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
ECDSA.Certificate = ${ENV::TEST_CERTS_DIR}/server-ecdsa-cert.pem
ECDSA.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ecdsa-key.pem
Ed25519.Certificate = ${ENV::TEST_CERTS_DIR}/server-ed25519-cert.pem
Ed25519.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ed25519-key.pem
Ed448.Certificate = ${ENV::TEST_CERTS_DIR}/server-ed448-cert.pem
Ed448.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ed448-key.pem
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[919-RSA-PSS Signature Algorithm Selection-client]
CipherString = DEFAULT
SignatureAlgorithms = RSA-PSS+SHA256
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-919]
ExpectedResult = Success
ExpectedServerCertType = RSA
ExpectedServerSignHash = SHA256
ExpectedServerSignType = RSA-PSS
Serialize = Server


# ===========================================================

[920-RSA-PSS Certificate Legacy Signature Algorithm Selection]
ssl_conf = 920-RSA-PSS Certificate Legacy Signature Algorithm Selection-ssl

[920-RSA-PSS Certificate Legacy Signature Algorithm Selection-ssl]
server = 920-RSA-PSS Certificate Legacy Signature Algorithm Selection-server
client = 920-RSA-PSS Certificate Legacy Signature Algorithm Selection-client

[920-RSA-PSS Certificate Legacy Signature Algorithm Selection-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
ECDSA.Certificate = ${ENV::TEST_CERTS_DIR}/server-ecdsa-cert.pem
ECDSA.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ecdsa-key.pem
Ed25519.Certificate = ${ENV::TEST_CERTS_DIR}/server-ed25519-cert.pem
Ed25519.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ed25519-key.pem
Ed448.Certificate = ${ENV::TEST_CERTS_DIR}/server-ed448-cert.pem
Ed448.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ed448-key.pem
MaxProtocol = TLSv1.2
PSS.Certificate = ${ENV::TEST_CERTS_DIR}/server-pss-cert.pem
PSS.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-pss-key.pem
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[920-RSA-PSS Certificate Legacy Signature Algorithm Selection-client]
CipherString = DEFAULT
SignatureAlgorithms = RSA-PSS+SHA256
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-920]
ExpectedResult = Success
ExpectedServerCertType = RSA
ExpectedServerSignHash = SHA256
ExpectedServerSignType = RSA-PSS
Serialize = Server


# ===========================================================

[921-RSA-PSS Certificate Unified Signature Algorithm Selection]
ssl_conf = 921-RSA-PSS Certificate Unified Signature Algorithm Selection-ssl

[921-RSA-PSS Certificate Unified Signature Algorithm Selection-ssl]
server = 921-RSA-PSS Certificate Unified Signature Algorithm Selection-server
client = 921-RSA-PSS Certificate Unified Signature Algorithm Selection-client

[921-RSA-PSS Certificate Unified Signature Algorithm Selection-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
ECDSA.Certificate = ${ENV::TEST_CERTS_DIR}/server-ecdsa-cert.pem
ECDSA.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ecdsa-key.pem
Ed25519.Certificate = ${ENV::TEST_CERTS_DIR}/server-ed25519-cert.pem
Ed25519.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ed25519-key.pem
Ed448.Certificate = ${ENV::TEST_CERTS_DIR}/server-ed448-cert.pem
Ed448.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ed448-key.pem
MaxProtocol = TLSv1.2
PSS.Certificate = ${ENV::TEST_CERTS_DIR}/server-pss-cert.pem
PSS.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-pss-key.pem
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[921-RSA-PSS Certificate Unified Signature Algorithm Selection-client]
CipherString = DEFAULT
SignatureAlgorithms = rsa_pss_pss_sha256
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-921]
ExpectedResult = Success
ExpectedServerCertType = RSA-PSS
ExpectedServerSignHash = SHA256
ExpectedServerSignType = RSA-PSS
Serialize = Server


# ===========================================================

[922-Only RSA-PSS Certificate]
ssl_conf = 922-Only RSA-PSS Certificate-ssl

[922-Only RSA-PSS Certificate-ssl]
server = 922-Only RSA-PSS Certificate-server
client = 922-Only RSA-PSS Certificate-client

[922-Only RSA-PSS Certificate-server]
Certificate = ${ENV::TEST_CERTS_DIR}/server-pss-cert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/server-pss-key.pem

[922-Only RSA-PSS Certificate-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-922]
ExpectedResult = Success
ExpectedServerCertType = RSA-PSS
ExpectedServerSignHash = SHA256
ExpectedServerSignType = RSA-PSS
Serialize = Server


# ===========================================================

[923-RSA-PSS Certificate, no PSS signature algorithms]
ssl_conf = 923-RSA-PSS Certificate, no PSS signature algorithms-ssl

[923-RSA-PSS Certificate, no PSS signature algorithms-ssl]
server = 923-RSA-PSS Certificate, no PSS signature algorithms-server
client = 923-RSA-PSS Certificate, no PSS signature algorithms-client

[923-RSA-PSS Certificate, no PSS signature algorithms-server]
Certificate = ${ENV::TEST_CERTS_DIR}/server-pss-cert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/server-pss-key.pem

[923-RSA-PSS Certificate, no PSS signature algorithms-client]
CipherString = DEFAULT
SignatureAlgorithms = RSA+SHA256
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-923]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[924-RSA key exchange with all RSA certificate types]
ssl_conf = 924-RSA key exchange with all RSA certificate types-ssl

[924-RSA key exchange with all RSA certificate types-ssl]
server = 924-RSA key exchange with all RSA certificate types-server
client = 924-RSA key exchange with all RSA certificate types-client

[924-RSA key exchange with all RSA certificate types-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PSS.Certificate = ${ENV::TEST_CERTS_DIR}/server-pss-cert.pem
PSS.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-pss-key.pem
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[924-RSA key exchange with all RSA certificate types-client]
CipherString = kRSA
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-924]
ExpectedResult = Success
ExpectedServerCertType = RSA
Serialize = Server


# ===========================================================

[925-RSA key exchange with only RSA-PSS certificate]
ssl_conf = 925-RSA key exchange with only RSA-PSS certificate-ssl

[925-RSA key exchange with only RSA-PSS certificate-ssl]
server = 925-RSA key exchange with only RSA-PSS certificate-server
client = 925-RSA key exchange with only RSA-PSS certificate-client

[925-RSA key exchange with only RSA-PSS certificate-server]
Certificate = ${ENV::TEST_CERTS_DIR}/server-pss-cert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/server-pss-key.pem

[925-RSA key exchange with only RSA-PSS certificate-client]
CipherString = kRSA
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-925]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[926-Suite B P-256 Hash Algorithm Selection]
ssl_conf = 926-Suite B P-256 Hash Algorithm Selection-ssl

[926-Suite B P-256 Hash Algorithm Selection-ssl]
server = 926-Suite B P-256 Hash Algorithm Selection-server
client = 926-Suite B P-256 Hash Algorithm Selection-client

[926-Suite B P-256 Hash Algorithm Selection-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = SUITEB128
ECDSA.Certificate = ${ENV::TEST_CERTS_DIR}/p256-server-cert.pem
ECDSA.PrivateKey = ${ENV::TEST_CERTS_DIR}/p256-server-key.pem
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[926-Suite B P-256 Hash Algorithm Selection-client]
CipherString = DEFAULT
SignatureAlgorithms = ECDSA+SHA384:ECDSA+SHA256
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/p384-root.pem
VerifyMode = Peer

[test-926]
ExpectedResult = Success
ExpectedServerCertType = P-256
ExpectedServerSignHash = SHA256
ExpectedServerSignType = EC
Serialize = Server


# ===========================================================

[927-Suite B P-384 Hash Algorithm Selection]
ssl_conf = 927-Suite B P-384 Hash Algorithm Selection-ssl

[927-Suite B P-384 Hash Algorithm Selection-ssl]
server = 927-Suite B P-384 Hash Algorithm Selection-server
client = 927-Suite B P-384 Hash Algorithm Selection-client

[927-Suite B P-384 Hash Algorithm Selection-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = SUITEB128
ECDSA.Certificate = ${ENV::TEST_CERTS_DIR}/p384-server-cert.pem
ECDSA.PrivateKey = ${ENV::TEST_CERTS_DIR}/p384-server-key.pem
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[927-Suite B P-384 Hash Algorithm Selection-client]
CipherString = DEFAULT
SignatureAlgorithms = ECDSA+SHA256:ECDSA+SHA384
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/p384-root.pem
VerifyMode = Peer

[test-927]
ExpectedResult = Success
ExpectedServerCertType = P-384
ExpectedServerSignHash = SHA384
ExpectedServerSignType = EC
Serialize = Server


# ===========================================================

[928-TLS 1.2 Ed25519 Client Auth]
ssl_conf = 928-TLS 1.2 Ed25519 Client Auth-ssl

[928-TLS 1.2 Ed25519 Client Auth-ssl]
server = 928-TLS 1.2 Ed25519 Client Auth-server
client = 928-TLS 1.2 Ed25519 Client Auth-client

[928-TLS 1.2 Ed25519 Client Auth-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/root-cert.pem
VerifyMode = Require

[928-TLS 1.2 Ed25519 Client Auth-client]
CipherString = DEFAULT
Ed25519.Certificate = ${ENV::TEST_CERTS_DIR}/client-ed25519-cert.pem
Ed25519.PrivateKey = ${ENV::TEST_CERTS_DIR}/client-ed25519-key.pem
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-928]
ExpectedClientCertType = Ed25519
ExpectedClientSignType = Ed25519
ExpectedResult = Success
Serialize = Server


# ===========================================================

[929-TLS 1.2 Ed448 Client Auth]
ssl_conf = 929-TLS 1.2 Ed448 Client Auth-ssl

[929-TLS 1.2 Ed448 Client Auth-ssl]
server = 929-TLS 1.2 Ed448 Client Auth-server
client = 929-TLS 1.2 Ed448 Client Auth-client

[929-TLS 1.2 Ed448 Client Auth-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/root-cert.pem
VerifyMode = Require

[929-TLS 1.2 Ed448 Client Auth-client]
CipherString = DEFAULT
Ed448.Certificate = ${ENV::TEST_CERTS_DIR}/client-ed448-cert.pem
Ed448.PrivateKey = ${ENV::TEST_CERTS_DIR}/client-ed448-key.pem
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-929]
ExpectedClientCertType = Ed448
ExpectedClientSignType = Ed448
ExpectedResult = Success
Serialize = Server


# ===========================================================

[930-Only RSA-PSS Certificate, TLS v1.1]
ssl_conf = 930-Only RSA-PSS Certificate, TLS v1.1-ssl

[930-Only RSA-PSS Certificate, TLS v1.1-ssl]
server = 930-Only RSA-PSS Certificate, TLS v1.1-server
client = 930-Only RSA-PSS Certificate, TLS v1.1-client

[930-Only RSA-PSS Certificate, TLS v1.1-server]
Certificate = ${ENV::TEST_CERTS_DIR}/server-pss-cert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/server-pss-key.pem

[930-Only RSA-PSS Certificate, TLS v1.1-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-930]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[931-TLS 1.3 ECDSA Signature Algorithm Selection]
ssl_conf = 931-TLS 1.3 ECDSA Signature Algorithm Selection-ssl

[931-TLS 1.3 ECDSA Signature Algorithm Selection-ssl]
server = 931-TLS 1.3 ECDSA Signature Algorithm Selection-server
client = 931-TLS 1.3 ECDSA Signature Algorithm Selection-client

[931-TLS 1.3 ECDSA Signature Algorithm Selection-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
ECDSA.Certificate = ${ENV::TEST_CERTS_DIR}/server-ecdsa-cert.pem
ECDSA.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ecdsa-key.pem
Ed25519.Certificate = ${ENV::TEST_CERTS_DIR}/server-ed25519-cert.pem
Ed25519.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ed25519-key.pem
Ed448.Certificate = ${ENV::TEST_CERTS_DIR}/server-ed448-cert.pem
Ed448.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ed448-key.pem
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[931-TLS 1.3 ECDSA Signature Algorithm Selection-client]
CipherString = DEFAULT
SignatureAlgorithms = ECDSA+SHA256
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-931]
ExpectedResult = Success
ExpectedServerCANames = empty
ExpectedServerCertType = P-256
ExpectedServerSignHash = SHA256
ExpectedServerSignType = EC
Serialize = Server


# ===========================================================

[932-TLS 1.3 ECDSA Signature Algorithm Selection compressed point]
ssl_conf = 932-TLS 1.3 ECDSA Signature Algorithm Selection compressed point-ssl

[932-TLS 1.3 ECDSA Signature Algorithm Selection compressed point-ssl]
server = 932-TLS 1.3 ECDSA Signature Algorithm Selection compressed point-server
client = 932-TLS 1.3 ECDSA Signature Algorithm Selection compressed point-client

[932-TLS 1.3 ECDSA Signature Algorithm Selection compressed point-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
ECDSA.Certificate = ${ENV::TEST_CERTS_DIR}/server-cecdsa-cert.pem
ECDSA.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-cecdsa-key.pem
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[932-TLS 1.3 ECDSA Signature Algorithm Selection compressed point-client]
CipherString = DEFAULT
SignatureAlgorithms = ECDSA+SHA256
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-932]
ExpectedResult = Success
ExpectedServerCANames = empty
ExpectedServerCertType = P-256
ExpectedServerSignHash = SHA256
ExpectedServerSignType = EC
Serialize = Server


# ===========================================================

[933-TLS 1.3 ECDSA Signature Algorithm Selection SHA1]
ssl_conf = 933-TLS 1.3 ECDSA Signature Algorithm Selection SHA1-ssl

[933-TLS 1.3 ECDSA Signature Algorithm Selection SHA1-ssl]
server = 933-TLS 1.3 ECDSA Signature Algorithm Selection SHA1-server
client = 933-TLS 1.3 ECDSA Signature Algorithm Selection SHA1-client

[933-TLS 1.3 ECDSA Signature Algorithm Selection SHA1-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
ECDSA.Certificate = ${ENV::TEST_CERTS_DIR}/server-ecdsa-cert.pem
ECDSA.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ecdsa-key.pem
Ed25519.Certificate = ${ENV::TEST_CERTS_DIR}/server-ed25519-cert.pem
Ed25519.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ed25519-key.pem
Ed448.Certificate = ${ENV::TEST_CERTS_DIR}/server-ed448-cert.pem
Ed448.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ed448-key.pem
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[933-TLS 1.3 ECDSA Signature Algorithm Selection SHA1-client]
CipherString = DEFAULT
SignatureAlgorithms = ECDSA+SHA1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-933]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[934-TLS 1.3 RSA Signature Algorithm Selection SHA384 with PSS]
ssl_conf = 934-TLS 1.3 RSA Signature Algorithm Selection SHA384 with PSS-ssl

[934-TLS 1.3 RSA Signature Algorithm Selection SHA384 with PSS-ssl]
server = 934-TLS 1.3 RSA Signature Algorithm Selection SHA384 with PSS-server
client = 934-TLS 1.3 RSA Signature Algorithm Selection SHA384 with PSS-client

[934-TLS 1.3 RSA Signature Algorithm Selection SHA384 with PSS-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
ECDSA.Certificate = ${ENV::TEST_CERTS_DIR}/server-ecdsa-cert.pem
ECDSA.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ecdsa-key.pem
Ed25519.Certificate = ${ENV::TEST_CERTS_DIR}/server-ed25519-cert.pem
Ed25519.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ed25519-key.pem
Ed448.Certificate = ${ENV::TEST_CERTS_DIR}/server-ed448-cert.pem
Ed448.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ed448-key.pem
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[934-TLS 1.3 RSA Signature Algorithm Selection SHA384 with PSS-client]
CipherString = DEFAULT
SignatureAlgorithms = ECDSA+SHA384:RSA-PSS+SHA384
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-934]
ExpectedResult = Success
ExpectedServerCertType = RSA
ExpectedServerSignHash = SHA384
ExpectedServerSignType = RSA-PSS
Serialize = Server


# ===========================================================

[935-TLS 1.3 ECDSA Signature Algorithm Selection, no ECDSA certificate]
ssl_conf = 935-TLS 1.3 ECDSA Signature Algorithm Selection, no ECDSA certificate-ssl

[935-TLS 1.3 ECDSA Signature Algorithm Selection, no ECDSA certificate-ssl]
server = 935-TLS 1.3 ECDSA Signature Algorithm Selection, no ECDSA certificate-server
client = 935-TLS 1.3 ECDSA Signature Algorithm Selection, no ECDSA certificate-client

[935-TLS 1.3 ECDSA Signature Algorithm Selection, no ECDSA certificate-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[935-TLS 1.3 ECDSA Signature Algorithm Selection, no ECDSA certificate-client]
CipherString = DEFAULT
SignatureAlgorithms = ECDSA+SHA256
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-935]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[936-TLS 1.3 RSA Signature Algorithm Selection, no PSS]
ssl_conf = 936-TLS 1.3 RSA Signature Algorithm Selection, no PSS-ssl

[936-TLS 1.3 RSA Signature Algorithm Selection, no PSS-ssl]
server = 936-TLS 1.3 RSA Signature Algorithm Selection, no PSS-server
client = 936-TLS 1.3 RSA Signature Algorithm Selection, no PSS-client

[936-TLS 1.3 RSA Signature Algorithm Selection, no PSS-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
ECDSA.Certificate = ${ENV::TEST_CERTS_DIR}/server-ecdsa-cert.pem
ECDSA.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ecdsa-key.pem
Ed25519.Certificate = ${ENV::TEST_CERTS_DIR}/server-ed25519-cert.pem
Ed25519.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ed25519-key.pem
Ed448.Certificate = ${ENV::TEST_CERTS_DIR}/server-ed448-cert.pem
Ed448.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ed448-key.pem
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[936-TLS 1.3 RSA Signature Algorithm Selection, no PSS-client]
CipherString = DEFAULT
SignatureAlgorithms = RSA+SHA256
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-936]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[937-TLS 1.3 RSA-PSS Signature Algorithm Selection]
ssl_conf = 937-TLS 1.3 RSA-PSS Signature Algorithm Selection-ssl

[937-TLS 1.3 RSA-PSS Signature Algorithm Selection-ssl]
server = 937-TLS 1.3 RSA-PSS Signature Algorithm Selection-server
client = 937-TLS 1.3 RSA-PSS Signature Algorithm Selection-client

[937-TLS 1.3 RSA-PSS Signature Algorithm Selection-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
ECDSA.Certificate = ${ENV::TEST_CERTS_DIR}/server-ecdsa-cert.pem
ECDSA.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ecdsa-key.pem
Ed25519.Certificate = ${ENV::TEST_CERTS_DIR}/server-ed25519-cert.pem
Ed25519.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ed25519-key.pem
Ed448.Certificate = ${ENV::TEST_CERTS_DIR}/server-ed448-cert.pem
Ed448.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ed448-key.pem
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[937-TLS 1.3 RSA-PSS Signature Algorithm Selection-client]
CipherString = DEFAULT
SignatureAlgorithms = RSA-PSS+SHA256
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-937]
ExpectedResult = Success
ExpectedServerCertType = RSA
ExpectedServerSignHash = SHA256
ExpectedServerSignType = RSA-PSS
Serialize = Server


# ===========================================================

[938-TLS 1.3 Ed25519 Signature Algorithm Selection]
ssl_conf = 938-TLS 1.3 Ed25519 Signature Algorithm Selection-ssl

[938-TLS 1.3 Ed25519 Signature Algorithm Selection-ssl]
server = 938-TLS 1.3 Ed25519 Signature Algorithm Selection-server
client = 938-TLS 1.3 Ed25519 Signature Algorithm Selection-client

[938-TLS 1.3 Ed25519 Signature Algorithm Selection-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
ECDSA.Certificate = ${ENV::TEST_CERTS_DIR}/server-ecdsa-cert.pem
ECDSA.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ecdsa-key.pem
Ed25519.Certificate = ${ENV::TEST_CERTS_DIR}/server-ed25519-cert.pem
Ed25519.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ed25519-key.pem
Ed448.Certificate = ${ENV::TEST_CERTS_DIR}/server-ed448-cert.pem
Ed448.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ed448-key.pem
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[938-TLS 1.3 Ed25519 Signature Algorithm Selection-client]
CipherString = DEFAULT
SignatureAlgorithms = ed25519
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-938]
ExpectedResult = Success
ExpectedServerCertType = Ed25519
ExpectedServerSignType = Ed25519
Serialize = Server


# ===========================================================

[939-TLS 1.3 Ed448 Signature Algorithm Selection]
ssl_conf = 939-TLS 1.3 Ed448 Signature Algorithm Selection-ssl

[939-TLS 1.3 Ed448 Signature Algorithm Selection-ssl]
server = 939-TLS 1.3 Ed448 Signature Algorithm Selection-server
client = 939-TLS 1.3 Ed448 Signature Algorithm Selection-client

[939-TLS 1.3 Ed448 Signature Algorithm Selection-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
ECDSA.Certificate = ${ENV::TEST_CERTS_DIR}/server-ecdsa-cert.pem
ECDSA.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ecdsa-key.pem
Ed25519.Certificate = ${ENV::TEST_CERTS_DIR}/server-ed25519-cert.pem
Ed25519.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ed25519-key.pem
Ed448.Certificate = ${ENV::TEST_CERTS_DIR}/server-ed448-cert.pem
Ed448.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ed448-key.pem
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[939-TLS 1.3 Ed448 Signature Algorithm Selection-client]
CipherString = DEFAULT
SignatureAlgorithms = ed448
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-939]
ExpectedResult = Success
ExpectedServerCertType = Ed448
ExpectedServerSignType = Ed448
Serialize = Server


# ===========================================================

[940-TLS 1.3 Ed25519 CipherString and Groups Selection]
ssl_conf = 940-TLS 1.3 Ed25519 CipherString and Groups Selection-ssl

[940-TLS 1.3 Ed25519 CipherString and Groups Selection-ssl]
server = 940-TLS 1.3 Ed25519 CipherString and Groups Selection-server
client = 940-TLS 1.3 Ed25519 CipherString and Groups Selection-client

[940-TLS 1.3 Ed25519 CipherString and Groups Selection-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
ECDSA.Certificate = ${ENV::TEST_CERTS_DIR}/server-ecdsa-cert.pem
ECDSA.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ecdsa-key.pem
Ed25519.Certificate = ${ENV::TEST_CERTS_DIR}/server-ed25519-cert.pem
Ed25519.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ed25519-key.pem
Ed448.Certificate = ${ENV::TEST_CERTS_DIR}/server-ed448-cert.pem
Ed448.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ed448-key.pem
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[940-TLS 1.3 Ed25519 CipherString and Groups Selection-client]
CipherString = DEFAULT
Groups = X25519
SignatureAlgorithms = ECDSA+SHA256:ed25519
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-940]
ExpectedResult = Success
ExpectedServerCertType = P-256
ExpectedServerSignType = EC
Serialize = Server


# ===========================================================

[941-TLS 1.3 Ed448 CipherString and Groups Selection]
ssl_conf = 941-TLS 1.3 Ed448 CipherString and Groups Selection-ssl

[941-TLS 1.3 Ed448 CipherString and Groups Selection-ssl]
server = 941-TLS 1.3 Ed448 CipherString and Groups Selection-server
client = 941-TLS 1.3 Ed448 CipherString and Groups Selection-client

[941-TLS 1.3 Ed448 CipherString and Groups Selection-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
ECDSA.Certificate = ${ENV::TEST_CERTS_DIR}/server-ecdsa-cert.pem
ECDSA.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ecdsa-key.pem
Ed25519.Certificate = ${ENV::TEST_CERTS_DIR}/server-ed25519-cert.pem
Ed25519.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ed25519-key.pem
Ed448.Certificate = ${ENV::TEST_CERTS_DIR}/server-ed448-cert.pem
Ed448.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ed448-key.pem
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[941-TLS 1.3 Ed448 CipherString and Groups Selection-client]
CipherString = DEFAULT
Groups = X448
SignatureAlgorithms = ECDSA+SHA256:ed448
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-941]
ExpectedResult = Success
ExpectedServerCertType = P-256
ExpectedServerSignType = EC
Serialize = Server


# ===========================================================

[942-TLS 1.3 RSA Client Auth Signature Algorithm Selection]
ssl_conf = 942-TLS 1.3 RSA Client Auth Signature Algorithm Selection-ssl

[942-TLS 1.3 RSA Client Auth Signature Algorithm Selection-ssl]
server = 942-TLS 1.3 RSA Client Auth Signature Algorithm Selection-server
client = 942-TLS 1.3 RSA Client Auth Signature Algorithm Selection-client

[942-TLS 1.3 RSA Client Auth Signature Algorithm Selection-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
ClientSignatureAlgorithms = PSS+SHA256
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/root-cert.pem
VerifyMode = Require

[942-TLS 1.3 RSA Client Auth Signature Algorithm Selection-client]
CipherString = DEFAULT
ECDSA.Certificate = ${ENV::TEST_CERTS_DIR}/ee-ecdsa-client-chain.pem
ECDSA.PrivateKey = ${ENV::TEST_CERTS_DIR}/ee-ecdsa-key.pem
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
RSA.Certificate = ${ENV::TEST_CERTS_DIR}/ee-client-chain.pem
RSA.PrivateKey = ${ENV::TEST_CERTS_DIR}/ee-key.pem
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-942]
ExpectedClientCANames = empty
ExpectedClientCertType = RSA
ExpectedClientSignHash = SHA256
ExpectedClientSignType = RSA-PSS
ExpectedResult = Success
Serialize = Server


# ===========================================================

[943-TLS 1.3 RSA Client Auth Signature Algorithm Selection non-empty CA Names]
ssl_conf = 943-TLS 1.3 RSA Client Auth Signature Algorithm Selection non-empty CA Names-ssl

[943-TLS 1.3 RSA Client Auth Signature Algorithm Selection non-empty CA Names-ssl]
server = 943-TLS 1.3 RSA Client Auth Signature Algorithm Selection non-empty CA Names-server
client = 943-TLS 1.3 RSA Client Auth Signature Algorithm Selection non-empty CA Names-client

[943-TLS 1.3 RSA Client Auth Signature Algorithm Selection non-empty CA Names-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
ClientSignatureAlgorithms = PSS+SHA256
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem
RequestCAFile = ${ENV::TEST_CERTS_DIR}/root-cert.pem
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/root-cert.pem
VerifyMode = Require

[943-TLS 1.3 RSA Client Auth Signature Algorithm Selection non-empty CA Names-client]
CipherString = DEFAULT
ECDSA.Certificate = ${ENV::TEST_CERTS_DIR}/ee-ecdsa-client-chain.pem
ECDSA.PrivateKey = ${ENV::TEST_CERTS_DIR}/ee-ecdsa-key.pem
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
RSA.Certificate = ${ENV::TEST_CERTS_DIR}/ee-client-chain.pem
RSA.PrivateKey = ${ENV::TEST_CERTS_DIR}/ee-key.pem
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-943]
ExpectedClientCANames = ${ENV::TEST_CERTS_DIR}/root-cert.pem
ExpectedClientCertType = RSA
ExpectedClientSignHash = SHA256
ExpectedClientSignType = RSA-PSS
ExpectedResult = Success
Serialize = Server


# ===========================================================

[944-TLS 1.3 ECDSA Client Auth Signature Algorithm Selection]
ssl_conf = 944-TLS 1.3 ECDSA Client Auth Signature Algorithm Selection-ssl

[944-TLS 1.3 ECDSA Client Auth Signature Algorithm Selection-ssl]
server = 944-TLS 1.3 ECDSA Client Auth Signature Algorithm Selection-server
client = 944-TLS 1.3 ECDSA Client Auth Signature Algorithm Selection-client

[944-TLS 1.3 ECDSA Client Auth Signature Algorithm Selection-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
ClientSignatureAlgorithms = ECDSA+SHA256
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/root-cert.pem
VerifyMode = Require

[944-TLS 1.3 ECDSA Client Auth Signature Algorithm Selection-client]
CipherString = DEFAULT
ECDSA.Certificate = ${ENV::TEST_CERTS_DIR}/ee-ecdsa-client-chain.pem
ECDSA.PrivateKey = ${ENV::TEST_CERTS_DIR}/ee-ecdsa-key.pem
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
RSA.Certificate = ${ENV::TEST_CERTS_DIR}/ee-client-chain.pem
RSA.PrivateKey = ${ENV::TEST_CERTS_DIR}/ee-key.pem
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-944]
ExpectedClientCertType = P-256
ExpectedClientSignHash = SHA256
ExpectedClientSignType = EC
ExpectedResult = Success
Serialize = Server


# ===========================================================

[945-TLS 1.3 Ed25519 Client Auth]
ssl_conf = 945-TLS 1.3 Ed25519 Client Auth-ssl

[945-TLS 1.3 Ed25519 Client Auth-ssl]
server = 945-TLS 1.3 Ed25519 Client Auth-server
client = 945-TLS 1.3 Ed25519 Client Auth-client

[945-TLS 1.3 Ed25519 Client Auth-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/root-cert.pem
VerifyMode = Require

[945-TLS 1.3 Ed25519 Client Auth-client]
CipherString = DEFAULT
EdDSA.Certificate = ${ENV::TEST_CERTS_DIR}/client-ed25519-cert.pem
EdDSA.PrivateKey = ${ENV::TEST_CERTS_DIR}/client-ed25519-key.pem
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-945]
ExpectedClientCertType = Ed25519
ExpectedClientSignType = Ed25519
ExpectedResult = Success
Serialize = Server


# ===========================================================

[946-TLS 1.3 Ed448 Client Auth]
ssl_conf = 946-TLS 1.3 Ed448 Client Auth-ssl

[946-TLS 1.3 Ed448 Client Auth-ssl]
server = 946-TLS 1.3 Ed448 Client Auth-server
client = 946-TLS 1.3 Ed448 Client Auth-client

[946-TLS 1.3 Ed448 Client Auth-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/root-cert.pem
VerifyMode = Require

[946-TLS 1.3 Ed448 Client Auth-client]
CipherString = DEFAULT
EdDSA.Certificate = ${ENV::TEST_CERTS_DIR}/client-ed448-cert.pem
EdDSA.PrivateKey = ${ENV::TEST_CERTS_DIR}/client-ed448-key.pem
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-946]
ExpectedClientCertType = Ed448
ExpectedClientSignType = Ed448
ExpectedResult = Success
Serialize = Server


# ===========================================================

[947-TLS 1.3 ECDSA with brainpool]
ssl_conf = 947-TLS 1.3 ECDSA with brainpool-ssl

[947-TLS 1.3 ECDSA with brainpool-ssl]
server = 947-TLS 1.3 ECDSA with brainpool-server
client = 947-TLS 1.3 ECDSA with brainpool-client

[947-TLS 1.3 ECDSA with brainpool-server]
Certificate = ${ENV::TEST_CERTS_DIR}/server-ecdsa-brainpoolP256r1-cert.pem
CipherString = DEFAULT
Groups = brainpoolP256r1
PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ecdsa-brainpoolP256r1-key.pem

[947-TLS 1.3 ECDSA with brainpool-client]
CipherString = DEFAULT
Groups = brainpoolP256r1
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
RequestCAFile = ${ENV::TEST_CERTS_DIR}/root-cert.pem
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-947]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[948-TLS 1.2 DSA Certificate Test]
ssl_conf = 948-TLS 1.2 DSA Certificate Test-ssl

[948-TLS 1.2 DSA Certificate Test-ssl]
server = 948-TLS 1.2 DSA Certificate Test-server
client = 948-TLS 1.2 DSA Certificate Test-client

[948-TLS 1.2 DSA Certificate Test-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = ALL
DHParameters = ${ENV::TEST_CERTS_DIR}/dhp2048.pem
DSA.Certificate = ${ENV::TEST_CERTS_DIR}/server-dsa-cert.pem
DSA.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-dsa-key.pem
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[948-TLS 1.2 DSA Certificate Test-client]
CipherString = ALL
SignatureAlgorithms = DSA+SHA256:DSA+SHA1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-948]
ExpectedResult = Success
Serialize = Server


# ===========================================================

[949-TLS 1.3 Client Auth No TLS 1.3 Signature Algorithms]
ssl_conf = 949-TLS 1.3 Client Auth No TLS 1.3 Signature Algorithms-ssl

[949-TLS 1.3 Client Auth No TLS 1.3 Signature Algorithms-ssl]
server = 949-TLS 1.3 Client Auth No TLS 1.3 Signature Algorithms-server
client = 949-TLS 1.3 Client Auth No TLS 1.3 Signature Algorithms-client

[949-TLS 1.3 Client Auth No TLS 1.3 Signature Algorithms-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
ClientSignatureAlgorithms = ECDSA+SHA1:DSA+SHA256:RSA+SHA256
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/root-cert.pem
VerifyMode = Request

[949-TLS 1.3 Client Auth No TLS 1.3 Signature Algorithms-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-949]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[950-TLS 1.3 DSA Certificate Test]
ssl_conf = 950-TLS 1.3 DSA Certificate Test-ssl

[950-TLS 1.3 DSA Certificate Test-ssl]
server = 950-TLS 1.3 DSA Certificate Test-server
client = 950-TLS 1.3 DSA Certificate Test-client

[950-TLS 1.3 DSA Certificate Test-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = ALL
DSA.Certificate = ${ENV::TEST_CERTS_DIR}/server-dsa-cert.pem
DSA.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-dsa-key.pem
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[950-TLS 1.3 DSA Certificate Test-client]
CipherString = ALL
SignatureAlgorithms = DSA+SHA1:DSA+SHA256:ECDSA+SHA256
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-950]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[951-update-key-client-update-not-requested]
ssl_conf = 951-update-key-client-update-not-requested-ssl

[951-update-key-client-update-not-requested-ssl]
server = 951-update-key-client-update-not-requested-server
client = 951-update-key-client-update-not-requested-client

[951-update-key-client-update-not-requested-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[951-update-key-client-update-not-requested-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-951]
ExpectedResult = Success
HandshakeMode = KeyUpdateClient
KeyUpdateType = KeyUpdateNotRequested
ResumptionExpected = No
Serialize = Server


# ===========================================================

[952-update-key-server-update-not-requested]
ssl_conf = 952-update-key-server-update-not-requested-ssl

[952-update-key-server-update-not-requested-ssl]
server = 952-update-key-server-update-not-requested-server
client = 952-update-key-server-update-not-requested-client

[952-update-key-server-update-not-requested-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[952-update-key-server-update-not-requested-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-952]
ExpectedResult = Success
HandshakeMode = KeyUpdateServer
KeyUpdateType = KeyUpdateNotRequested
ResumptionExpected = No
Serialize = Server


# ===========================================================

[953-update-key-client-update-requested]
ssl_conf = 953-update-key-client-update-requested-ssl

[953-update-key-client-update-requested-ssl]
server = 953-update-key-client-update-requested-server
client = 953-update-key-client-update-requested-client

[953-update-key-client-update-requested-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[953-update-key-client-update-requested-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-953]
ExpectedResult = Success
HandshakeMode = KeyUpdateClient
KeyUpdateType = KeyUpdateRequested
ResumptionExpected = No
Serialize = Server


# ===========================================================

[954-update-key-server-update-requested]
ssl_conf = 954-update-key-server-update-requested-ssl

[954-update-key-server-update-requested-ssl]
server = 954-update-key-server-update-requested-server
client = 954-update-key-server-update-requested-client

[954-update-key-server-update-requested-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[954-update-key-server-update-requested-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-954]
ExpectedResult = Success
HandshakeMode = KeyUpdateServer
KeyUpdateType = KeyUpdateRequested
ResumptionExpected = No
Serialize = Server


# ===========================================================

[955-default]
ssl_conf = 955-default-ssl

[955-default-ssl]
server = 955-default-server
client = 955-default-client

[955-default-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem
RecordPadding = 64

[955-default-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
RecordPadding = 11
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-955]
ExpectedResult = Success
Serialize = Server


# ===========================================================

[956-cipher-server-1]
ssl_conf = 956-cipher-server-1-ssl

[956-cipher-server-1-ssl]
server = 956-cipher-server-1-server
client = 956-cipher-server-1-client

[956-cipher-server-1-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[956-cipher-server-1-client]
CipherString = ECDHE-RSA-AES256-SHA384
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-956]
ExpectedCipher = ECDHE-RSA-AES256-SHA384
Serialize = Server


# ===========================================================

[957-cipher-server-2]
ssl_conf = 957-cipher-server-2-ssl

[957-cipher-server-2-ssl]
server = 957-cipher-server-2-server
client = 957-cipher-server-2-client

[957-cipher-server-2-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[957-cipher-server-2-client]
CipherString = ECDHE-RSA-AES128-SHA256
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-957]
ExpectedCipher = ECDHE-RSA-AES128-SHA256
Serialize = Server


# ===========================================================

[958-cipher-server-client-list]
ssl_conf = 958-cipher-server-client-list-ssl

[958-cipher-server-client-list-ssl]
server = 958-cipher-server-client-list-server
client = 958-cipher-server-client-list-client

[958-cipher-server-client-list-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[958-cipher-server-client-list-client]
CipherString = ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-958]
ExpectedCipher = ECDHE-RSA-AES128-SHA256
Serialize = Server


# ===========================================================

[959-cipher-server-pref-1]
ssl_conf = 959-cipher-server-pref-1-ssl

[959-cipher-server-pref-1-ssl]
server = 959-cipher-server-pref-1-server
client = 959-cipher-server-pref-1-client

[959-cipher-server-pref-1-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256
MaxProtocol = TLSv1.2
Options = ServerPreference
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[959-cipher-server-pref-1-client]
CipherString = ECDHE-RSA-AES256-SHA384
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-959]
ExpectedCipher = ECDHE-RSA-AES256-SHA384
Serialize = Server


# ===========================================================

[960-cipher-server-pref-2]
ssl_conf = 960-cipher-server-pref-2-ssl

[960-cipher-server-pref-2-ssl]
server = 960-cipher-server-pref-2-server
client = 960-cipher-server-pref-2-client

[960-cipher-server-pref-2-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256
MaxProtocol = TLSv1.2
Options = ServerPreference
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[960-cipher-server-pref-2-client]
CipherString = ECDHE-RSA-AES128-SHA256
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-960]
ExpectedCipher = ECDHE-RSA-AES128-SHA256
Serialize = Server


# ===========================================================

[961-cipher-server-pref-client-list]
ssl_conf = 961-cipher-server-pref-client-list-ssl

[961-cipher-server-pref-client-list-ssl]
server = 961-cipher-server-pref-client-list-server
client = 961-cipher-server-pref-client-list-client

[961-cipher-server-pref-client-list-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256
MaxProtocol = TLSv1.2
Options = ServerPreference
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[961-cipher-server-pref-client-list-client]
CipherString = ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-961]
ExpectedCipher = ECDHE-RSA-AES256-SHA384
Serialize = Server


# ===========================================================

[962-cipher-server-pref-not-mobile]
ssl_conf = 962-cipher-server-pref-not-mobile-ssl

[962-cipher-server-pref-not-mobile-ssl]
server = 962-cipher-server-pref-not-mobile-server
client = 962-cipher-server-pref-not-mobile-client

[962-cipher-server-pref-not-mobile-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-CHACHA20-POLY1305
MaxProtocol = TLSv1.2
Options = ServerPreference
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[962-cipher-server-pref-not-mobile-client]
CipherString = ECDHE-RSA-CHACHA20-POLY1305:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-962]
ExpectedCipher = ECDHE-RSA-AES256-SHA384
Serialize = Server


# ===========================================================

[963-cipher-server-pref-mobile]
ssl_conf = 963-cipher-server-pref-mobile-ssl

[963-cipher-server-pref-mobile-ssl]
server = 963-cipher-server-pref-mobile-server
client = 963-cipher-server-pref-mobile-client

[963-cipher-server-pref-mobile-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-CHACHA20-POLY1305
MaxProtocol = TLSv1.2
Options = ServerPreference,PrioritizeChaCha
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[963-cipher-server-pref-mobile-client]
CipherString = ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-CHACHA20-POLY1305
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-963]
ExpectedCipher = ECDHE-RSA-AES256-SHA384
Serialize = Server


# ===========================================================

[964-cipher-server-pref-mobile2]
ssl_conf = 964-cipher-server-pref-mobile2-ssl

[964-cipher-server-pref-mobile2-ssl]
server = 964-cipher-server-pref-mobile2-server
client = 964-cipher-server-pref-mobile2-client

[964-cipher-server-pref-mobile2-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-CHACHA20-POLY1305
MaxProtocol = TLSv1.2
Options = ServerPreference,PrioritizeChaCha
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[964-cipher-server-pref-mobile2-client]
CipherString = ECDHE-RSA-CHACHA20-POLY1305:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-964]
ExpectedCipher = ECDHE-RSA-CHACHA20-POLY1305
Serialize = Server


# ===========================================================

[965-server-auth-TLSv1.3]
ssl_conf = 965-server-auth-TLSv1.3-ssl

[965-server-auth-TLSv1.3-ssl]
server = 965-server-auth-TLSv1.3-server
client = 965-server-auth-TLSv1.3-client

[965-server-auth-TLSv1.3-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[965-server-auth-TLSv1.3-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-965]
ExpectedResult = Success
Serialize = Server


# ===========================================================

[966-client-auth-TLSv1.3-request]
ssl_conf = 966-client-auth-TLSv1.3-request-ssl

[966-client-auth-TLSv1.3-request-ssl]
server = 966-client-auth-TLSv1.3-request-server
client = 966-client-auth-TLSv1.3-request-client

[966-client-auth-TLSv1.3-request-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem
VerifyMode = Request

[966-client-auth-TLSv1.3-request-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-966]
ExpectedResult = Success
Serialize = Server


# ===========================================================

[967-client-auth-TLSv1.3-require-fail]
ssl_conf = 967-client-auth-TLSv1.3-require-fail-ssl

[967-client-auth-TLSv1.3-require-fail-ssl]
server = 967-client-auth-TLSv1.3-require-fail-server
client = 967-client-auth-TLSv1.3-require-fail-client

[967-client-auth-TLSv1.3-require-fail-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/root-cert.pem
VerifyMode = Require

[967-client-auth-TLSv1.3-require-fail-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-967]
ExpectedResult = ServerFail
ExpectedServerAlert = CertificateRequired
Serialize = Server


# ===========================================================

[968-client-auth-TLSv1.3-require]
ssl_conf = 968-client-auth-TLSv1.3-require-ssl

[968-client-auth-TLSv1.3-require-ssl]
server = 968-client-auth-TLSv1.3-require-server
client = 968-client-auth-TLSv1.3-require-client

[968-client-auth-TLSv1.3-require-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
ClientSignatureAlgorithms = PSS+SHA256
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/root-cert.pem
VerifyMode = Request

[968-client-auth-TLSv1.3-require-client]
Certificate = ${ENV::TEST_CERTS_DIR}/ee-client-chain.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/ee-key.pem
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-968]
ExpectedClientCANames = empty
ExpectedClientCertType = RSA
ExpectedClientSignHash = SHA256
ExpectedClientSignType = RSA-PSS
ExpectedResult = Success
Serialize = Server


# ===========================================================

[969-client-auth-TLSv1.3-require-non-empty-names]
ssl_conf = 969-client-auth-TLSv1.3-require-non-empty-names-ssl

[969-client-auth-TLSv1.3-require-non-empty-names-ssl]
server = 969-client-auth-TLSv1.3-require-non-empty-names-server
client = 969-client-auth-TLSv1.3-require-non-empty-names-client

[969-client-auth-TLSv1.3-require-non-empty-names-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
ClientCAFile = ${ENV::TEST_CERTS_DIR}/root-cert.pem
ClientSignatureAlgorithms = PSS+SHA256
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/root-cert.pem
VerifyMode = Request

[969-client-auth-TLSv1.3-require-non-empty-names-client]
Certificate = ${ENV::TEST_CERTS_DIR}/ee-client-chain.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/ee-key.pem
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-969]
ExpectedClientCANames = ${ENV::TEST_CERTS_DIR}/root-cert.pem
ExpectedClientCertType = RSA
ExpectedClientSignHash = SHA256
ExpectedClientSignType = RSA-PSS
ExpectedResult = Success
Serialize = Server


# ===========================================================

[970-client-auth-TLSv1.3-noroot]
ssl_conf = 970-client-auth-TLSv1.3-noroot-ssl

[970-client-auth-TLSv1.3-noroot-ssl]
server = 970-client-auth-TLSv1.3-noroot-server
client = 970-client-auth-TLSv1.3-noroot-client

[970-client-auth-TLSv1.3-noroot-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem
VerifyMode = Require

[970-client-auth-TLSv1.3-noroot-client]
Certificate = ${ENV::TEST_CERTS_DIR}/ee-client-chain.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/ee-key.pem
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-970]
ExpectedResult = ServerFail
ExpectedServerAlert = UnknownCA
Serialize = Server


# ===========================================================

[971-client-auth-TLSv1.3-request-post-handshake]
ssl_conf = 971-client-auth-TLSv1.3-request-post-handshake-ssl

[971-client-auth-TLSv1.3-request-post-handshake-ssl]
server = 971-client-auth-TLSv1.3-request-post-handshake-server
client = 971-client-auth-TLSv1.3-request-post-handshake-client

[971-client-auth-TLSv1.3-request-post-handshake-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem
VerifyMode = RequestPostHandshake

[971-client-auth-TLSv1.3-request-post-handshake-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-971]
ExpectedResult = ServerFail
HandshakeMode = PostHandshakeAuth
Serialize = Server


# ===========================================================

[972-client-auth-TLSv1.3-require-fail-post-handshake]
ssl_conf = 972-client-auth-TLSv1.3-require-fail-post-handshake-ssl

[972-client-auth-TLSv1.3-require-fail-post-handshake-ssl]
server = 972-client-auth-TLSv1.3-require-fail-post-handshake-server
client = 972-client-auth-TLSv1.3-require-fail-post-handshake-client

[972-client-auth-TLSv1.3-require-fail-post-handshake-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/root-cert.pem
VerifyMode = RequirePostHandshake

[972-client-auth-TLSv1.3-require-fail-post-handshake-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-972]
ExpectedResult = ServerFail
HandshakeMode = PostHandshakeAuth
Serialize = Server


# ===========================================================

[973-session-ticket-app-data12]
ssl_conf = 973-session-ticket-app-data12-ssl

[973-session-ticket-app-data12-ssl]
server = 973-session-ticket-app-data12-server
client = 973-session-ticket-app-data12-client
resume-server = 973-session-ticket-app-data12-server
resume-client = 973-session-ticket-app-data12-client

[973-session-ticket-app-data12-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[973-session-ticket-app-data12-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
Options = SessionTicket
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-973]
ExpectedResult = Success
ExpectedSessionTicketAppData = HelloWorld
HandshakeMode = Resume
ResumptionExpected = Yes
Serialize = Server
SessionTicketExpected = Yes
server = 973-session-ticket-app-data12-server-extra
resume-server = 973-session-ticket-app-data12-server-extra

[973-session-ticket-app-data12-server-extra]
SessionTicketAppData = HelloWorld


# ===========================================================

[974-session-ticket-app-data12]
ssl_conf = 974-session-ticket-app-data12-ssl

[974-session-ticket-app-data12-ssl]
server = 974-session-ticket-app-data12-server
client = 974-session-ticket-app-data12-client
resume-server = 974-session-ticket-app-data12-server
resume-client = 974-session-ticket-app-data12-client

[974-session-ticket-app-data12-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[974-session-ticket-app-data12-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
Options = SessionTicket
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-974]
ExpectedResult = Success
ExpectedSessionTicketAppData = 
HandshakeMode = Resume
ResumptionExpected = Yes
Serialize = Server
SessionTicketExpected = Yes


# ===========================================================

[975-session-ticket-app-data13]
ssl_conf = 975-session-ticket-app-data13-ssl

[975-session-ticket-app-data13-ssl]
server = 975-session-ticket-app-data13-server
client = 975-session-ticket-app-data13-client
resume-server = 975-session-ticket-app-data13-server
resume-client = 975-session-ticket-app-data13-client

[975-session-ticket-app-data13-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[975-session-ticket-app-data13-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
Options = SessionTicket
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-975]
ExpectedResult = Success
ExpectedSessionTicketAppData = HelloWorld
HandshakeMode = Resume
ResumptionExpected = Yes
Serialize = Server
SessionTicketExpected = Yes
server = 975-session-ticket-app-data13-server-extra
resume-server = 975-session-ticket-app-data13-server-extra

[975-session-ticket-app-data13-server-extra]
SessionTicketAppData = HelloWorld


# ===========================================================

[976-session-ticket-app-data13]
ssl_conf = 976-session-ticket-app-data13-ssl

[976-session-ticket-app-data13-ssl]
server = 976-session-ticket-app-data13-server
client = 976-session-ticket-app-data13-client
resume-server = 976-session-ticket-app-data13-server
resume-client = 976-session-ticket-app-data13-client

[976-session-ticket-app-data13-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[976-session-ticket-app-data13-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
Options = SessionTicket
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-976]
ExpectedResult = Success
ExpectedSessionTicketAppData = 
HandshakeMode = Resume
ResumptionExpected = Yes
Serialize = Server
SessionTicketExpected = Yes


# ===========================================================

[977-SECLEVEL 3 with default key]
ssl_conf = 977-SECLEVEL 3 with default key-ssl

[977-SECLEVEL 3 with default key-ssl]
server = 977-SECLEVEL 3 with default key-server
client = 977-SECLEVEL 3 with default key-client

[977-SECLEVEL 3 with default key-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT:@SECLEVEL=3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[977-SECLEVEL 3 with default key-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-977]
ExpectedResult = ServerFail
Serialize = Server


# ===========================================================

[978-SECLEVEL 3 with ED448 key]
ssl_conf = 978-SECLEVEL 3 with ED448 key-ssl

[978-SECLEVEL 3 with ED448 key-ssl]
server = 978-SECLEVEL 3 with ED448 key-server
client = 978-SECLEVEL 3 with ED448 key-client

[978-SECLEVEL 3 with ED448 key-server]
Certificate = ${ENV::TEST_CERTS_DIR}/server-ed448-cert.pem
CipherString = DEFAULT:@SECLEVEL=3
PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ed448-key.pem

[978-SECLEVEL 3 with ED448 key-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-978]
ExpectedResult = Success
Serialize = Server


# ===========================================================

[979-SECLEVEL 3 with P-384 key, X25519 ECDHE]
ssl_conf = 979-SECLEVEL 3 with P-384 key, X25519 ECDHE-ssl

[979-SECLEVEL 3 with P-384 key, X25519 ECDHE-ssl]
server = 979-SECLEVEL 3 with P-384 key, X25519 ECDHE-server
client = 979-SECLEVEL 3 with P-384 key, X25519 ECDHE-client

[979-SECLEVEL 3 with P-384 key, X25519 ECDHE-server]
Certificate = ${ENV::TEST_CERTS_DIR}/p384-server-cert.pem
CipherString = DEFAULT:@SECLEVEL=3
Groups = X25519
PrivateKey = ${ENV::TEST_CERTS_DIR}/p384-server-key.pem

[979-SECLEVEL 3 with P-384 key, X25519 ECDHE-client]
CipherString = ECDHE:@SECLEVEL=3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/p384-root.pem
VerifyMode = Peer

[test-979]
ExpectedResult = Success
Serialize = Server


# ===========================================================

[980-SECLEVEL 3 with ED448 key, TLSv1.2]
ssl_conf = 980-SECLEVEL 3 with ED448 key, TLSv1.2-ssl

[980-SECLEVEL 3 with ED448 key, TLSv1.2-ssl]
server = 980-SECLEVEL 3 with ED448 key, TLSv1.2-server
client = 980-SECLEVEL 3 with ED448 key, TLSv1.2-client

[980-SECLEVEL 3 with ED448 key, TLSv1.2-server]
Certificate = ${ENV::TEST_CERTS_DIR}/server-ed448-cert.pem
CipherString = DEFAULT:@SECLEVEL=3
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ed448-key.pem

[980-SECLEVEL 3 with ED448 key, TLSv1.2-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-980]
ExpectedResult = Success
Serialize = Server


# ===========================================================

[981-default]
ssl_conf = 981-default-ssl

[981-default-ssl]
server = 981-default-server
client = 981-default-client

[981-default-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[981-default-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-981]
ExpectedResult = Success
Serialize = Client


# ===========================================================

[982-Server signature algorithms bug]
ssl_conf = 982-Server signature algorithms bug-ssl

[982-Server signature algorithms bug-ssl]
server = 982-Server signature algorithms bug-server
client = 982-Server signature algorithms bug-client

[982-Server signature algorithms bug-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
ClientSignatureAlgorithms = PSS+SHA512:RSA+SHA512
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[982-Server signature algorithms bug-client]
CipherString = DEFAULT
SignatureAlgorithms = PSS+SHA256:RSA+SHA256
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-982]
ExpectedResult = Success
Serialize = Client


# ===========================================================

[983-verify-cert]
ssl_conf = 983-verify-cert-ssl

[983-verify-cert-ssl]
server = 983-verify-cert-server
client = 983-verify-cert-client

[983-verify-cert-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[983-verify-cert-client]
CipherString = DEFAULT
VerifyMode = Peer

[test-983]
ExpectedClientAlert = UnknownCA
ExpectedResult = ClientFail
Serialize = Client


# ===========================================================

[984-version-negotiation]
ssl_conf = 984-version-negotiation-ssl

[984-version-negotiation-ssl]
server = 984-version-negotiation-server
client = 984-version-negotiation-client

[984-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[984-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-984]
ExpectedResult = ClientFail
Serialize = Client


# ===========================================================

[985-version-negotiation]
ssl_conf = 985-version-negotiation-ssl

[985-version-negotiation-ssl]
server = 985-version-negotiation-server
client = 985-version-negotiation-client

[985-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[985-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-985]
ExpectedResult = ClientFail
Serialize = Client


# ===========================================================

[986-version-negotiation]
ssl_conf = 986-version-negotiation-ssl

[986-version-negotiation-ssl]
server = 986-version-negotiation-server
client = 986-version-negotiation-client

[986-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[986-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-986]
ExpectedResult = ClientFail
Serialize = Client


# ===========================================================

[987-version-negotiation]
ssl_conf = 987-version-negotiation-ssl

[987-version-negotiation-ssl]
server = 987-version-negotiation-server
client = 987-version-negotiation-client

[987-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[987-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-987]
ExpectedResult = ClientFail
Serialize = Client


# ===========================================================

[988-version-negotiation]
ssl_conf = 988-version-negotiation-ssl

[988-version-negotiation-ssl]
server = 988-version-negotiation-server
client = 988-version-negotiation-client

[988-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[988-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-988]
ExpectedResult = ClientFail
Serialize = Client


# ===========================================================

[989-version-negotiation]
ssl_conf = 989-version-negotiation-ssl

[989-version-negotiation-ssl]
server = 989-version-negotiation-server
client = 989-version-negotiation-client

[989-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[989-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-989]
ExpectedResult = ClientFail
Serialize = Client


# ===========================================================

[990-version-negotiation]
ssl_conf = 990-version-negotiation-ssl

[990-version-negotiation-ssl]
server = 990-version-negotiation-server
client = 990-version-negotiation-client

[990-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = SSLv3
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[990-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-990]
ExpectedResult = ClientFail
Serialize = Client


# ===========================================================

[991-version-negotiation]
ssl_conf = 991-version-negotiation-ssl

[991-version-negotiation-ssl]
server = 991-version-negotiation-server
client = 991-version-negotiation-client

[991-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[991-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-991]
ExpectedResult = ClientFail
Serialize = Client


# ===========================================================

[992-version-negotiation]
ssl_conf = 992-version-negotiation-ssl

[992-version-negotiation-ssl]
server = 992-version-negotiation-server
client = 992-version-negotiation-client

[992-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[992-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-992]
ExpectedResult = ClientFail
Serialize = Client


# ===========================================================

[993-version-negotiation]
ssl_conf = 993-version-negotiation-ssl

[993-version-negotiation-ssl]
server = 993-version-negotiation-server
client = 993-version-negotiation-client

[993-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[993-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-993]
ExpectedResult = ClientFail
Serialize = Client


# ===========================================================

[994-version-negotiation]
ssl_conf = 994-version-negotiation-ssl

[994-version-negotiation-ssl]
server = 994-version-negotiation-server
client = 994-version-negotiation-client

[994-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[994-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-994]
ExpectedResult = ClientFail
Serialize = Client


# ===========================================================

[995-version-negotiation]
ssl_conf = 995-version-negotiation-ssl

[995-version-negotiation-ssl]
server = 995-version-negotiation-server
client = 995-version-negotiation-client

[995-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[995-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-995]
ExpectedResult = ClientFail
Serialize = Client


# ===========================================================

[996-version-negotiation]
ssl_conf = 996-version-negotiation-ssl

[996-version-negotiation-ssl]
server = 996-version-negotiation-server
client = 996-version-negotiation-client

[996-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[996-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-996]
ExpectedResult = ClientFail
Serialize = Client


# ===========================================================

[997-version-negotiation]
ssl_conf = 997-version-negotiation-ssl

[997-version-negotiation-ssl]
server = 997-version-negotiation-server
client = 997-version-negotiation-client

[997-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[997-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-997]
ExpectedResult = ClientFail
Serialize = Client


# ===========================================================

[998-version-negotiation]
ssl_conf = 998-version-negotiation-ssl

[998-version-negotiation-ssl]
server = 998-version-negotiation-server
client = 998-version-negotiation-client

[998-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[998-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-998]
ExpectedResult = ClientFail
Serialize = Client


# ===========================================================

[999-version-negotiation]
ssl_conf = 999-version-negotiation-ssl

[999-version-negotiation-ssl]
server = 999-version-negotiation-server
client = 999-version-negotiation-client

[999-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[999-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-999]
ExpectedResult = ClientFail
Serialize = Client


# ===========================================================

[1000-version-negotiation]
ssl_conf = 1000-version-negotiation-ssl

[1000-version-negotiation-ssl]
server = 1000-version-negotiation-server
client = 1000-version-negotiation-client

[1000-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1000-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1000]
ExpectedResult = ClientFail
Serialize = Client


# ===========================================================

[1001-version-negotiation]
ssl_conf = 1001-version-negotiation-ssl

[1001-version-negotiation-ssl]
server = 1001-version-negotiation-server
client = 1001-version-negotiation-client

[1001-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1001-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1001]
ExpectedResult = ClientFail
Serialize = Client


# ===========================================================

[1002-version-negotiation]
ssl_conf = 1002-version-negotiation-ssl

[1002-version-negotiation-ssl]
server = 1002-version-negotiation-server
client = 1002-version-negotiation-client

[1002-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1002-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1002]
ExpectedResult = ClientFail
Serialize = Client


# ===========================================================

[1003-version-negotiation]
ssl_conf = 1003-version-negotiation-ssl

[1003-version-negotiation-ssl]
server = 1003-version-negotiation-server
client = 1003-version-negotiation-client

[1003-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1003-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1003]
ExpectedResult = ClientFail
Serialize = Client


# ===========================================================

[1004-version-negotiation]
ssl_conf = 1004-version-negotiation-ssl

[1004-version-negotiation-ssl]
server = 1004-version-negotiation-server
client = 1004-version-negotiation-client

[1004-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1004-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1004]
ExpectedResult = ClientFail
Serialize = Client


# ===========================================================

[1005-version-negotiation]
ssl_conf = 1005-version-negotiation-ssl

[1005-version-negotiation-ssl]
server = 1005-version-negotiation-server
client = 1005-version-negotiation-client

[1005-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1005-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1005]
ExpectedResult = ClientFail
Serialize = Client


# ===========================================================

[1006-version-negotiation]
ssl_conf = 1006-version-negotiation-ssl

[1006-version-negotiation-ssl]
server = 1006-version-negotiation-server
client = 1006-version-negotiation-client

[1006-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1006-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1006]
ExpectedResult = ClientFail
Serialize = Client


# ===========================================================

[1007-version-negotiation]
ssl_conf = 1007-version-negotiation-ssl

[1007-version-negotiation-ssl]
server = 1007-version-negotiation-server
client = 1007-version-negotiation-client

[1007-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1007-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1007]
ExpectedResult = ClientFail
Serialize = Client


# ===========================================================

[1008-version-negotiation]
ssl_conf = 1008-version-negotiation-ssl

[1008-version-negotiation-ssl]
server = 1008-version-negotiation-server
client = 1008-version-negotiation-client

[1008-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1008-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1008]
ExpectedResult = ClientFail
Serialize = Client


# ===========================================================

[1009-version-negotiation]
ssl_conf = 1009-version-negotiation-ssl

[1009-version-negotiation-ssl]
server = 1009-version-negotiation-server
client = 1009-version-negotiation-client

[1009-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1009-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1009]
ExpectedResult = ClientFail
Serialize = Client


# ===========================================================

[1010-version-negotiation]
ssl_conf = 1010-version-negotiation-ssl

[1010-version-negotiation-ssl]
server = 1010-version-negotiation-server
client = 1010-version-negotiation-client

[1010-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1010-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1010]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1011-version-negotiation]
ssl_conf = 1011-version-negotiation-ssl

[1011-version-negotiation-ssl]
server = 1011-version-negotiation-server
client = 1011-version-negotiation-client

[1011-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1011-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1011]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1012-version-negotiation]
ssl_conf = 1012-version-negotiation-ssl

[1012-version-negotiation-ssl]
server = 1012-version-negotiation-server
client = 1012-version-negotiation-client

[1012-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1012-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1012]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1013-version-negotiation]
ssl_conf = 1013-version-negotiation-ssl

[1013-version-negotiation-ssl]
server = 1013-version-negotiation-server
client = 1013-version-negotiation-client

[1013-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1013-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1013]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1014-version-negotiation]
ssl_conf = 1014-version-negotiation-ssl

[1014-version-negotiation-ssl]
server = 1014-version-negotiation-server
client = 1014-version-negotiation-client

[1014-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1014-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1014]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1015-version-negotiation]
ssl_conf = 1015-version-negotiation-ssl

[1015-version-negotiation-ssl]
server = 1015-version-negotiation-server
client = 1015-version-negotiation-client

[1015-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1015-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1015]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1016-version-negotiation]
ssl_conf = 1016-version-negotiation-ssl

[1016-version-negotiation-ssl]
server = 1016-version-negotiation-server
client = 1016-version-negotiation-client

[1016-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = SSLv3
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1016-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1016]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1017-version-negotiation]
ssl_conf = 1017-version-negotiation-ssl

[1017-version-negotiation-ssl]
server = 1017-version-negotiation-server
client = 1017-version-negotiation-client

[1017-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1017-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1017]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1018-version-negotiation]
ssl_conf = 1018-version-negotiation-ssl

[1018-version-negotiation-ssl]
server = 1018-version-negotiation-server
client = 1018-version-negotiation-client

[1018-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1018-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1018]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1019-version-negotiation]
ssl_conf = 1019-version-negotiation-ssl

[1019-version-negotiation-ssl]
server = 1019-version-negotiation-server
client = 1019-version-negotiation-client

[1019-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1019-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1019]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1020-version-negotiation]
ssl_conf = 1020-version-negotiation-ssl

[1020-version-negotiation-ssl]
server = 1020-version-negotiation-server
client = 1020-version-negotiation-client

[1020-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1020-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1020]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1021-version-negotiation]
ssl_conf = 1021-version-negotiation-ssl

[1021-version-negotiation-ssl]
server = 1021-version-negotiation-server
client = 1021-version-negotiation-client

[1021-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1021-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1021]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1022-version-negotiation]
ssl_conf = 1022-version-negotiation-ssl

[1022-version-negotiation-ssl]
server = 1022-version-negotiation-server
client = 1022-version-negotiation-client

[1022-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1022-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1022]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1023-version-negotiation]
ssl_conf = 1023-version-negotiation-ssl

[1023-version-negotiation-ssl]
server = 1023-version-negotiation-server
client = 1023-version-negotiation-client

[1023-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1023-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1023]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1024-version-negotiation]
ssl_conf = 1024-version-negotiation-ssl

[1024-version-negotiation-ssl]
server = 1024-version-negotiation-server
client = 1024-version-negotiation-client

[1024-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1024-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1024]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1025-version-negotiation]
ssl_conf = 1025-version-negotiation-ssl

[1025-version-negotiation-ssl]
server = 1025-version-negotiation-server
client = 1025-version-negotiation-client

[1025-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1025-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1025]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1026-version-negotiation]
ssl_conf = 1026-version-negotiation-ssl

[1026-version-negotiation-ssl]
server = 1026-version-negotiation-server
client = 1026-version-negotiation-client

[1026-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1026-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1026]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1027-version-negotiation]
ssl_conf = 1027-version-negotiation-ssl

[1027-version-negotiation-ssl]
server = 1027-version-negotiation-server
client = 1027-version-negotiation-client

[1027-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1027-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1027]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1028-version-negotiation]
ssl_conf = 1028-version-negotiation-ssl

[1028-version-negotiation-ssl]
server = 1028-version-negotiation-server
client = 1028-version-negotiation-client

[1028-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1028-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1028]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1029-version-negotiation]
ssl_conf = 1029-version-negotiation-ssl

[1029-version-negotiation-ssl]
server = 1029-version-negotiation-server
client = 1029-version-negotiation-client

[1029-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1029-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1029]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1030-version-negotiation]
ssl_conf = 1030-version-negotiation-ssl

[1030-version-negotiation-ssl]
server = 1030-version-negotiation-server
client = 1030-version-negotiation-client

[1030-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1030-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1030]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1031-version-negotiation]
ssl_conf = 1031-version-negotiation-ssl

[1031-version-negotiation-ssl]
server = 1031-version-negotiation-server
client = 1031-version-negotiation-client

[1031-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1031-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1031]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1032-version-negotiation]
ssl_conf = 1032-version-negotiation-ssl

[1032-version-negotiation-ssl]
server = 1032-version-negotiation-server
client = 1032-version-negotiation-client

[1032-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1032-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1032]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1033-version-negotiation]
ssl_conf = 1033-version-negotiation-ssl

[1033-version-negotiation-ssl]
server = 1033-version-negotiation-server
client = 1033-version-negotiation-client

[1033-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1033-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1033]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1034-version-negotiation]
ssl_conf = 1034-version-negotiation-ssl

[1034-version-negotiation-ssl]
server = 1034-version-negotiation-server
client = 1034-version-negotiation-client

[1034-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1034-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1034]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1035-version-negotiation]
ssl_conf = 1035-version-negotiation-ssl

[1035-version-negotiation-ssl]
server = 1035-version-negotiation-server
client = 1035-version-negotiation-client

[1035-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1035-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1035]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1036-version-negotiation]
ssl_conf = 1036-version-negotiation-ssl

[1036-version-negotiation-ssl]
server = 1036-version-negotiation-server
client = 1036-version-negotiation-client

[1036-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1036-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1036]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1037-version-negotiation]
ssl_conf = 1037-version-negotiation-ssl

[1037-version-negotiation-ssl]
server = 1037-version-negotiation-server
client = 1037-version-negotiation-client

[1037-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1037-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1037]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1038-version-negotiation]
ssl_conf = 1038-version-negotiation-ssl

[1038-version-negotiation-ssl]
server = 1038-version-negotiation-server
client = 1038-version-negotiation-client

[1038-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1038-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1038]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1039-version-negotiation]
ssl_conf = 1039-version-negotiation-ssl

[1039-version-negotiation-ssl]
server = 1039-version-negotiation-server
client = 1039-version-negotiation-client

[1039-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1039-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1039]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1040-version-negotiation]
ssl_conf = 1040-version-negotiation-ssl

[1040-version-negotiation-ssl]
server = 1040-version-negotiation-server
client = 1040-version-negotiation-client

[1040-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1040-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1040]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1041-version-negotiation]
ssl_conf = 1041-version-negotiation-ssl

[1041-version-negotiation-ssl]
server = 1041-version-negotiation-server
client = 1041-version-negotiation-client

[1041-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1041-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1041]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1042-version-negotiation]
ssl_conf = 1042-version-negotiation-ssl

[1042-version-negotiation-ssl]
server = 1042-version-negotiation-server
client = 1042-version-negotiation-client

[1042-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = SSLv3
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1042-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1042]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1043-version-negotiation]
ssl_conf = 1043-version-negotiation-ssl

[1043-version-negotiation-ssl]
server = 1043-version-negotiation-server
client = 1043-version-negotiation-client

[1043-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1043-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1043]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1044-version-negotiation]
ssl_conf = 1044-version-negotiation-ssl

[1044-version-negotiation-ssl]
server = 1044-version-negotiation-server
client = 1044-version-negotiation-client

[1044-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1044-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1044]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1045-version-negotiation]
ssl_conf = 1045-version-negotiation-ssl

[1045-version-negotiation-ssl]
server = 1045-version-negotiation-server
client = 1045-version-negotiation-client

[1045-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1045-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1045]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1046-version-negotiation]
ssl_conf = 1046-version-negotiation-ssl

[1046-version-negotiation-ssl]
server = 1046-version-negotiation-server
client = 1046-version-negotiation-client

[1046-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1046-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1046]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1047-version-negotiation]
ssl_conf = 1047-version-negotiation-ssl

[1047-version-negotiation-ssl]
server = 1047-version-negotiation-server
client = 1047-version-negotiation-client

[1047-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1047-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1047]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1048-version-negotiation]
ssl_conf = 1048-version-negotiation-ssl

[1048-version-negotiation-ssl]
server = 1048-version-negotiation-server
client = 1048-version-negotiation-client

[1048-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1048-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1048]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1049-version-negotiation]
ssl_conf = 1049-version-negotiation-ssl

[1049-version-negotiation-ssl]
server = 1049-version-negotiation-server
client = 1049-version-negotiation-client

[1049-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1049-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1049]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1050-version-negotiation]
ssl_conf = 1050-version-negotiation-ssl

[1050-version-negotiation-ssl]
server = 1050-version-negotiation-server
client = 1050-version-negotiation-client

[1050-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1050-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1050]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1051-version-negotiation]
ssl_conf = 1051-version-negotiation-ssl

[1051-version-negotiation-ssl]
server = 1051-version-negotiation-server
client = 1051-version-negotiation-client

[1051-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1051-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1051]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1052-version-negotiation]
ssl_conf = 1052-version-negotiation-ssl

[1052-version-negotiation-ssl]
server = 1052-version-negotiation-server
client = 1052-version-negotiation-client

[1052-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1052-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1052]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1053-version-negotiation]
ssl_conf = 1053-version-negotiation-ssl

[1053-version-negotiation-ssl]
server = 1053-version-negotiation-server
client = 1053-version-negotiation-client

[1053-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1053-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1053]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1054-version-negotiation]
ssl_conf = 1054-version-negotiation-ssl

[1054-version-negotiation-ssl]
server = 1054-version-negotiation-server
client = 1054-version-negotiation-client

[1054-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1054-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1054]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1055-version-negotiation]
ssl_conf = 1055-version-negotiation-ssl

[1055-version-negotiation-ssl]
server = 1055-version-negotiation-server
client = 1055-version-negotiation-client

[1055-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1055-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1055]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1056-version-negotiation]
ssl_conf = 1056-version-negotiation-ssl

[1056-version-negotiation-ssl]
server = 1056-version-negotiation-server
client = 1056-version-negotiation-client

[1056-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1056-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1056]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1057-version-negotiation]
ssl_conf = 1057-version-negotiation-ssl

[1057-version-negotiation-ssl]
server = 1057-version-negotiation-server
client = 1057-version-negotiation-client

[1057-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1057-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1057]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1058-version-negotiation]
ssl_conf = 1058-version-negotiation-ssl

[1058-version-negotiation-ssl]
server = 1058-version-negotiation-server
client = 1058-version-negotiation-client

[1058-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1058-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1058]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1059-version-negotiation]
ssl_conf = 1059-version-negotiation-ssl

[1059-version-negotiation-ssl]
server = 1059-version-negotiation-server
client = 1059-version-negotiation-client

[1059-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1059-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1059]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1060-version-negotiation]
ssl_conf = 1060-version-negotiation-ssl

[1060-version-negotiation-ssl]
server = 1060-version-negotiation-server
client = 1060-version-negotiation-client

[1060-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1060-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1060]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1061-version-negotiation]
ssl_conf = 1061-version-negotiation-ssl

[1061-version-negotiation-ssl]
server = 1061-version-negotiation-server
client = 1061-version-negotiation-client

[1061-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1061-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1061]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1062-version-negotiation]
ssl_conf = 1062-version-negotiation-ssl

[1062-version-negotiation-ssl]
server = 1062-version-negotiation-server
client = 1062-version-negotiation-client

[1062-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1062-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1062]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1063-version-negotiation]
ssl_conf = 1063-version-negotiation-ssl

[1063-version-negotiation-ssl]
server = 1063-version-negotiation-server
client = 1063-version-negotiation-client

[1063-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1063-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1063]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1064-version-negotiation]
ssl_conf = 1064-version-negotiation-ssl

[1064-version-negotiation-ssl]
server = 1064-version-negotiation-server
client = 1064-version-negotiation-client

[1064-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1064-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1064]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1065-version-negotiation]
ssl_conf = 1065-version-negotiation-ssl

[1065-version-negotiation-ssl]
server = 1065-version-negotiation-server
client = 1065-version-negotiation-client

[1065-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1065-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1065]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1066-version-negotiation]
ssl_conf = 1066-version-negotiation-ssl

[1066-version-negotiation-ssl]
server = 1066-version-negotiation-server
client = 1066-version-negotiation-client

[1066-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1066-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1066]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1067-version-negotiation]
ssl_conf = 1067-version-negotiation-ssl

[1067-version-negotiation-ssl]
server = 1067-version-negotiation-server
client = 1067-version-negotiation-client

[1067-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1067-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1067]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1068-version-negotiation]
ssl_conf = 1068-version-negotiation-ssl

[1068-version-negotiation-ssl]
server = 1068-version-negotiation-server
client = 1068-version-negotiation-client

[1068-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = SSLv3
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1068-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1068]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1069-version-negotiation]
ssl_conf = 1069-version-negotiation-ssl

[1069-version-negotiation-ssl]
server = 1069-version-negotiation-server
client = 1069-version-negotiation-client

[1069-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1069-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1069]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1070-version-negotiation]
ssl_conf = 1070-version-negotiation-ssl

[1070-version-negotiation-ssl]
server = 1070-version-negotiation-server
client = 1070-version-negotiation-client

[1070-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1070-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1070]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1071-version-negotiation]
ssl_conf = 1071-version-negotiation-ssl

[1071-version-negotiation-ssl]
server = 1071-version-negotiation-server
client = 1071-version-negotiation-client

[1071-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1071-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1071]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1072-version-negotiation]
ssl_conf = 1072-version-negotiation-ssl

[1072-version-negotiation-ssl]
server = 1072-version-negotiation-server
client = 1072-version-negotiation-client

[1072-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1072-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1072]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1073-version-negotiation]
ssl_conf = 1073-version-negotiation-ssl

[1073-version-negotiation-ssl]
server = 1073-version-negotiation-server
client = 1073-version-negotiation-client

[1073-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1073-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1073]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1074-version-negotiation]
ssl_conf = 1074-version-negotiation-ssl

[1074-version-negotiation-ssl]
server = 1074-version-negotiation-server
client = 1074-version-negotiation-client

[1074-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1074-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1074]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1075-version-negotiation]
ssl_conf = 1075-version-negotiation-ssl

[1075-version-negotiation-ssl]
server = 1075-version-negotiation-server
client = 1075-version-negotiation-client

[1075-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1075-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1075]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1076-version-negotiation]
ssl_conf = 1076-version-negotiation-ssl

[1076-version-negotiation-ssl]
server = 1076-version-negotiation-server
client = 1076-version-negotiation-client

[1076-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1076-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1076]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1077-version-negotiation]
ssl_conf = 1077-version-negotiation-ssl

[1077-version-negotiation-ssl]
server = 1077-version-negotiation-server
client = 1077-version-negotiation-client

[1077-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1077-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1077]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1078-version-negotiation]
ssl_conf = 1078-version-negotiation-ssl

[1078-version-negotiation-ssl]
server = 1078-version-negotiation-server
client = 1078-version-negotiation-client

[1078-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1078-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1078]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1079-version-negotiation]
ssl_conf = 1079-version-negotiation-ssl

[1079-version-negotiation-ssl]
server = 1079-version-negotiation-server
client = 1079-version-negotiation-client

[1079-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1079-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1079]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1080-version-negotiation]
ssl_conf = 1080-version-negotiation-ssl

[1080-version-negotiation-ssl]
server = 1080-version-negotiation-server
client = 1080-version-negotiation-client

[1080-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1080-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1080]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1081-version-negotiation]
ssl_conf = 1081-version-negotiation-ssl

[1081-version-negotiation-ssl]
server = 1081-version-negotiation-server
client = 1081-version-negotiation-client

[1081-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1081-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1081]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1082-version-negotiation]
ssl_conf = 1082-version-negotiation-ssl

[1082-version-negotiation-ssl]
server = 1082-version-negotiation-server
client = 1082-version-negotiation-client

[1082-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1082-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1082]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1083-version-negotiation]
ssl_conf = 1083-version-negotiation-ssl

[1083-version-negotiation-ssl]
server = 1083-version-negotiation-server
client = 1083-version-negotiation-client

[1083-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1083-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1083]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1084-version-negotiation]
ssl_conf = 1084-version-negotiation-ssl

[1084-version-negotiation-ssl]
server = 1084-version-negotiation-server
client = 1084-version-negotiation-client

[1084-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1084-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1084]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1085-version-negotiation]
ssl_conf = 1085-version-negotiation-ssl

[1085-version-negotiation-ssl]
server = 1085-version-negotiation-server
client = 1085-version-negotiation-client

[1085-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1085-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1085]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1086-version-negotiation]
ssl_conf = 1086-version-negotiation-ssl

[1086-version-negotiation-ssl]
server = 1086-version-negotiation-server
client = 1086-version-negotiation-client

[1086-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1086-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1086]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1087-version-negotiation]
ssl_conf = 1087-version-negotiation-ssl

[1087-version-negotiation-ssl]
server = 1087-version-negotiation-server
client = 1087-version-negotiation-client

[1087-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1087-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1087]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1088-version-negotiation]
ssl_conf = 1088-version-negotiation-ssl

[1088-version-negotiation-ssl]
server = 1088-version-negotiation-server
client = 1088-version-negotiation-client

[1088-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1088-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1088]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1089-version-negotiation]
ssl_conf = 1089-version-negotiation-ssl

[1089-version-negotiation-ssl]
server = 1089-version-negotiation-server
client = 1089-version-negotiation-client

[1089-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1089-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1089]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1090-version-negotiation]
ssl_conf = 1090-version-negotiation-ssl

[1090-version-negotiation-ssl]
server = 1090-version-negotiation-server
client = 1090-version-negotiation-client

[1090-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1090-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1090]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1091-version-negotiation]
ssl_conf = 1091-version-negotiation-ssl

[1091-version-negotiation-ssl]
server = 1091-version-negotiation-server
client = 1091-version-negotiation-client

[1091-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1091-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1091]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1092-version-negotiation]
ssl_conf = 1092-version-negotiation-ssl

[1092-version-negotiation-ssl]
server = 1092-version-negotiation-server
client = 1092-version-negotiation-client

[1092-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1092-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1092]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1093-version-negotiation]
ssl_conf = 1093-version-negotiation-ssl

[1093-version-negotiation-ssl]
server = 1093-version-negotiation-server
client = 1093-version-negotiation-client

[1093-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1093-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1093]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1094-version-negotiation]
ssl_conf = 1094-version-negotiation-ssl

[1094-version-negotiation-ssl]
server = 1094-version-negotiation-server
client = 1094-version-negotiation-client

[1094-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = SSLv3
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1094-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1094]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1095-version-negotiation]
ssl_conf = 1095-version-negotiation-ssl

[1095-version-negotiation-ssl]
server = 1095-version-negotiation-server
client = 1095-version-negotiation-client

[1095-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1095-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1095]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1096-version-negotiation]
ssl_conf = 1096-version-negotiation-ssl

[1096-version-negotiation-ssl]
server = 1096-version-negotiation-server
client = 1096-version-negotiation-client

[1096-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1096-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1096]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1097-version-negotiation]
ssl_conf = 1097-version-negotiation-ssl

[1097-version-negotiation-ssl]
server = 1097-version-negotiation-server
client = 1097-version-negotiation-client

[1097-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1097-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1097]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1098-version-negotiation]
ssl_conf = 1098-version-negotiation-ssl

[1098-version-negotiation-ssl]
server = 1098-version-negotiation-server
client = 1098-version-negotiation-client

[1098-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1098-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1098]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1099-version-negotiation]
ssl_conf = 1099-version-negotiation-ssl

[1099-version-negotiation-ssl]
server = 1099-version-negotiation-server
client = 1099-version-negotiation-client

[1099-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1099-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1099]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1100-version-negotiation]
ssl_conf = 1100-version-negotiation-ssl

[1100-version-negotiation-ssl]
server = 1100-version-negotiation-server
client = 1100-version-negotiation-client

[1100-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1100-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1100]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1101-version-negotiation]
ssl_conf = 1101-version-negotiation-ssl

[1101-version-negotiation-ssl]
server = 1101-version-negotiation-server
client = 1101-version-negotiation-client

[1101-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1101-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1101]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1102-version-negotiation]
ssl_conf = 1102-version-negotiation-ssl

[1102-version-negotiation-ssl]
server = 1102-version-negotiation-server
client = 1102-version-negotiation-client

[1102-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1102-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1102]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1103-version-negotiation]
ssl_conf = 1103-version-negotiation-ssl

[1103-version-negotiation-ssl]
server = 1103-version-negotiation-server
client = 1103-version-negotiation-client

[1103-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1103-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1103]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1104-version-negotiation]
ssl_conf = 1104-version-negotiation-ssl

[1104-version-negotiation-ssl]
server = 1104-version-negotiation-server
client = 1104-version-negotiation-client

[1104-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1104-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1104]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1105-version-negotiation]
ssl_conf = 1105-version-negotiation-ssl

[1105-version-negotiation-ssl]
server = 1105-version-negotiation-server
client = 1105-version-negotiation-client

[1105-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1105-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1105]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1106-version-negotiation]
ssl_conf = 1106-version-negotiation-ssl

[1106-version-negotiation-ssl]
server = 1106-version-negotiation-server
client = 1106-version-negotiation-client

[1106-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1106-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1106]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1107-version-negotiation]
ssl_conf = 1107-version-negotiation-ssl

[1107-version-negotiation-ssl]
server = 1107-version-negotiation-server
client = 1107-version-negotiation-client

[1107-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1107-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1107]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1108-version-negotiation]
ssl_conf = 1108-version-negotiation-ssl

[1108-version-negotiation-ssl]
server = 1108-version-negotiation-server
client = 1108-version-negotiation-client

[1108-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1108-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1108]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1109-version-negotiation]
ssl_conf = 1109-version-negotiation-ssl

[1109-version-negotiation-ssl]
server = 1109-version-negotiation-server
client = 1109-version-negotiation-client

[1109-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1109-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1109]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1110-version-negotiation]
ssl_conf = 1110-version-negotiation-ssl

[1110-version-negotiation-ssl]
server = 1110-version-negotiation-server
client = 1110-version-negotiation-client

[1110-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1110-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1110]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1111-version-negotiation]
ssl_conf = 1111-version-negotiation-ssl

[1111-version-negotiation-ssl]
server = 1111-version-negotiation-server
client = 1111-version-negotiation-client

[1111-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1111-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1111]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1112-version-negotiation]
ssl_conf = 1112-version-negotiation-ssl

[1112-version-negotiation-ssl]
server = 1112-version-negotiation-server
client = 1112-version-negotiation-client

[1112-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1112-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1112]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1113-version-negotiation]
ssl_conf = 1113-version-negotiation-ssl

[1113-version-negotiation-ssl]
server = 1113-version-negotiation-server
client = 1113-version-negotiation-client

[1113-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1113-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1113]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1114-version-negotiation]
ssl_conf = 1114-version-negotiation-ssl

[1114-version-negotiation-ssl]
server = 1114-version-negotiation-server
client = 1114-version-negotiation-client

[1114-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1114-version-negotiation-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1114]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1115-version-negotiation]
ssl_conf = 1115-version-negotiation-ssl

[1115-version-negotiation-ssl]
server = 1115-version-negotiation-server
client = 1115-version-negotiation-client

[1115-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1115-version-negotiation-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1115]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1116-version-negotiation]
ssl_conf = 1116-version-negotiation-ssl

[1116-version-negotiation-ssl]
server = 1116-version-negotiation-server
client = 1116-version-negotiation-client

[1116-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1116-version-negotiation-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1116]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1117-version-negotiation]
ssl_conf = 1117-version-negotiation-ssl

[1117-version-negotiation-ssl]
server = 1117-version-negotiation-server
client = 1117-version-negotiation-client

[1117-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1117-version-negotiation-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1117]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1118-version-negotiation]
ssl_conf = 1118-version-negotiation-ssl

[1118-version-negotiation-ssl]
server = 1118-version-negotiation-server
client = 1118-version-negotiation-client

[1118-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1118-version-negotiation-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1118]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1119-version-negotiation]
ssl_conf = 1119-version-negotiation-ssl

[1119-version-negotiation-ssl]
server = 1119-version-negotiation-server
client = 1119-version-negotiation-client

[1119-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1119-version-negotiation-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1119]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1120-version-negotiation]
ssl_conf = 1120-version-negotiation-ssl

[1120-version-negotiation-ssl]
server = 1120-version-negotiation-server
client = 1120-version-negotiation-client

[1120-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = SSLv3
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1120-version-negotiation-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1120]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1121-version-negotiation]
ssl_conf = 1121-version-negotiation-ssl

[1121-version-negotiation-ssl]
server = 1121-version-negotiation-server
client = 1121-version-negotiation-client

[1121-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1121-version-negotiation-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1121]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1122-version-negotiation]
ssl_conf = 1122-version-negotiation-ssl

[1122-version-negotiation-ssl]
server = 1122-version-negotiation-server
client = 1122-version-negotiation-client

[1122-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1122-version-negotiation-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1122]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1123-version-negotiation]
ssl_conf = 1123-version-negotiation-ssl

[1123-version-negotiation-ssl]
server = 1123-version-negotiation-server
client = 1123-version-negotiation-client

[1123-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1123-version-negotiation-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1123]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1124-version-negotiation]
ssl_conf = 1124-version-negotiation-ssl

[1124-version-negotiation-ssl]
server = 1124-version-negotiation-server
client = 1124-version-negotiation-client

[1124-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1124-version-negotiation-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1124]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1125-version-negotiation]
ssl_conf = 1125-version-negotiation-ssl

[1125-version-negotiation-ssl]
server = 1125-version-negotiation-server
client = 1125-version-negotiation-client

[1125-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1125-version-negotiation-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1125]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1126-version-negotiation]
ssl_conf = 1126-version-negotiation-ssl

[1126-version-negotiation-ssl]
server = 1126-version-negotiation-server
client = 1126-version-negotiation-client

[1126-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1126-version-negotiation-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1126]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1127-version-negotiation]
ssl_conf = 1127-version-negotiation-ssl

[1127-version-negotiation-ssl]
server = 1127-version-negotiation-server
client = 1127-version-negotiation-client

[1127-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1127-version-negotiation-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1127]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1128-version-negotiation]
ssl_conf = 1128-version-negotiation-ssl

[1128-version-negotiation-ssl]
server = 1128-version-negotiation-server
client = 1128-version-negotiation-client

[1128-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1128-version-negotiation-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1128]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1129-version-negotiation]
ssl_conf = 1129-version-negotiation-ssl

[1129-version-negotiation-ssl]
server = 1129-version-negotiation-server
client = 1129-version-negotiation-client

[1129-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1129-version-negotiation-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1129]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1130-version-negotiation]
ssl_conf = 1130-version-negotiation-ssl

[1130-version-negotiation-ssl]
server = 1130-version-negotiation-server
client = 1130-version-negotiation-client

[1130-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1130-version-negotiation-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1130]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1131-version-negotiation]
ssl_conf = 1131-version-negotiation-ssl

[1131-version-negotiation-ssl]
server = 1131-version-negotiation-server
client = 1131-version-negotiation-client

[1131-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1131-version-negotiation-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1131]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1132-version-negotiation]
ssl_conf = 1132-version-negotiation-ssl

[1132-version-negotiation-ssl]
server = 1132-version-negotiation-server
client = 1132-version-negotiation-client

[1132-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1132-version-negotiation-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1132]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1133-version-negotiation]
ssl_conf = 1133-version-negotiation-ssl

[1133-version-negotiation-ssl]
server = 1133-version-negotiation-server
client = 1133-version-negotiation-client

[1133-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1133-version-negotiation-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1133]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1134-version-negotiation]
ssl_conf = 1134-version-negotiation-ssl

[1134-version-negotiation-ssl]
server = 1134-version-negotiation-server
client = 1134-version-negotiation-client

[1134-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1134-version-negotiation-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1134]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1135-version-negotiation]
ssl_conf = 1135-version-negotiation-ssl

[1135-version-negotiation-ssl]
server = 1135-version-negotiation-server
client = 1135-version-negotiation-client

[1135-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1135-version-negotiation-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1135]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1136-version-negotiation]
ssl_conf = 1136-version-negotiation-ssl

[1136-version-negotiation-ssl]
server = 1136-version-negotiation-server
client = 1136-version-negotiation-client

[1136-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1136-version-negotiation-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1136]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1137-version-negotiation]
ssl_conf = 1137-version-negotiation-ssl

[1137-version-negotiation-ssl]
server = 1137-version-negotiation-server
client = 1137-version-negotiation-client

[1137-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1137-version-negotiation-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1137]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1138-version-negotiation]
ssl_conf = 1138-version-negotiation-ssl

[1138-version-negotiation-ssl]
server = 1138-version-negotiation-server
client = 1138-version-negotiation-client

[1138-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1138-version-negotiation-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1138]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1139-version-negotiation]
ssl_conf = 1139-version-negotiation-ssl

[1139-version-negotiation-ssl]
server = 1139-version-negotiation-server
client = 1139-version-negotiation-client

[1139-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1139-version-negotiation-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1139]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1140-version-negotiation]
ssl_conf = 1140-version-negotiation-ssl

[1140-version-negotiation-ssl]
server = 1140-version-negotiation-server
client = 1140-version-negotiation-client

[1140-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1140-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = SSLv3
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1140]
ExpectedResult = ClientFail
Serialize = Client


# ===========================================================

[1141-version-negotiation]
ssl_conf = 1141-version-negotiation-ssl

[1141-version-negotiation-ssl]
server = 1141-version-negotiation-server
client = 1141-version-negotiation-client

[1141-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1141-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = SSLv3
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1141]
ExpectedResult = ClientFail
Serialize = Client


# ===========================================================

[1142-version-negotiation]
ssl_conf = 1142-version-negotiation-ssl

[1142-version-negotiation-ssl]
server = 1142-version-negotiation-server
client = 1142-version-negotiation-client

[1142-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1142-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = SSLv3
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1142]
ExpectedResult = ClientFail
Serialize = Client


# ===========================================================

[1143-version-negotiation]
ssl_conf = 1143-version-negotiation-ssl

[1143-version-negotiation-ssl]
server = 1143-version-negotiation-server
client = 1143-version-negotiation-client

[1143-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1143-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = SSLv3
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1143]
ExpectedResult = ClientFail
Serialize = Client


# ===========================================================

[1144-version-negotiation]
ssl_conf = 1144-version-negotiation-ssl

[1144-version-negotiation-ssl]
server = 1144-version-negotiation-server
client = 1144-version-negotiation-client

[1144-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1144-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = SSLv3
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1144]
ExpectedResult = ClientFail
Serialize = Client


# ===========================================================

[1145-version-negotiation]
ssl_conf = 1145-version-negotiation-ssl

[1145-version-negotiation-ssl]
server = 1145-version-negotiation-server
client = 1145-version-negotiation-client

[1145-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1145-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = SSLv3
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1145]
ExpectedResult = ClientFail
Serialize = Client


# ===========================================================

[1146-version-negotiation]
ssl_conf = 1146-version-negotiation-ssl

[1146-version-negotiation-ssl]
server = 1146-version-negotiation-server
client = 1146-version-negotiation-client

[1146-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = SSLv3
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1146-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = SSLv3
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1146]
ExpectedResult = ClientFail
Serialize = Client


# ===========================================================

[1147-version-negotiation]
ssl_conf = 1147-version-negotiation-ssl

[1147-version-negotiation-ssl]
server = 1147-version-negotiation-server
client = 1147-version-negotiation-client

[1147-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1147-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = SSLv3
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1147]
ExpectedResult = ClientFail
Serialize = Client


# ===========================================================

[1148-version-negotiation]
ssl_conf = 1148-version-negotiation-ssl

[1148-version-negotiation-ssl]
server = 1148-version-negotiation-server
client = 1148-version-negotiation-client

[1148-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1148-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = SSLv3
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1148]
ExpectedResult = ClientFail
Serialize = Client


# ===========================================================

[1149-version-negotiation]
ssl_conf = 1149-version-negotiation-ssl

[1149-version-negotiation-ssl]
server = 1149-version-negotiation-server
client = 1149-version-negotiation-client

[1149-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1149-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = SSLv3
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1149]
ExpectedResult = ClientFail
Serialize = Client


# ===========================================================

[1150-version-negotiation]
ssl_conf = 1150-version-negotiation-ssl

[1150-version-negotiation-ssl]
server = 1150-version-negotiation-server
client = 1150-version-negotiation-client

[1150-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1150-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = SSLv3
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1150]
ExpectedResult = ClientFail
Serialize = Client


# ===========================================================

[1151-version-negotiation]
ssl_conf = 1151-version-negotiation-ssl

[1151-version-negotiation-ssl]
server = 1151-version-negotiation-server
client = 1151-version-negotiation-client

[1151-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1151-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = SSLv3
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1151]
ExpectedResult = ClientFail
Serialize = Client


# ===========================================================

[1152-version-negotiation]
ssl_conf = 1152-version-negotiation-ssl

[1152-version-negotiation-ssl]
server = 1152-version-negotiation-server
client = 1152-version-negotiation-client

[1152-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1152-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = SSLv3
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1152]
ExpectedResult = ClientFail
Serialize = Client


# ===========================================================

[1153-version-negotiation]
ssl_conf = 1153-version-negotiation-ssl

[1153-version-negotiation-ssl]
server = 1153-version-negotiation-server
client = 1153-version-negotiation-client

[1153-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1153-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = SSLv3
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1153]
ExpectedResult = ClientFail
Serialize = Client


# ===========================================================

[1154-version-negotiation]
ssl_conf = 1154-version-negotiation-ssl

[1154-version-negotiation-ssl]
server = 1154-version-negotiation-server
client = 1154-version-negotiation-client

[1154-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1154-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = SSLv3
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1154]
ExpectedResult = ClientFail
Serialize = Client


# ===========================================================

[1155-version-negotiation]
ssl_conf = 1155-version-negotiation-ssl

[1155-version-negotiation-ssl]
server = 1155-version-negotiation-server
client = 1155-version-negotiation-client

[1155-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1155-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = SSLv3
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1155]
ExpectedResult = ClientFail
Serialize = Client


# ===========================================================

[1156-version-negotiation]
ssl_conf = 1156-version-negotiation-ssl

[1156-version-negotiation-ssl]
server = 1156-version-negotiation-server
client = 1156-version-negotiation-client

[1156-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1156-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = SSLv3
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1156]
ExpectedResult = ClientFail
Serialize = Client


# ===========================================================

[1157-version-negotiation]
ssl_conf = 1157-version-negotiation-ssl

[1157-version-negotiation-ssl]
server = 1157-version-negotiation-server
client = 1157-version-negotiation-client

[1157-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1157-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = SSLv3
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1157]
ExpectedResult = ClientFail
Serialize = Client


# ===========================================================

[1158-version-negotiation]
ssl_conf = 1158-version-negotiation-ssl

[1158-version-negotiation-ssl]
server = 1158-version-negotiation-server
client = 1158-version-negotiation-client

[1158-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1158-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = SSLv3
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1158]
ExpectedResult = ClientFail
Serialize = Client


# ===========================================================

[1159-version-negotiation]
ssl_conf = 1159-version-negotiation-ssl

[1159-version-negotiation-ssl]
server = 1159-version-negotiation-server
client = 1159-version-negotiation-client

[1159-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1159-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = SSLv3
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1159]
ExpectedResult = ClientFail
Serialize = Client


# ===========================================================

[1160-version-negotiation]
ssl_conf = 1160-version-negotiation-ssl

[1160-version-negotiation-ssl]
server = 1160-version-negotiation-server
client = 1160-version-negotiation-client

[1160-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1160-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = SSLv3
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1160]
ExpectedResult = ClientFail
Serialize = Client


# ===========================================================

[1161-version-negotiation]
ssl_conf = 1161-version-negotiation-ssl

[1161-version-negotiation-ssl]
server = 1161-version-negotiation-server
client = 1161-version-negotiation-client

[1161-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1161-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = SSLv3
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1161]
ExpectedResult = ClientFail
Serialize = Client


# ===========================================================

[1162-version-negotiation]
ssl_conf = 1162-version-negotiation-ssl

[1162-version-negotiation-ssl]
server = 1162-version-negotiation-server
client = 1162-version-negotiation-client

[1162-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1162-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = SSLv3
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1162]
ExpectedResult = ClientFail
Serialize = Client


# ===========================================================

[1163-version-negotiation]
ssl_conf = 1163-version-negotiation-ssl

[1163-version-negotiation-ssl]
server = 1163-version-negotiation-server
client = 1163-version-negotiation-client

[1163-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1163-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = SSLv3
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1163]
ExpectedResult = ClientFail
Serialize = Client


# ===========================================================

[1164-version-negotiation]
ssl_conf = 1164-version-negotiation-ssl

[1164-version-negotiation-ssl]
server = 1164-version-negotiation-server
client = 1164-version-negotiation-client

[1164-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1164-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = SSLv3
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1164]
ExpectedResult = ClientFail
Serialize = Client


# ===========================================================

[1165-version-negotiation]
ssl_conf = 1165-version-negotiation-ssl

[1165-version-negotiation-ssl]
server = 1165-version-negotiation-server
client = 1165-version-negotiation-client

[1165-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1165-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = SSLv3
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1165]
ExpectedResult = ClientFail
Serialize = Client


# ===========================================================

[1166-version-negotiation]
ssl_conf = 1166-version-negotiation-ssl

[1166-version-negotiation-ssl]
server = 1166-version-negotiation-server
client = 1166-version-negotiation-client

[1166-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1166-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1166]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1167-version-negotiation]
ssl_conf = 1167-version-negotiation-ssl

[1167-version-negotiation-ssl]
server = 1167-version-negotiation-server
client = 1167-version-negotiation-client

[1167-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1167-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1167]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1168-version-negotiation]
ssl_conf = 1168-version-negotiation-ssl

[1168-version-negotiation-ssl]
server = 1168-version-negotiation-server
client = 1168-version-negotiation-client

[1168-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1168-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1168]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1169-version-negotiation]
ssl_conf = 1169-version-negotiation-ssl

[1169-version-negotiation-ssl]
server = 1169-version-negotiation-server
client = 1169-version-negotiation-client

[1169-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1169-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1169]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1170-version-negotiation]
ssl_conf = 1170-version-negotiation-ssl

[1170-version-negotiation-ssl]
server = 1170-version-negotiation-server
client = 1170-version-negotiation-client

[1170-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1170-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1170]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1171-version-negotiation]
ssl_conf = 1171-version-negotiation-ssl

[1171-version-negotiation-ssl]
server = 1171-version-negotiation-server
client = 1171-version-negotiation-client

[1171-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1171-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1171]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1172-version-negotiation]
ssl_conf = 1172-version-negotiation-ssl

[1172-version-negotiation-ssl]
server = 1172-version-negotiation-server
client = 1172-version-negotiation-client

[1172-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = SSLv3
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1172-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1172]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1173-version-negotiation]
ssl_conf = 1173-version-negotiation-ssl

[1173-version-negotiation-ssl]
server = 1173-version-negotiation-server
client = 1173-version-negotiation-client

[1173-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1173-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1173]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1174-version-negotiation]
ssl_conf = 1174-version-negotiation-ssl

[1174-version-negotiation-ssl]
server = 1174-version-negotiation-server
client = 1174-version-negotiation-client

[1174-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1174-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1174]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1175-version-negotiation]
ssl_conf = 1175-version-negotiation-ssl

[1175-version-negotiation-ssl]
server = 1175-version-negotiation-server
client = 1175-version-negotiation-client

[1175-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1175-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1175]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1176-version-negotiation]
ssl_conf = 1176-version-negotiation-ssl

[1176-version-negotiation-ssl]
server = 1176-version-negotiation-server
client = 1176-version-negotiation-client

[1176-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1176-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1176]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1177-version-negotiation]
ssl_conf = 1177-version-negotiation-ssl

[1177-version-negotiation-ssl]
server = 1177-version-negotiation-server
client = 1177-version-negotiation-client

[1177-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1177-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1177]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1178-version-negotiation]
ssl_conf = 1178-version-negotiation-ssl

[1178-version-negotiation-ssl]
server = 1178-version-negotiation-server
client = 1178-version-negotiation-client

[1178-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1178-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1178]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1179-version-negotiation]
ssl_conf = 1179-version-negotiation-ssl

[1179-version-negotiation-ssl]
server = 1179-version-negotiation-server
client = 1179-version-negotiation-client

[1179-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1179-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1179]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1180-version-negotiation]
ssl_conf = 1180-version-negotiation-ssl

[1180-version-negotiation-ssl]
server = 1180-version-negotiation-server
client = 1180-version-negotiation-client

[1180-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1180-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1180]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1181-version-negotiation]
ssl_conf = 1181-version-negotiation-ssl

[1181-version-negotiation-ssl]
server = 1181-version-negotiation-server
client = 1181-version-negotiation-client

[1181-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1181-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1181]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1182-version-negotiation]
ssl_conf = 1182-version-negotiation-ssl

[1182-version-negotiation-ssl]
server = 1182-version-negotiation-server
client = 1182-version-negotiation-client

[1182-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1182-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1182]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1183-version-negotiation]
ssl_conf = 1183-version-negotiation-ssl

[1183-version-negotiation-ssl]
server = 1183-version-negotiation-server
client = 1183-version-negotiation-client

[1183-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1183-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1183]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1184-version-negotiation]
ssl_conf = 1184-version-negotiation-ssl

[1184-version-negotiation-ssl]
server = 1184-version-negotiation-server
client = 1184-version-negotiation-client

[1184-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1184-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1184]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1185-version-negotiation]
ssl_conf = 1185-version-negotiation-ssl

[1185-version-negotiation-ssl]
server = 1185-version-negotiation-server
client = 1185-version-negotiation-client

[1185-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1185-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1185]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1186-version-negotiation]
ssl_conf = 1186-version-negotiation-ssl

[1186-version-negotiation-ssl]
server = 1186-version-negotiation-server
client = 1186-version-negotiation-client

[1186-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1186-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1186]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1187-version-negotiation]
ssl_conf = 1187-version-negotiation-ssl

[1187-version-negotiation-ssl]
server = 1187-version-negotiation-server
client = 1187-version-negotiation-client

[1187-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1187-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1187]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1188-version-negotiation]
ssl_conf = 1188-version-negotiation-ssl

[1188-version-negotiation-ssl]
server = 1188-version-negotiation-server
client = 1188-version-negotiation-client

[1188-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1188-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1188]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1189-version-negotiation]
ssl_conf = 1189-version-negotiation-ssl

[1189-version-negotiation-ssl]
server = 1189-version-negotiation-server
client = 1189-version-negotiation-client

[1189-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1189-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1189]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1190-version-negotiation]
ssl_conf = 1190-version-negotiation-ssl

[1190-version-negotiation-ssl]
server = 1190-version-negotiation-server
client = 1190-version-negotiation-client

[1190-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1190-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1190]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1191-version-negotiation]
ssl_conf = 1191-version-negotiation-ssl

[1191-version-negotiation-ssl]
server = 1191-version-negotiation-server
client = 1191-version-negotiation-client

[1191-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1191-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1191]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1192-version-negotiation]
ssl_conf = 1192-version-negotiation-ssl

[1192-version-negotiation-ssl]
server = 1192-version-negotiation-server
client = 1192-version-negotiation-client

[1192-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1192-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1192]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1193-version-negotiation]
ssl_conf = 1193-version-negotiation-ssl

[1193-version-negotiation-ssl]
server = 1193-version-negotiation-server
client = 1193-version-negotiation-client

[1193-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1193-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1193]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1194-version-negotiation]
ssl_conf = 1194-version-negotiation-ssl

[1194-version-negotiation-ssl]
server = 1194-version-negotiation-server
client = 1194-version-negotiation-client

[1194-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1194-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1194]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1195-version-negotiation]
ssl_conf = 1195-version-negotiation-ssl

[1195-version-negotiation-ssl]
server = 1195-version-negotiation-server
client = 1195-version-negotiation-client

[1195-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1195-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1195]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1196-version-negotiation]
ssl_conf = 1196-version-negotiation-ssl

[1196-version-negotiation-ssl]
server = 1196-version-negotiation-server
client = 1196-version-negotiation-client

[1196-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1196-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1196]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1197-version-negotiation]
ssl_conf = 1197-version-negotiation-ssl

[1197-version-negotiation-ssl]
server = 1197-version-negotiation-server
client = 1197-version-negotiation-client

[1197-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1197-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1197]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1198-version-negotiation]
ssl_conf = 1198-version-negotiation-ssl

[1198-version-negotiation-ssl]
server = 1198-version-negotiation-server
client = 1198-version-negotiation-client

[1198-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = SSLv3
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1198-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1198]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1199-version-negotiation]
ssl_conf = 1199-version-negotiation-ssl

[1199-version-negotiation-ssl]
server = 1199-version-negotiation-server
client = 1199-version-negotiation-client

[1199-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1199-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1199]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1200-version-negotiation]
ssl_conf = 1200-version-negotiation-ssl

[1200-version-negotiation-ssl]
server = 1200-version-negotiation-server
client = 1200-version-negotiation-client

[1200-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1200-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1200]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1201-version-negotiation]
ssl_conf = 1201-version-negotiation-ssl

[1201-version-negotiation-ssl]
server = 1201-version-negotiation-server
client = 1201-version-negotiation-client

[1201-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1201-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1201]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1202-version-negotiation]
ssl_conf = 1202-version-negotiation-ssl

[1202-version-negotiation-ssl]
server = 1202-version-negotiation-server
client = 1202-version-negotiation-client

[1202-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1202-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1202]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1203-version-negotiation]
ssl_conf = 1203-version-negotiation-ssl

[1203-version-negotiation-ssl]
server = 1203-version-negotiation-server
client = 1203-version-negotiation-client

[1203-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1203-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1203]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1204-version-negotiation]
ssl_conf = 1204-version-negotiation-ssl

[1204-version-negotiation-ssl]
server = 1204-version-negotiation-server
client = 1204-version-negotiation-client

[1204-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1204-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1204]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1205-version-negotiation]
ssl_conf = 1205-version-negotiation-ssl

[1205-version-negotiation-ssl]
server = 1205-version-negotiation-server
client = 1205-version-negotiation-client

[1205-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1205-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1205]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1206-version-negotiation]
ssl_conf = 1206-version-negotiation-ssl

[1206-version-negotiation-ssl]
server = 1206-version-negotiation-server
client = 1206-version-negotiation-client

[1206-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1206-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1206]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1207-version-negotiation]
ssl_conf = 1207-version-negotiation-ssl

[1207-version-negotiation-ssl]
server = 1207-version-negotiation-server
client = 1207-version-negotiation-client

[1207-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1207-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1207]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1208-version-negotiation]
ssl_conf = 1208-version-negotiation-ssl

[1208-version-negotiation-ssl]
server = 1208-version-negotiation-server
client = 1208-version-negotiation-client

[1208-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1208-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1208]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1209-version-negotiation]
ssl_conf = 1209-version-negotiation-ssl

[1209-version-negotiation-ssl]
server = 1209-version-negotiation-server
client = 1209-version-negotiation-client

[1209-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1209-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1209]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1210-version-negotiation]
ssl_conf = 1210-version-negotiation-ssl

[1210-version-negotiation-ssl]
server = 1210-version-negotiation-server
client = 1210-version-negotiation-client

[1210-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1210-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1210]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1211-version-negotiation]
ssl_conf = 1211-version-negotiation-ssl

[1211-version-negotiation-ssl]
server = 1211-version-negotiation-server
client = 1211-version-negotiation-client

[1211-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1211-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1211]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1212-version-negotiation]
ssl_conf = 1212-version-negotiation-ssl

[1212-version-negotiation-ssl]
server = 1212-version-negotiation-server
client = 1212-version-negotiation-client

[1212-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1212-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1212]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1213-version-negotiation]
ssl_conf = 1213-version-negotiation-ssl

[1213-version-negotiation-ssl]
server = 1213-version-negotiation-server
client = 1213-version-negotiation-client

[1213-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1213-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1213]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1214-version-negotiation]
ssl_conf = 1214-version-negotiation-ssl

[1214-version-negotiation-ssl]
server = 1214-version-negotiation-server
client = 1214-version-negotiation-client

[1214-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1214-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1214]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1215-version-negotiation]
ssl_conf = 1215-version-negotiation-ssl

[1215-version-negotiation-ssl]
server = 1215-version-negotiation-server
client = 1215-version-negotiation-client

[1215-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1215-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1215]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1216-version-negotiation]
ssl_conf = 1216-version-negotiation-ssl

[1216-version-negotiation-ssl]
server = 1216-version-negotiation-server
client = 1216-version-negotiation-client

[1216-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1216-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1216]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1217-version-negotiation]
ssl_conf = 1217-version-negotiation-ssl

[1217-version-negotiation-ssl]
server = 1217-version-negotiation-server
client = 1217-version-negotiation-client

[1217-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1217-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1217]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1218-version-negotiation]
ssl_conf = 1218-version-negotiation-ssl

[1218-version-negotiation-ssl]
server = 1218-version-negotiation-server
client = 1218-version-negotiation-client

[1218-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1218-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1218]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1219-version-negotiation]
ssl_conf = 1219-version-negotiation-ssl

[1219-version-negotiation-ssl]
server = 1219-version-negotiation-server
client = 1219-version-negotiation-client

[1219-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1219-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1219]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1220-version-negotiation]
ssl_conf = 1220-version-negotiation-ssl

[1220-version-negotiation-ssl]
server = 1220-version-negotiation-server
client = 1220-version-negotiation-client

[1220-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1220-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1220]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1221-version-negotiation]
ssl_conf = 1221-version-negotiation-ssl

[1221-version-negotiation-ssl]
server = 1221-version-negotiation-server
client = 1221-version-negotiation-client

[1221-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1221-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1221]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1222-version-negotiation]
ssl_conf = 1222-version-negotiation-ssl

[1222-version-negotiation-ssl]
server = 1222-version-negotiation-server
client = 1222-version-negotiation-client

[1222-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1222-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1222]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1223-version-negotiation]
ssl_conf = 1223-version-negotiation-ssl

[1223-version-negotiation-ssl]
server = 1223-version-negotiation-server
client = 1223-version-negotiation-client

[1223-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1223-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1223]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1224-version-negotiation]
ssl_conf = 1224-version-negotiation-ssl

[1224-version-negotiation-ssl]
server = 1224-version-negotiation-server
client = 1224-version-negotiation-client

[1224-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = SSLv3
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1224-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1224]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1225-version-negotiation]
ssl_conf = 1225-version-negotiation-ssl

[1225-version-negotiation-ssl]
server = 1225-version-negotiation-server
client = 1225-version-negotiation-client

[1225-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1225-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1225]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1226-version-negotiation]
ssl_conf = 1226-version-negotiation-ssl

[1226-version-negotiation-ssl]
server = 1226-version-negotiation-server
client = 1226-version-negotiation-client

[1226-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1226-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1226]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1227-version-negotiation]
ssl_conf = 1227-version-negotiation-ssl

[1227-version-negotiation-ssl]
server = 1227-version-negotiation-server
client = 1227-version-negotiation-client

[1227-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1227-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1227]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1228-version-negotiation]
ssl_conf = 1228-version-negotiation-ssl

[1228-version-negotiation-ssl]
server = 1228-version-negotiation-server
client = 1228-version-negotiation-client

[1228-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1228-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1228]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1229-version-negotiation]
ssl_conf = 1229-version-negotiation-ssl

[1229-version-negotiation-ssl]
server = 1229-version-negotiation-server
client = 1229-version-negotiation-client

[1229-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1229-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1229]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1230-version-negotiation]
ssl_conf = 1230-version-negotiation-ssl

[1230-version-negotiation-ssl]
server = 1230-version-negotiation-server
client = 1230-version-negotiation-client

[1230-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1230-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1230]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1231-version-negotiation]
ssl_conf = 1231-version-negotiation-ssl

[1231-version-negotiation-ssl]
server = 1231-version-negotiation-server
client = 1231-version-negotiation-client

[1231-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1231-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1231]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1232-version-negotiation]
ssl_conf = 1232-version-negotiation-ssl

[1232-version-negotiation-ssl]
server = 1232-version-negotiation-server
client = 1232-version-negotiation-client

[1232-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1232-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1232]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1233-version-negotiation]
ssl_conf = 1233-version-negotiation-ssl

[1233-version-negotiation-ssl]
server = 1233-version-negotiation-server
client = 1233-version-negotiation-client

[1233-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1233-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1233]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1234-version-negotiation]
ssl_conf = 1234-version-negotiation-ssl

[1234-version-negotiation-ssl]
server = 1234-version-negotiation-server
client = 1234-version-negotiation-client

[1234-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1234-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1234]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1235-version-negotiation]
ssl_conf = 1235-version-negotiation-ssl

[1235-version-negotiation-ssl]
server = 1235-version-negotiation-server
client = 1235-version-negotiation-client

[1235-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1235-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1235]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1236-version-negotiation]
ssl_conf = 1236-version-negotiation-ssl

[1236-version-negotiation-ssl]
server = 1236-version-negotiation-server
client = 1236-version-negotiation-client

[1236-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1236-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1236]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1237-version-negotiation]
ssl_conf = 1237-version-negotiation-ssl

[1237-version-negotiation-ssl]
server = 1237-version-negotiation-server
client = 1237-version-negotiation-client

[1237-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1237-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1237]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1238-version-negotiation]
ssl_conf = 1238-version-negotiation-ssl

[1238-version-negotiation-ssl]
server = 1238-version-negotiation-server
client = 1238-version-negotiation-client

[1238-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1238-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1238]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1239-version-negotiation]
ssl_conf = 1239-version-negotiation-ssl

[1239-version-negotiation-ssl]
server = 1239-version-negotiation-server
client = 1239-version-negotiation-client

[1239-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1239-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1239]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1240-version-negotiation]
ssl_conf = 1240-version-negotiation-ssl

[1240-version-negotiation-ssl]
server = 1240-version-negotiation-server
client = 1240-version-negotiation-client

[1240-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1240-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1240]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1241-version-negotiation]
ssl_conf = 1241-version-negotiation-ssl

[1241-version-negotiation-ssl]
server = 1241-version-negotiation-server
client = 1241-version-negotiation-client

[1241-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1241-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1241]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1242-version-negotiation]
ssl_conf = 1242-version-negotiation-ssl

[1242-version-negotiation-ssl]
server = 1242-version-negotiation-server
client = 1242-version-negotiation-client

[1242-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1242-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1242]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1243-version-negotiation]
ssl_conf = 1243-version-negotiation-ssl

[1243-version-negotiation-ssl]
server = 1243-version-negotiation-server
client = 1243-version-negotiation-client

[1243-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1243-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1243]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1244-version-negotiation]
ssl_conf = 1244-version-negotiation-ssl

[1244-version-negotiation-ssl]
server = 1244-version-negotiation-server
client = 1244-version-negotiation-client

[1244-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1244-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1244]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1245-version-negotiation]
ssl_conf = 1245-version-negotiation-ssl

[1245-version-negotiation-ssl]
server = 1245-version-negotiation-server
client = 1245-version-negotiation-client

[1245-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1245-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1245]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1246-version-negotiation]
ssl_conf = 1246-version-negotiation-ssl

[1246-version-negotiation-ssl]
server = 1246-version-negotiation-server
client = 1246-version-negotiation-client

[1246-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1246-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1246]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1247-version-negotiation]
ssl_conf = 1247-version-negotiation-ssl

[1247-version-negotiation-ssl]
server = 1247-version-negotiation-server
client = 1247-version-negotiation-client

[1247-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1247-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1247]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1248-version-negotiation]
ssl_conf = 1248-version-negotiation-ssl

[1248-version-negotiation-ssl]
server = 1248-version-negotiation-server
client = 1248-version-negotiation-client

[1248-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1248-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1248]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1249-version-negotiation]
ssl_conf = 1249-version-negotiation-ssl

[1249-version-negotiation-ssl]
server = 1249-version-negotiation-server
client = 1249-version-negotiation-client

[1249-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1249-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1249]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1250-version-negotiation]
ssl_conf = 1250-version-negotiation-ssl

[1250-version-negotiation-ssl]
server = 1250-version-negotiation-server
client = 1250-version-negotiation-client

[1250-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = SSLv3
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1250-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1250]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1251-version-negotiation]
ssl_conf = 1251-version-negotiation-ssl

[1251-version-negotiation-ssl]
server = 1251-version-negotiation-server
client = 1251-version-negotiation-client

[1251-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1251-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1251]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1252-version-negotiation]
ssl_conf = 1252-version-negotiation-ssl

[1252-version-negotiation-ssl]
server = 1252-version-negotiation-server
client = 1252-version-negotiation-client

[1252-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1252-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1252]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1253-version-negotiation]
ssl_conf = 1253-version-negotiation-ssl

[1253-version-negotiation-ssl]
server = 1253-version-negotiation-server
client = 1253-version-negotiation-client

[1253-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1253-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1253]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1254-version-negotiation]
ssl_conf = 1254-version-negotiation-ssl

[1254-version-negotiation-ssl]
server = 1254-version-negotiation-server
client = 1254-version-negotiation-client

[1254-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1254-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1254]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1255-version-negotiation]
ssl_conf = 1255-version-negotiation-ssl

[1255-version-negotiation-ssl]
server = 1255-version-negotiation-server
client = 1255-version-negotiation-client

[1255-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1255-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1255]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1256-version-negotiation]
ssl_conf = 1256-version-negotiation-ssl

[1256-version-negotiation-ssl]
server = 1256-version-negotiation-server
client = 1256-version-negotiation-client

[1256-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1256-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1256]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1257-version-negotiation]
ssl_conf = 1257-version-negotiation-ssl

[1257-version-negotiation-ssl]
server = 1257-version-negotiation-server
client = 1257-version-negotiation-client

[1257-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1257-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1257]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1258-version-negotiation]
ssl_conf = 1258-version-negotiation-ssl

[1258-version-negotiation-ssl]
server = 1258-version-negotiation-server
client = 1258-version-negotiation-client

[1258-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1258-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1258]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1259-version-negotiation]
ssl_conf = 1259-version-negotiation-ssl

[1259-version-negotiation-ssl]
server = 1259-version-negotiation-server
client = 1259-version-negotiation-client

[1259-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1259-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1259]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1260-version-negotiation]
ssl_conf = 1260-version-negotiation-ssl

[1260-version-negotiation-ssl]
server = 1260-version-negotiation-server
client = 1260-version-negotiation-client

[1260-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1260-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1260]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1261-version-negotiation]
ssl_conf = 1261-version-negotiation-ssl

[1261-version-negotiation-ssl]
server = 1261-version-negotiation-server
client = 1261-version-negotiation-client

[1261-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1261-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1261]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1262-version-negotiation]
ssl_conf = 1262-version-negotiation-ssl

[1262-version-negotiation-ssl]
server = 1262-version-negotiation-server
client = 1262-version-negotiation-client

[1262-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1262-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1262]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1263-version-negotiation]
ssl_conf = 1263-version-negotiation-ssl

[1263-version-negotiation-ssl]
server = 1263-version-negotiation-server
client = 1263-version-negotiation-client

[1263-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1263-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1263]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1264-version-negotiation]
ssl_conf = 1264-version-negotiation-ssl

[1264-version-negotiation-ssl]
server = 1264-version-negotiation-server
client = 1264-version-negotiation-client

[1264-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1264-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1264]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1265-version-negotiation]
ssl_conf = 1265-version-negotiation-ssl

[1265-version-negotiation-ssl]
server = 1265-version-negotiation-server
client = 1265-version-negotiation-client

[1265-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1265-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1265]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1266-version-negotiation]
ssl_conf = 1266-version-negotiation-ssl

[1266-version-negotiation-ssl]
server = 1266-version-negotiation-server
client = 1266-version-negotiation-client

[1266-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1266-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1266]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1267-version-negotiation]
ssl_conf = 1267-version-negotiation-ssl

[1267-version-negotiation-ssl]
server = 1267-version-negotiation-server
client = 1267-version-negotiation-client

[1267-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1267-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1267]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1268-version-negotiation]
ssl_conf = 1268-version-negotiation-ssl

[1268-version-negotiation-ssl]
server = 1268-version-negotiation-server
client = 1268-version-negotiation-client

[1268-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1268-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1268]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1269-version-negotiation]
ssl_conf = 1269-version-negotiation-ssl

[1269-version-negotiation-ssl]
server = 1269-version-negotiation-server
client = 1269-version-negotiation-client

[1269-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1269-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1269]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1270-version-negotiation]
ssl_conf = 1270-version-negotiation-ssl

[1270-version-negotiation-ssl]
server = 1270-version-negotiation-server
client = 1270-version-negotiation-client

[1270-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1270-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1270]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1271-version-negotiation]
ssl_conf = 1271-version-negotiation-ssl

[1271-version-negotiation-ssl]
server = 1271-version-negotiation-server
client = 1271-version-negotiation-client

[1271-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1271-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1271]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1272-version-negotiation]
ssl_conf = 1272-version-negotiation-ssl

[1272-version-negotiation-ssl]
server = 1272-version-negotiation-server
client = 1272-version-negotiation-client

[1272-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1272-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1272]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1273-version-negotiation]
ssl_conf = 1273-version-negotiation-ssl

[1273-version-negotiation-ssl]
server = 1273-version-negotiation-server
client = 1273-version-negotiation-client

[1273-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1273-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1273]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1274-version-negotiation]
ssl_conf = 1274-version-negotiation-ssl

[1274-version-negotiation-ssl]
server = 1274-version-negotiation-server
client = 1274-version-negotiation-client

[1274-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1274-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1274]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1275-version-negotiation]
ssl_conf = 1275-version-negotiation-ssl

[1275-version-negotiation-ssl]
server = 1275-version-negotiation-server
client = 1275-version-negotiation-client

[1275-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1275-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1275]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1276-version-negotiation]
ssl_conf = 1276-version-negotiation-ssl

[1276-version-negotiation-ssl]
server = 1276-version-negotiation-server
client = 1276-version-negotiation-client

[1276-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = SSLv3
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1276-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1276]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1277-version-negotiation]
ssl_conf = 1277-version-negotiation-ssl

[1277-version-negotiation-ssl]
server = 1277-version-negotiation-server
client = 1277-version-negotiation-client

[1277-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1277-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1277]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1278-version-negotiation]
ssl_conf = 1278-version-negotiation-ssl

[1278-version-negotiation-ssl]
server = 1278-version-negotiation-server
client = 1278-version-negotiation-client

[1278-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1278-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1278]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1279-version-negotiation]
ssl_conf = 1279-version-negotiation-ssl

[1279-version-negotiation-ssl]
server = 1279-version-negotiation-server
client = 1279-version-negotiation-client

[1279-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1279-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1279]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1280-version-negotiation]
ssl_conf = 1280-version-negotiation-ssl

[1280-version-negotiation-ssl]
server = 1280-version-negotiation-server
client = 1280-version-negotiation-client

[1280-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1280-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1280]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1281-version-negotiation]
ssl_conf = 1281-version-negotiation-ssl

[1281-version-negotiation-ssl]
server = 1281-version-negotiation-server
client = 1281-version-negotiation-client

[1281-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1281-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1281]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1282-version-negotiation]
ssl_conf = 1282-version-negotiation-ssl

[1282-version-negotiation-ssl]
server = 1282-version-negotiation-server
client = 1282-version-negotiation-client

[1282-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1282-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1282]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1283-version-negotiation]
ssl_conf = 1283-version-negotiation-ssl

[1283-version-negotiation-ssl]
server = 1283-version-negotiation-server
client = 1283-version-negotiation-client

[1283-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1283-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1283]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1284-version-negotiation]
ssl_conf = 1284-version-negotiation-ssl

[1284-version-negotiation-ssl]
server = 1284-version-negotiation-server
client = 1284-version-negotiation-client

[1284-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1284-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1284]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1285-version-negotiation]
ssl_conf = 1285-version-negotiation-ssl

[1285-version-negotiation-ssl]
server = 1285-version-negotiation-server
client = 1285-version-negotiation-client

[1285-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1285-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1285]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1286-version-negotiation]
ssl_conf = 1286-version-negotiation-ssl

[1286-version-negotiation-ssl]
server = 1286-version-negotiation-server
client = 1286-version-negotiation-client

[1286-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1286-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1286]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1287-version-negotiation]
ssl_conf = 1287-version-negotiation-ssl

[1287-version-negotiation-ssl]
server = 1287-version-negotiation-server
client = 1287-version-negotiation-client

[1287-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1287-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1287]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1288-version-negotiation]
ssl_conf = 1288-version-negotiation-ssl

[1288-version-negotiation-ssl]
server = 1288-version-negotiation-server
client = 1288-version-negotiation-client

[1288-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1288-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1288]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1289-version-negotiation]
ssl_conf = 1289-version-negotiation-ssl

[1289-version-negotiation-ssl]
server = 1289-version-negotiation-server
client = 1289-version-negotiation-client

[1289-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1289-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1289]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1290-version-negotiation]
ssl_conf = 1290-version-negotiation-ssl

[1290-version-negotiation-ssl]
server = 1290-version-negotiation-server
client = 1290-version-negotiation-client

[1290-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1290-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1290]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1291-version-negotiation]
ssl_conf = 1291-version-negotiation-ssl

[1291-version-negotiation-ssl]
server = 1291-version-negotiation-server
client = 1291-version-negotiation-client

[1291-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1291-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1291]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1292-version-negotiation]
ssl_conf = 1292-version-negotiation-ssl

[1292-version-negotiation-ssl]
server = 1292-version-negotiation-server
client = 1292-version-negotiation-client

[1292-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1292-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1292]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1293-version-negotiation]
ssl_conf = 1293-version-negotiation-ssl

[1293-version-negotiation-ssl]
server = 1293-version-negotiation-server
client = 1293-version-negotiation-client

[1293-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1293-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1293]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1294-version-negotiation]
ssl_conf = 1294-version-negotiation-ssl

[1294-version-negotiation-ssl]
server = 1294-version-negotiation-server
client = 1294-version-negotiation-client

[1294-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1294-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1294]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1295-version-negotiation]
ssl_conf = 1295-version-negotiation-ssl

[1295-version-negotiation-ssl]
server = 1295-version-negotiation-server
client = 1295-version-negotiation-client

[1295-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1295-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = SSLv3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1295]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1296-version-negotiation]
ssl_conf = 1296-version-negotiation-ssl

[1296-version-negotiation-ssl]
server = 1296-version-negotiation-server
client = 1296-version-negotiation-client

[1296-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1296-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1296]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1297-version-negotiation]
ssl_conf = 1297-version-negotiation-ssl

[1297-version-negotiation-ssl]
server = 1297-version-negotiation-server
client = 1297-version-negotiation-client

[1297-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1297-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1297]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1298-version-negotiation]
ssl_conf = 1298-version-negotiation-ssl

[1298-version-negotiation-ssl]
server = 1298-version-negotiation-server
client = 1298-version-negotiation-client

[1298-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1298-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1298]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1299-version-negotiation]
ssl_conf = 1299-version-negotiation-ssl

[1299-version-negotiation-ssl]
server = 1299-version-negotiation-server
client = 1299-version-negotiation-client

[1299-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1299-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1299]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1300-version-negotiation]
ssl_conf = 1300-version-negotiation-ssl

[1300-version-negotiation-ssl]
server = 1300-version-negotiation-server
client = 1300-version-negotiation-client

[1300-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1300-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1300]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1301-version-negotiation]
ssl_conf = 1301-version-negotiation-ssl

[1301-version-negotiation-ssl]
server = 1301-version-negotiation-server
client = 1301-version-negotiation-client

[1301-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1301-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1301]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1302-version-negotiation]
ssl_conf = 1302-version-negotiation-ssl

[1302-version-negotiation-ssl]
server = 1302-version-negotiation-server
client = 1302-version-negotiation-client

[1302-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = SSLv3
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1302-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1302]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1303-version-negotiation]
ssl_conf = 1303-version-negotiation-ssl

[1303-version-negotiation-ssl]
server = 1303-version-negotiation-server
client = 1303-version-negotiation-client

[1303-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1303-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1303]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1304-version-negotiation]
ssl_conf = 1304-version-negotiation-ssl

[1304-version-negotiation-ssl]
server = 1304-version-negotiation-server
client = 1304-version-negotiation-client

[1304-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1304-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1304]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1305-version-negotiation]
ssl_conf = 1305-version-negotiation-ssl

[1305-version-negotiation-ssl]
server = 1305-version-negotiation-server
client = 1305-version-negotiation-client

[1305-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1305-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1305]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1306-version-negotiation]
ssl_conf = 1306-version-negotiation-ssl

[1306-version-negotiation-ssl]
server = 1306-version-negotiation-server
client = 1306-version-negotiation-client

[1306-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1306-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1306]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1307-version-negotiation]
ssl_conf = 1307-version-negotiation-ssl

[1307-version-negotiation-ssl]
server = 1307-version-negotiation-server
client = 1307-version-negotiation-client

[1307-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1307-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1307]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1308-version-negotiation]
ssl_conf = 1308-version-negotiation-ssl

[1308-version-negotiation-ssl]
server = 1308-version-negotiation-server
client = 1308-version-negotiation-client

[1308-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1308-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1308]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1309-version-negotiation]
ssl_conf = 1309-version-negotiation-ssl

[1309-version-negotiation-ssl]
server = 1309-version-negotiation-server
client = 1309-version-negotiation-client

[1309-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1309-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1309]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1310-version-negotiation]
ssl_conf = 1310-version-negotiation-ssl

[1310-version-negotiation-ssl]
server = 1310-version-negotiation-server
client = 1310-version-negotiation-client

[1310-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1310-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1310]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1311-version-negotiation]
ssl_conf = 1311-version-negotiation-ssl

[1311-version-negotiation-ssl]
server = 1311-version-negotiation-server
client = 1311-version-negotiation-client

[1311-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1311-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1311]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1312-version-negotiation]
ssl_conf = 1312-version-negotiation-ssl

[1312-version-negotiation-ssl]
server = 1312-version-negotiation-server
client = 1312-version-negotiation-client

[1312-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1312-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1312]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1313-version-negotiation]
ssl_conf = 1313-version-negotiation-ssl

[1313-version-negotiation-ssl]
server = 1313-version-negotiation-server
client = 1313-version-negotiation-client

[1313-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1313-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1313]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1314-version-negotiation]
ssl_conf = 1314-version-negotiation-ssl

[1314-version-negotiation-ssl]
server = 1314-version-negotiation-server
client = 1314-version-negotiation-client

[1314-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1314-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1314]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1315-version-negotiation]
ssl_conf = 1315-version-negotiation-ssl

[1315-version-negotiation-ssl]
server = 1315-version-negotiation-server
client = 1315-version-negotiation-client

[1315-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1315-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1315]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1316-version-negotiation]
ssl_conf = 1316-version-negotiation-ssl

[1316-version-negotiation-ssl]
server = 1316-version-negotiation-server
client = 1316-version-negotiation-client

[1316-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1316-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1316]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1317-version-negotiation]
ssl_conf = 1317-version-negotiation-ssl

[1317-version-negotiation-ssl]
server = 1317-version-negotiation-server
client = 1317-version-negotiation-client

[1317-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1317-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1317]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1318-version-negotiation]
ssl_conf = 1318-version-negotiation-ssl

[1318-version-negotiation-ssl]
server = 1318-version-negotiation-server
client = 1318-version-negotiation-client

[1318-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1318-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1318]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1319-version-negotiation]
ssl_conf = 1319-version-negotiation-ssl

[1319-version-negotiation-ssl]
server = 1319-version-negotiation-server
client = 1319-version-negotiation-client

[1319-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1319-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1319]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1320-version-negotiation]
ssl_conf = 1320-version-negotiation-ssl

[1320-version-negotiation-ssl]
server = 1320-version-negotiation-server
client = 1320-version-negotiation-client

[1320-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1320-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1320]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1321-version-negotiation]
ssl_conf = 1321-version-negotiation-ssl

[1321-version-negotiation-ssl]
server = 1321-version-negotiation-server
client = 1321-version-negotiation-client

[1321-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1321-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1321]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1322-version-negotiation]
ssl_conf = 1322-version-negotiation-ssl

[1322-version-negotiation-ssl]
server = 1322-version-negotiation-server
client = 1322-version-negotiation-client

[1322-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1322-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1322]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1323-version-negotiation]
ssl_conf = 1323-version-negotiation-ssl

[1323-version-negotiation-ssl]
server = 1323-version-negotiation-server
client = 1323-version-negotiation-client

[1323-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1323-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1323]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1324-version-negotiation]
ssl_conf = 1324-version-negotiation-ssl

[1324-version-negotiation-ssl]
server = 1324-version-negotiation-server
client = 1324-version-negotiation-client

[1324-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1324-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1324]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1325-version-negotiation]
ssl_conf = 1325-version-negotiation-ssl

[1325-version-negotiation-ssl]
server = 1325-version-negotiation-server
client = 1325-version-negotiation-client

[1325-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1325-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1325]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1326-version-negotiation]
ssl_conf = 1326-version-negotiation-ssl

[1326-version-negotiation-ssl]
server = 1326-version-negotiation-server
client = 1326-version-negotiation-client

[1326-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1326-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1326]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1327-version-negotiation]
ssl_conf = 1327-version-negotiation-ssl

[1327-version-negotiation-ssl]
server = 1327-version-negotiation-server
client = 1327-version-negotiation-client

[1327-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1327-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1327]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1328-version-negotiation]
ssl_conf = 1328-version-negotiation-ssl

[1328-version-negotiation-ssl]
server = 1328-version-negotiation-server
client = 1328-version-negotiation-client

[1328-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = SSLv3
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1328-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1328]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1329-version-negotiation]
ssl_conf = 1329-version-negotiation-ssl

[1329-version-negotiation-ssl]
server = 1329-version-negotiation-server
client = 1329-version-negotiation-client

[1329-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1329-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1329]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1330-version-negotiation]
ssl_conf = 1330-version-negotiation-ssl

[1330-version-negotiation-ssl]
server = 1330-version-negotiation-server
client = 1330-version-negotiation-client

[1330-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1330-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1330]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1331-version-negotiation]
ssl_conf = 1331-version-negotiation-ssl

[1331-version-negotiation-ssl]
server = 1331-version-negotiation-server
client = 1331-version-negotiation-client

[1331-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1331-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1331]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1332-version-negotiation]
ssl_conf = 1332-version-negotiation-ssl

[1332-version-negotiation-ssl]
server = 1332-version-negotiation-server
client = 1332-version-negotiation-client

[1332-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1332-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1332]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1333-version-negotiation]
ssl_conf = 1333-version-negotiation-ssl

[1333-version-negotiation-ssl]
server = 1333-version-negotiation-server
client = 1333-version-negotiation-client

[1333-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1333-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1333]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1334-version-negotiation]
ssl_conf = 1334-version-negotiation-ssl

[1334-version-negotiation-ssl]
server = 1334-version-negotiation-server
client = 1334-version-negotiation-client

[1334-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1334-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1334]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1335-version-negotiation]
ssl_conf = 1335-version-negotiation-ssl

[1335-version-negotiation-ssl]
server = 1335-version-negotiation-server
client = 1335-version-negotiation-client

[1335-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1335-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1335]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1336-version-negotiation]
ssl_conf = 1336-version-negotiation-ssl

[1336-version-negotiation-ssl]
server = 1336-version-negotiation-server
client = 1336-version-negotiation-client

[1336-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1336-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1336]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1337-version-negotiation]
ssl_conf = 1337-version-negotiation-ssl

[1337-version-negotiation-ssl]
server = 1337-version-negotiation-server
client = 1337-version-negotiation-client

[1337-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1337-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1337]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1338-version-negotiation]
ssl_conf = 1338-version-negotiation-ssl

[1338-version-negotiation-ssl]
server = 1338-version-negotiation-server
client = 1338-version-negotiation-client

[1338-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1338-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1338]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1339-version-negotiation]
ssl_conf = 1339-version-negotiation-ssl

[1339-version-negotiation-ssl]
server = 1339-version-negotiation-server
client = 1339-version-negotiation-client

[1339-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1339-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1339]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1340-version-negotiation]
ssl_conf = 1340-version-negotiation-ssl

[1340-version-negotiation-ssl]
server = 1340-version-negotiation-server
client = 1340-version-negotiation-client

[1340-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1340-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1340]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1341-version-negotiation]
ssl_conf = 1341-version-negotiation-ssl

[1341-version-negotiation-ssl]
server = 1341-version-negotiation-server
client = 1341-version-negotiation-client

[1341-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1341-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1341]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1342-version-negotiation]
ssl_conf = 1342-version-negotiation-ssl

[1342-version-negotiation-ssl]
server = 1342-version-negotiation-server
client = 1342-version-negotiation-client

[1342-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1342-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1342]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1343-version-negotiation]
ssl_conf = 1343-version-negotiation-ssl

[1343-version-negotiation-ssl]
server = 1343-version-negotiation-server
client = 1343-version-negotiation-client

[1343-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1343-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1343]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1344-version-negotiation]
ssl_conf = 1344-version-negotiation-ssl

[1344-version-negotiation-ssl]
server = 1344-version-negotiation-server
client = 1344-version-negotiation-client

[1344-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1344-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1344]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1345-version-negotiation]
ssl_conf = 1345-version-negotiation-ssl

[1345-version-negotiation-ssl]
server = 1345-version-negotiation-server
client = 1345-version-negotiation-client

[1345-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1345-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1345]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1346-version-negotiation]
ssl_conf = 1346-version-negotiation-ssl

[1346-version-negotiation-ssl]
server = 1346-version-negotiation-server
client = 1346-version-negotiation-client

[1346-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1346-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1346]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1347-version-negotiation]
ssl_conf = 1347-version-negotiation-ssl

[1347-version-negotiation-ssl]
server = 1347-version-negotiation-server
client = 1347-version-negotiation-client

[1347-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1347-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1347]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1348-version-negotiation]
ssl_conf = 1348-version-negotiation-ssl

[1348-version-negotiation-ssl]
server = 1348-version-negotiation-server
client = 1348-version-negotiation-client

[1348-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1348-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1348]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1349-version-negotiation]
ssl_conf = 1349-version-negotiation-ssl

[1349-version-negotiation-ssl]
server = 1349-version-negotiation-server
client = 1349-version-negotiation-client

[1349-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1349-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1349]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1350-version-negotiation]
ssl_conf = 1350-version-negotiation-ssl

[1350-version-negotiation-ssl]
server = 1350-version-negotiation-server
client = 1350-version-negotiation-client

[1350-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1350-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1350]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1351-version-negotiation]
ssl_conf = 1351-version-negotiation-ssl

[1351-version-negotiation-ssl]
server = 1351-version-negotiation-server
client = 1351-version-negotiation-client

[1351-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1351-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1351]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1352-version-negotiation]
ssl_conf = 1352-version-negotiation-ssl

[1352-version-negotiation-ssl]
server = 1352-version-negotiation-server
client = 1352-version-negotiation-client

[1352-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1352-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1352]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1353-version-negotiation]
ssl_conf = 1353-version-negotiation-ssl

[1353-version-negotiation-ssl]
server = 1353-version-negotiation-server
client = 1353-version-negotiation-client

[1353-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1353-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1353]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1354-version-negotiation]
ssl_conf = 1354-version-negotiation-ssl

[1354-version-negotiation-ssl]
server = 1354-version-negotiation-server
client = 1354-version-negotiation-client

[1354-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = SSLv3
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1354-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1354]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1355-version-negotiation]
ssl_conf = 1355-version-negotiation-ssl

[1355-version-negotiation-ssl]
server = 1355-version-negotiation-server
client = 1355-version-negotiation-client

[1355-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1355-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1355]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1356-version-negotiation]
ssl_conf = 1356-version-negotiation-ssl

[1356-version-negotiation-ssl]
server = 1356-version-negotiation-server
client = 1356-version-negotiation-client

[1356-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1356-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1356]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1357-version-negotiation]
ssl_conf = 1357-version-negotiation-ssl

[1357-version-negotiation-ssl]
server = 1357-version-negotiation-server
client = 1357-version-negotiation-client

[1357-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1357-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1357]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1358-version-negotiation]
ssl_conf = 1358-version-negotiation-ssl

[1358-version-negotiation-ssl]
server = 1358-version-negotiation-server
client = 1358-version-negotiation-client

[1358-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1358-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1358]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1359-version-negotiation]
ssl_conf = 1359-version-negotiation-ssl

[1359-version-negotiation-ssl]
server = 1359-version-negotiation-server
client = 1359-version-negotiation-client

[1359-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1359-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1359]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1360-version-negotiation]
ssl_conf = 1360-version-negotiation-ssl

[1360-version-negotiation-ssl]
server = 1360-version-negotiation-server
client = 1360-version-negotiation-client

[1360-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1360-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1360]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1361-version-negotiation]
ssl_conf = 1361-version-negotiation-ssl

[1361-version-negotiation-ssl]
server = 1361-version-negotiation-server
client = 1361-version-negotiation-client

[1361-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1361-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1361]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1362-version-negotiation]
ssl_conf = 1362-version-negotiation-ssl

[1362-version-negotiation-ssl]
server = 1362-version-negotiation-server
client = 1362-version-negotiation-client

[1362-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1362-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1362]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1363-version-negotiation]
ssl_conf = 1363-version-negotiation-ssl

[1363-version-negotiation-ssl]
server = 1363-version-negotiation-server
client = 1363-version-negotiation-client

[1363-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1363-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1363]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1364-version-negotiation]
ssl_conf = 1364-version-negotiation-ssl

[1364-version-negotiation-ssl]
server = 1364-version-negotiation-server
client = 1364-version-negotiation-client

[1364-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1364-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1364]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1365-version-negotiation]
ssl_conf = 1365-version-negotiation-ssl

[1365-version-negotiation-ssl]
server = 1365-version-negotiation-server
client = 1365-version-negotiation-client

[1365-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1365-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1365]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1366-version-negotiation]
ssl_conf = 1366-version-negotiation-ssl

[1366-version-negotiation-ssl]
server = 1366-version-negotiation-server
client = 1366-version-negotiation-client

[1366-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1366-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1366]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1367-version-negotiation]
ssl_conf = 1367-version-negotiation-ssl

[1367-version-negotiation-ssl]
server = 1367-version-negotiation-server
client = 1367-version-negotiation-client

[1367-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1367-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1367]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1368-version-negotiation]
ssl_conf = 1368-version-negotiation-ssl

[1368-version-negotiation-ssl]
server = 1368-version-negotiation-server
client = 1368-version-negotiation-client

[1368-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1368-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1368]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1369-version-negotiation]
ssl_conf = 1369-version-negotiation-ssl

[1369-version-negotiation-ssl]
server = 1369-version-negotiation-server
client = 1369-version-negotiation-client

[1369-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1369-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1369]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1370-version-negotiation]
ssl_conf = 1370-version-negotiation-ssl

[1370-version-negotiation-ssl]
server = 1370-version-negotiation-server
client = 1370-version-negotiation-client

[1370-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1370-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1370]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1371-version-negotiation]
ssl_conf = 1371-version-negotiation-ssl

[1371-version-negotiation-ssl]
server = 1371-version-negotiation-server
client = 1371-version-negotiation-client

[1371-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1371-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1371]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1372-version-negotiation]
ssl_conf = 1372-version-negotiation-ssl

[1372-version-negotiation-ssl]
server = 1372-version-negotiation-server
client = 1372-version-negotiation-client

[1372-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1372-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1372]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1373-version-negotiation]
ssl_conf = 1373-version-negotiation-ssl

[1373-version-negotiation-ssl]
server = 1373-version-negotiation-server
client = 1373-version-negotiation-client

[1373-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1373-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1373]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1374-version-negotiation]
ssl_conf = 1374-version-negotiation-ssl

[1374-version-negotiation-ssl]
server = 1374-version-negotiation-server
client = 1374-version-negotiation-client

[1374-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1374-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1374]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1375-version-negotiation]
ssl_conf = 1375-version-negotiation-ssl

[1375-version-negotiation-ssl]
server = 1375-version-negotiation-server
client = 1375-version-negotiation-client

[1375-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1375-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1375]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1376-version-negotiation]
ssl_conf = 1376-version-negotiation-ssl

[1376-version-negotiation-ssl]
server = 1376-version-negotiation-server
client = 1376-version-negotiation-client

[1376-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1376-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1376]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1377-version-negotiation]
ssl_conf = 1377-version-negotiation-ssl

[1377-version-negotiation-ssl]
server = 1377-version-negotiation-server
client = 1377-version-negotiation-client

[1377-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1377-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1377]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1378-version-negotiation]
ssl_conf = 1378-version-negotiation-ssl

[1378-version-negotiation-ssl]
server = 1378-version-negotiation-server
client = 1378-version-negotiation-client

[1378-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1378-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1378]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1379-version-negotiation]
ssl_conf = 1379-version-negotiation-ssl

[1379-version-negotiation-ssl]
server = 1379-version-negotiation-server
client = 1379-version-negotiation-client

[1379-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1379-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1379]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1380-version-negotiation]
ssl_conf = 1380-version-negotiation-ssl

[1380-version-negotiation-ssl]
server = 1380-version-negotiation-server
client = 1380-version-negotiation-client

[1380-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = SSLv3
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1380-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1380]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1381-version-negotiation]
ssl_conf = 1381-version-negotiation-ssl

[1381-version-negotiation-ssl]
server = 1381-version-negotiation-server
client = 1381-version-negotiation-client

[1381-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1381-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1381]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1382-version-negotiation]
ssl_conf = 1382-version-negotiation-ssl

[1382-version-negotiation-ssl]
server = 1382-version-negotiation-server
client = 1382-version-negotiation-client

[1382-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1382-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1382]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1383-version-negotiation]
ssl_conf = 1383-version-negotiation-ssl

[1383-version-negotiation-ssl]
server = 1383-version-negotiation-server
client = 1383-version-negotiation-client

[1383-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1383-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1383]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1384-version-negotiation]
ssl_conf = 1384-version-negotiation-ssl

[1384-version-negotiation-ssl]
server = 1384-version-negotiation-server
client = 1384-version-negotiation-client

[1384-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1384-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1384]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1385-version-negotiation]
ssl_conf = 1385-version-negotiation-ssl

[1385-version-negotiation-ssl]
server = 1385-version-negotiation-server
client = 1385-version-negotiation-client

[1385-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1385-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1385]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1386-version-negotiation]
ssl_conf = 1386-version-negotiation-ssl

[1386-version-negotiation-ssl]
server = 1386-version-negotiation-server
client = 1386-version-negotiation-client

[1386-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1386-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1386]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1387-version-negotiation]
ssl_conf = 1387-version-negotiation-ssl

[1387-version-negotiation-ssl]
server = 1387-version-negotiation-server
client = 1387-version-negotiation-client

[1387-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1387-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1387]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1388-version-negotiation]
ssl_conf = 1388-version-negotiation-ssl

[1388-version-negotiation-ssl]
server = 1388-version-negotiation-server
client = 1388-version-negotiation-client

[1388-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1388-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1388]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1389-version-negotiation]
ssl_conf = 1389-version-negotiation-ssl

[1389-version-negotiation-ssl]
server = 1389-version-negotiation-server
client = 1389-version-negotiation-client

[1389-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1389-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1389]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1390-version-negotiation]
ssl_conf = 1390-version-negotiation-ssl

[1390-version-negotiation-ssl]
server = 1390-version-negotiation-server
client = 1390-version-negotiation-client

[1390-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1390-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1390]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1391-version-negotiation]
ssl_conf = 1391-version-negotiation-ssl

[1391-version-negotiation-ssl]
server = 1391-version-negotiation-server
client = 1391-version-negotiation-client

[1391-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1391-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1391]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1392-version-negotiation]
ssl_conf = 1392-version-negotiation-ssl

[1392-version-negotiation-ssl]
server = 1392-version-negotiation-server
client = 1392-version-negotiation-client

[1392-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1392-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1392]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1393-version-negotiation]
ssl_conf = 1393-version-negotiation-ssl

[1393-version-negotiation-ssl]
server = 1393-version-negotiation-server
client = 1393-version-negotiation-client

[1393-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1393-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1393]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1394-version-negotiation]
ssl_conf = 1394-version-negotiation-ssl

[1394-version-negotiation-ssl]
server = 1394-version-negotiation-server
client = 1394-version-negotiation-client

[1394-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1394-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1394]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1395-version-negotiation]
ssl_conf = 1395-version-negotiation-ssl

[1395-version-negotiation-ssl]
server = 1395-version-negotiation-server
client = 1395-version-negotiation-client

[1395-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1395-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1395]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1396-version-negotiation]
ssl_conf = 1396-version-negotiation-ssl

[1396-version-negotiation-ssl]
server = 1396-version-negotiation-server
client = 1396-version-negotiation-client

[1396-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1396-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1396]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1397-version-negotiation]
ssl_conf = 1397-version-negotiation-ssl

[1397-version-negotiation-ssl]
server = 1397-version-negotiation-server
client = 1397-version-negotiation-client

[1397-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1397-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1397]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1398-version-negotiation]
ssl_conf = 1398-version-negotiation-ssl

[1398-version-negotiation-ssl]
server = 1398-version-negotiation-server
client = 1398-version-negotiation-client

[1398-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1398-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1398]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1399-version-negotiation]
ssl_conf = 1399-version-negotiation-ssl

[1399-version-negotiation-ssl]
server = 1399-version-negotiation-server
client = 1399-version-negotiation-client

[1399-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1399-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1399]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1400-version-negotiation]
ssl_conf = 1400-version-negotiation-ssl

[1400-version-negotiation-ssl]
server = 1400-version-negotiation-server
client = 1400-version-negotiation-client

[1400-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1400-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1400]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1401-version-negotiation]
ssl_conf = 1401-version-negotiation-ssl

[1401-version-negotiation-ssl]
server = 1401-version-negotiation-server
client = 1401-version-negotiation-client

[1401-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1401-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1401]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1402-version-negotiation]
ssl_conf = 1402-version-negotiation-ssl

[1402-version-negotiation-ssl]
server = 1402-version-negotiation-server
client = 1402-version-negotiation-client

[1402-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1402-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1402]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1403-version-negotiation]
ssl_conf = 1403-version-negotiation-ssl

[1403-version-negotiation-ssl]
server = 1403-version-negotiation-server
client = 1403-version-negotiation-client

[1403-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1403-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1403]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1404-version-negotiation]
ssl_conf = 1404-version-negotiation-ssl

[1404-version-negotiation-ssl]
server = 1404-version-negotiation-server
client = 1404-version-negotiation-client

[1404-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1404-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1404]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1405-version-negotiation]
ssl_conf = 1405-version-negotiation-ssl

[1405-version-negotiation-ssl]
server = 1405-version-negotiation-server
client = 1405-version-negotiation-client

[1405-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1405-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1405]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1406-version-negotiation]
ssl_conf = 1406-version-negotiation-ssl

[1406-version-negotiation-ssl]
server = 1406-version-negotiation-server
client = 1406-version-negotiation-client

[1406-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = SSLv3
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1406-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1406]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1407-version-negotiation]
ssl_conf = 1407-version-negotiation-ssl

[1407-version-negotiation-ssl]
server = 1407-version-negotiation-server
client = 1407-version-negotiation-client

[1407-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1407-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1407]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1408-version-negotiation]
ssl_conf = 1408-version-negotiation-ssl

[1408-version-negotiation-ssl]
server = 1408-version-negotiation-server
client = 1408-version-negotiation-client

[1408-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1408-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1408]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1409-version-negotiation]
ssl_conf = 1409-version-negotiation-ssl

[1409-version-negotiation-ssl]
server = 1409-version-negotiation-server
client = 1409-version-negotiation-client

[1409-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1409-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1409]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1410-version-negotiation]
ssl_conf = 1410-version-negotiation-ssl

[1410-version-negotiation-ssl]
server = 1410-version-negotiation-server
client = 1410-version-negotiation-client

[1410-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1410-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1410]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1411-version-negotiation]
ssl_conf = 1411-version-negotiation-ssl

[1411-version-negotiation-ssl]
server = 1411-version-negotiation-server
client = 1411-version-negotiation-client

[1411-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1411-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1411]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1412-version-negotiation]
ssl_conf = 1412-version-negotiation-ssl

[1412-version-negotiation-ssl]
server = 1412-version-negotiation-server
client = 1412-version-negotiation-client

[1412-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1412-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1412]
ExpectedProtocol = TLSv1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1413-version-negotiation]
ssl_conf = 1413-version-negotiation-ssl

[1413-version-negotiation-ssl]
server = 1413-version-negotiation-server
client = 1413-version-negotiation-client

[1413-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1413-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1413]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1414-version-negotiation]
ssl_conf = 1414-version-negotiation-ssl

[1414-version-negotiation-ssl]
server = 1414-version-negotiation-server
client = 1414-version-negotiation-client

[1414-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1414-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1414]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1415-version-negotiation]
ssl_conf = 1415-version-negotiation-ssl

[1415-version-negotiation-ssl]
server = 1415-version-negotiation-server
client = 1415-version-negotiation-client

[1415-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1415-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1415]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1416-version-negotiation]
ssl_conf = 1416-version-negotiation-ssl

[1416-version-negotiation-ssl]
server = 1416-version-negotiation-server
client = 1416-version-negotiation-client

[1416-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1416-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1416]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1417-version-negotiation]
ssl_conf = 1417-version-negotiation-ssl

[1417-version-negotiation-ssl]
server = 1417-version-negotiation-server
client = 1417-version-negotiation-client

[1417-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1417-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1417]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1418-version-negotiation]
ssl_conf = 1418-version-negotiation-ssl

[1418-version-negotiation-ssl]
server = 1418-version-negotiation-server
client = 1418-version-negotiation-client

[1418-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1418-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1418]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1419-version-negotiation]
ssl_conf = 1419-version-negotiation-ssl

[1419-version-negotiation-ssl]
server = 1419-version-negotiation-server
client = 1419-version-negotiation-client

[1419-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1419-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1419]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1420-version-negotiation]
ssl_conf = 1420-version-negotiation-ssl

[1420-version-negotiation-ssl]
server = 1420-version-negotiation-server
client = 1420-version-negotiation-client

[1420-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1420-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1420]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1421-version-negotiation]
ssl_conf = 1421-version-negotiation-ssl

[1421-version-negotiation-ssl]
server = 1421-version-negotiation-server
client = 1421-version-negotiation-client

[1421-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1421-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1421]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1422-version-negotiation]
ssl_conf = 1422-version-negotiation-ssl

[1422-version-negotiation-ssl]
server = 1422-version-negotiation-server
client = 1422-version-negotiation-client

[1422-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1422-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1422]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1423-version-negotiation]
ssl_conf = 1423-version-negotiation-ssl

[1423-version-negotiation-ssl]
server = 1423-version-negotiation-server
client = 1423-version-negotiation-client

[1423-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1423-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1423]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1424-version-negotiation]
ssl_conf = 1424-version-negotiation-ssl

[1424-version-negotiation-ssl]
server = 1424-version-negotiation-server
client = 1424-version-negotiation-client

[1424-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1424-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1424]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1425-version-negotiation]
ssl_conf = 1425-version-negotiation-ssl

[1425-version-negotiation-ssl]
server = 1425-version-negotiation-server
client = 1425-version-negotiation-client

[1425-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1425-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1425]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1426-version-negotiation]
ssl_conf = 1426-version-negotiation-ssl

[1426-version-negotiation-ssl]
server = 1426-version-negotiation-server
client = 1426-version-negotiation-client

[1426-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1426-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1426]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1427-version-negotiation]
ssl_conf = 1427-version-negotiation-ssl

[1427-version-negotiation-ssl]
server = 1427-version-negotiation-server
client = 1427-version-negotiation-client

[1427-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1427-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1427]
ExpectedResult = ClientFail
Serialize = Client


# ===========================================================

[1428-version-negotiation]
ssl_conf = 1428-version-negotiation-ssl

[1428-version-negotiation-ssl]
server = 1428-version-negotiation-server
client = 1428-version-negotiation-client

[1428-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1428-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1428]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1429-version-negotiation]
ssl_conf = 1429-version-negotiation-ssl

[1429-version-negotiation-ssl]
server = 1429-version-negotiation-server
client = 1429-version-negotiation-client

[1429-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1429-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1429]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1430-version-negotiation]
ssl_conf = 1430-version-negotiation-ssl

[1430-version-negotiation-ssl]
server = 1430-version-negotiation-server
client = 1430-version-negotiation-client

[1430-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1430-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1430]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1431-version-negotiation]
ssl_conf = 1431-version-negotiation-ssl

[1431-version-negotiation-ssl]
server = 1431-version-negotiation-server
client = 1431-version-negotiation-client

[1431-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1431-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1431]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1432-version-negotiation]
ssl_conf = 1432-version-negotiation-ssl

[1432-version-negotiation-ssl]
server = 1432-version-negotiation-server
client = 1432-version-negotiation-client

[1432-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = SSLv3
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1432-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1432]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1433-version-negotiation]
ssl_conf = 1433-version-negotiation-ssl

[1433-version-negotiation-ssl]
server = 1433-version-negotiation-server
client = 1433-version-negotiation-client

[1433-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1433-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1433]
ExpectedResult = ClientFail
Serialize = Client


# ===========================================================

[1434-version-negotiation]
ssl_conf = 1434-version-negotiation-ssl

[1434-version-negotiation-ssl]
server = 1434-version-negotiation-server
client = 1434-version-negotiation-client

[1434-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1434-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1434]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1435-version-negotiation]
ssl_conf = 1435-version-negotiation-ssl

[1435-version-negotiation-ssl]
server = 1435-version-negotiation-server
client = 1435-version-negotiation-client

[1435-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1435-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1435]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1436-version-negotiation]
ssl_conf = 1436-version-negotiation-ssl

[1436-version-negotiation-ssl]
server = 1436-version-negotiation-server
client = 1436-version-negotiation-client

[1436-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1436-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1436]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1437-version-negotiation]
ssl_conf = 1437-version-negotiation-ssl

[1437-version-negotiation-ssl]
server = 1437-version-negotiation-server
client = 1437-version-negotiation-client

[1437-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1437-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1437]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1438-version-negotiation]
ssl_conf = 1438-version-negotiation-ssl

[1438-version-negotiation-ssl]
server = 1438-version-negotiation-server
client = 1438-version-negotiation-client

[1438-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1438-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1438]
ExpectedResult = ClientFail
Serialize = Client


# ===========================================================

[1439-version-negotiation]
ssl_conf = 1439-version-negotiation-ssl

[1439-version-negotiation-ssl]
server = 1439-version-negotiation-server
client = 1439-version-negotiation-client

[1439-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1439-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1439]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1440-version-negotiation]
ssl_conf = 1440-version-negotiation-ssl

[1440-version-negotiation-ssl]
server = 1440-version-negotiation-server
client = 1440-version-negotiation-client

[1440-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1440-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1440]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1441-version-negotiation]
ssl_conf = 1441-version-negotiation-ssl

[1441-version-negotiation-ssl]
server = 1441-version-negotiation-server
client = 1441-version-negotiation-client

[1441-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1441-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1441]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1442-version-negotiation]
ssl_conf = 1442-version-negotiation-ssl

[1442-version-negotiation-ssl]
server = 1442-version-negotiation-server
client = 1442-version-negotiation-client

[1442-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1442-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1442]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1443-version-negotiation]
ssl_conf = 1443-version-negotiation-ssl

[1443-version-negotiation-ssl]
server = 1443-version-negotiation-server
client = 1443-version-negotiation-client

[1443-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1443-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1443]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1444-version-negotiation]
ssl_conf = 1444-version-negotiation-ssl

[1444-version-negotiation-ssl]
server = 1444-version-negotiation-server
client = 1444-version-negotiation-client

[1444-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1444-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1444]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1445-version-negotiation]
ssl_conf = 1445-version-negotiation-ssl

[1445-version-negotiation-ssl]
server = 1445-version-negotiation-server
client = 1445-version-negotiation-client

[1445-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1445-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1445]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1446-version-negotiation]
ssl_conf = 1446-version-negotiation-ssl

[1446-version-negotiation-ssl]
server = 1446-version-negotiation-server
client = 1446-version-negotiation-client

[1446-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1446-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1446]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1447-version-negotiation]
ssl_conf = 1447-version-negotiation-ssl

[1447-version-negotiation-ssl]
server = 1447-version-negotiation-server
client = 1447-version-negotiation-client

[1447-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1447-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1447]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1448-version-negotiation]
ssl_conf = 1448-version-negotiation-ssl

[1448-version-negotiation-ssl]
server = 1448-version-negotiation-server
client = 1448-version-negotiation-client

[1448-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1448-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1448]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1449-version-negotiation]
ssl_conf = 1449-version-negotiation-ssl

[1449-version-negotiation-ssl]
server = 1449-version-negotiation-server
client = 1449-version-negotiation-client

[1449-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1449-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1449]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1450-version-negotiation]
ssl_conf = 1450-version-negotiation-ssl

[1450-version-negotiation-ssl]
server = 1450-version-negotiation-server
client = 1450-version-negotiation-client

[1450-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1450-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1450]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1451-version-negotiation]
ssl_conf = 1451-version-negotiation-ssl

[1451-version-negotiation-ssl]
server = 1451-version-negotiation-server
client = 1451-version-negotiation-client

[1451-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1451-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1451]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1452-version-negotiation]
ssl_conf = 1452-version-negotiation-ssl

[1452-version-negotiation-ssl]
server = 1452-version-negotiation-server
client = 1452-version-negotiation-client

[1452-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1452-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1452]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1453-version-negotiation]
ssl_conf = 1453-version-negotiation-ssl

[1453-version-negotiation-ssl]
server = 1453-version-negotiation-server
client = 1453-version-negotiation-client

[1453-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1453-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1453]
ExpectedResult = ClientFail
Serialize = Client


# ===========================================================

[1454-version-negotiation]
ssl_conf = 1454-version-negotiation-ssl

[1454-version-negotiation-ssl]
server = 1454-version-negotiation-server
client = 1454-version-negotiation-client

[1454-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1454-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1454]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1455-version-negotiation]
ssl_conf = 1455-version-negotiation-ssl

[1455-version-negotiation-ssl]
server = 1455-version-negotiation-server
client = 1455-version-negotiation-client

[1455-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1455-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1455]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1456-version-negotiation]
ssl_conf = 1456-version-negotiation-ssl

[1456-version-negotiation-ssl]
server = 1456-version-negotiation-server
client = 1456-version-negotiation-client

[1456-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1456-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1456]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1457-version-negotiation]
ssl_conf = 1457-version-negotiation-ssl

[1457-version-negotiation-ssl]
server = 1457-version-negotiation-server
client = 1457-version-negotiation-client

[1457-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1457-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1457]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1458-version-negotiation]
ssl_conf = 1458-version-negotiation-ssl

[1458-version-negotiation-ssl]
server = 1458-version-negotiation-server
client = 1458-version-negotiation-client

[1458-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = SSLv3
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1458-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1458]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1459-version-negotiation]
ssl_conf = 1459-version-negotiation-ssl

[1459-version-negotiation-ssl]
server = 1459-version-negotiation-server
client = 1459-version-negotiation-client

[1459-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1459-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1459]
ExpectedResult = ClientFail
Serialize = Client


# ===========================================================

[1460-version-negotiation]
ssl_conf = 1460-version-negotiation-ssl

[1460-version-negotiation-ssl]
server = 1460-version-negotiation-server
client = 1460-version-negotiation-client

[1460-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1460-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1460]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1461-version-negotiation]
ssl_conf = 1461-version-negotiation-ssl

[1461-version-negotiation-ssl]
server = 1461-version-negotiation-server
client = 1461-version-negotiation-client

[1461-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1461-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1461]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1462-version-negotiation]
ssl_conf = 1462-version-negotiation-ssl

[1462-version-negotiation-ssl]
server = 1462-version-negotiation-server
client = 1462-version-negotiation-client

[1462-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1462-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1462]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1463-version-negotiation]
ssl_conf = 1463-version-negotiation-ssl

[1463-version-negotiation-ssl]
server = 1463-version-negotiation-server
client = 1463-version-negotiation-client

[1463-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1463-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1463]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1464-version-negotiation]
ssl_conf = 1464-version-negotiation-ssl

[1464-version-negotiation-ssl]
server = 1464-version-negotiation-server
client = 1464-version-negotiation-client

[1464-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1464-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1464]
ExpectedResult = ClientFail
Serialize = Client


# ===========================================================

[1465-version-negotiation]
ssl_conf = 1465-version-negotiation-ssl

[1465-version-negotiation-ssl]
server = 1465-version-negotiation-server
client = 1465-version-negotiation-client

[1465-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1465-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1465]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1466-version-negotiation]
ssl_conf = 1466-version-negotiation-ssl

[1466-version-negotiation-ssl]
server = 1466-version-negotiation-server
client = 1466-version-negotiation-client

[1466-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1466-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1466]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1467-version-negotiation]
ssl_conf = 1467-version-negotiation-ssl

[1467-version-negotiation-ssl]
server = 1467-version-negotiation-server
client = 1467-version-negotiation-client

[1467-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1467-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1467]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1468-version-negotiation]
ssl_conf = 1468-version-negotiation-ssl

[1468-version-negotiation-ssl]
server = 1468-version-negotiation-server
client = 1468-version-negotiation-client

[1468-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1468-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1468]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1469-version-negotiation]
ssl_conf = 1469-version-negotiation-ssl

[1469-version-negotiation-ssl]
server = 1469-version-negotiation-server
client = 1469-version-negotiation-client

[1469-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1469-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1469]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1470-version-negotiation]
ssl_conf = 1470-version-negotiation-ssl

[1470-version-negotiation-ssl]
server = 1470-version-negotiation-server
client = 1470-version-negotiation-client

[1470-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1470-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1470]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1471-version-negotiation]
ssl_conf = 1471-version-negotiation-ssl

[1471-version-negotiation-ssl]
server = 1471-version-negotiation-server
client = 1471-version-negotiation-client

[1471-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1471-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1471]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1472-version-negotiation]
ssl_conf = 1472-version-negotiation-ssl

[1472-version-negotiation-ssl]
server = 1472-version-negotiation-server
client = 1472-version-negotiation-client

[1472-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1472-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1472]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1473-version-negotiation]
ssl_conf = 1473-version-negotiation-ssl

[1473-version-negotiation-ssl]
server = 1473-version-negotiation-server
client = 1473-version-negotiation-client

[1473-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1473-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1473]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1474-version-negotiation]
ssl_conf = 1474-version-negotiation-ssl

[1474-version-negotiation-ssl]
server = 1474-version-negotiation-server
client = 1474-version-negotiation-client

[1474-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1474-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1474]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1475-version-negotiation]
ssl_conf = 1475-version-negotiation-ssl

[1475-version-negotiation-ssl]
server = 1475-version-negotiation-server
client = 1475-version-negotiation-client

[1475-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1475-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1475]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1476-version-negotiation]
ssl_conf = 1476-version-negotiation-ssl

[1476-version-negotiation-ssl]
server = 1476-version-negotiation-server
client = 1476-version-negotiation-client

[1476-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1476-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1476]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1477-version-negotiation]
ssl_conf = 1477-version-negotiation-ssl

[1477-version-negotiation-ssl]
server = 1477-version-negotiation-server
client = 1477-version-negotiation-client

[1477-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1477-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1477]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1478-version-negotiation]
ssl_conf = 1478-version-negotiation-ssl

[1478-version-negotiation-ssl]
server = 1478-version-negotiation-server
client = 1478-version-negotiation-client

[1478-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1478-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1478]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1479-version-negotiation]
ssl_conf = 1479-version-negotiation-ssl

[1479-version-negotiation-ssl]
server = 1479-version-negotiation-server
client = 1479-version-negotiation-client

[1479-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1479-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1479]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1480-version-negotiation]
ssl_conf = 1480-version-negotiation-ssl

[1480-version-negotiation-ssl]
server = 1480-version-negotiation-server
client = 1480-version-negotiation-client

[1480-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1480-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1480]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1481-version-negotiation]
ssl_conf = 1481-version-negotiation-ssl

[1481-version-negotiation-ssl]
server = 1481-version-negotiation-server
client = 1481-version-negotiation-client

[1481-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1481-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1481]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1482-version-negotiation]
ssl_conf = 1482-version-negotiation-ssl

[1482-version-negotiation-ssl]
server = 1482-version-negotiation-server
client = 1482-version-negotiation-client

[1482-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1482-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1482]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1483-version-negotiation]
ssl_conf = 1483-version-negotiation-ssl

[1483-version-negotiation-ssl]
server = 1483-version-negotiation-server
client = 1483-version-negotiation-client

[1483-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1483-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1483]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1484-version-negotiation]
ssl_conf = 1484-version-negotiation-ssl

[1484-version-negotiation-ssl]
server = 1484-version-negotiation-server
client = 1484-version-negotiation-client

[1484-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = SSLv3
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1484-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1484]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1485-version-negotiation]
ssl_conf = 1485-version-negotiation-ssl

[1485-version-negotiation-ssl]
server = 1485-version-negotiation-server
client = 1485-version-negotiation-client

[1485-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1485-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1485]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1486-version-negotiation]
ssl_conf = 1486-version-negotiation-ssl

[1486-version-negotiation-ssl]
server = 1486-version-negotiation-server
client = 1486-version-negotiation-client

[1486-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1486-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1486]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1487-version-negotiation]
ssl_conf = 1487-version-negotiation-ssl

[1487-version-negotiation-ssl]
server = 1487-version-negotiation-server
client = 1487-version-negotiation-client

[1487-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1487-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1487]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1488-version-negotiation]
ssl_conf = 1488-version-negotiation-ssl

[1488-version-negotiation-ssl]
server = 1488-version-negotiation-server
client = 1488-version-negotiation-client

[1488-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1488-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1488]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1489-version-negotiation]
ssl_conf = 1489-version-negotiation-ssl

[1489-version-negotiation-ssl]
server = 1489-version-negotiation-server
client = 1489-version-negotiation-client

[1489-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1489-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1489]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1490-version-negotiation]
ssl_conf = 1490-version-negotiation-ssl

[1490-version-negotiation-ssl]
server = 1490-version-negotiation-server
client = 1490-version-negotiation-client

[1490-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1490-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1490]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1491-version-negotiation]
ssl_conf = 1491-version-negotiation-ssl

[1491-version-negotiation-ssl]
server = 1491-version-negotiation-server
client = 1491-version-negotiation-client

[1491-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1491-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1491]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1492-version-negotiation]
ssl_conf = 1492-version-negotiation-ssl

[1492-version-negotiation-ssl]
server = 1492-version-negotiation-server
client = 1492-version-negotiation-client

[1492-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1492-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1492]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1493-version-negotiation]
ssl_conf = 1493-version-negotiation-ssl

[1493-version-negotiation-ssl]
server = 1493-version-negotiation-server
client = 1493-version-negotiation-client

[1493-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1493-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1493]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1494-version-negotiation]
ssl_conf = 1494-version-negotiation-ssl

[1494-version-negotiation-ssl]
server = 1494-version-negotiation-server
client = 1494-version-negotiation-client

[1494-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1494-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1494]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1495-version-negotiation]
ssl_conf = 1495-version-negotiation-ssl

[1495-version-negotiation-ssl]
server = 1495-version-negotiation-server
client = 1495-version-negotiation-client

[1495-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1495-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1495]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1496-version-negotiation]
ssl_conf = 1496-version-negotiation-ssl

[1496-version-negotiation-ssl]
server = 1496-version-negotiation-server
client = 1496-version-negotiation-client

[1496-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1496-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1496]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1497-version-negotiation]
ssl_conf = 1497-version-negotiation-ssl

[1497-version-negotiation-ssl]
server = 1497-version-negotiation-server
client = 1497-version-negotiation-client

[1497-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1497-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1497]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1498-version-negotiation]
ssl_conf = 1498-version-negotiation-ssl

[1498-version-negotiation-ssl]
server = 1498-version-negotiation-server
client = 1498-version-negotiation-client

[1498-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1498-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1498]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1499-version-negotiation]
ssl_conf = 1499-version-negotiation-ssl

[1499-version-negotiation-ssl]
server = 1499-version-negotiation-server
client = 1499-version-negotiation-client

[1499-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1499-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1499]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1500-version-negotiation]
ssl_conf = 1500-version-negotiation-ssl

[1500-version-negotiation-ssl]
server = 1500-version-negotiation-server
client = 1500-version-negotiation-client

[1500-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1500-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1500]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1501-version-negotiation]
ssl_conf = 1501-version-negotiation-ssl

[1501-version-negotiation-ssl]
server = 1501-version-negotiation-server
client = 1501-version-negotiation-client

[1501-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1501-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1501]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1502-version-negotiation]
ssl_conf = 1502-version-negotiation-ssl

[1502-version-negotiation-ssl]
server = 1502-version-negotiation-server
client = 1502-version-negotiation-client

[1502-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1502-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1502]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1503-version-negotiation]
ssl_conf = 1503-version-negotiation-ssl

[1503-version-negotiation-ssl]
server = 1503-version-negotiation-server
client = 1503-version-negotiation-client

[1503-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1503-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1503]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1504-version-negotiation]
ssl_conf = 1504-version-negotiation-ssl

[1504-version-negotiation-ssl]
server = 1504-version-negotiation-server
client = 1504-version-negotiation-client

[1504-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1504-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1504]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1505-version-negotiation]
ssl_conf = 1505-version-negotiation-ssl

[1505-version-negotiation-ssl]
server = 1505-version-negotiation-server
client = 1505-version-negotiation-client

[1505-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1505-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1505]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1506-version-negotiation]
ssl_conf = 1506-version-negotiation-ssl

[1506-version-negotiation-ssl]
server = 1506-version-negotiation-server
client = 1506-version-negotiation-client

[1506-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1506-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1506]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1507-version-negotiation]
ssl_conf = 1507-version-negotiation-ssl

[1507-version-negotiation-ssl]
server = 1507-version-negotiation-server
client = 1507-version-negotiation-client

[1507-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1507-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1507]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1508-version-negotiation]
ssl_conf = 1508-version-negotiation-ssl

[1508-version-negotiation-ssl]
server = 1508-version-negotiation-server
client = 1508-version-negotiation-client

[1508-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1508-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1508]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1509-version-negotiation]
ssl_conf = 1509-version-negotiation-ssl

[1509-version-negotiation-ssl]
server = 1509-version-negotiation-server
client = 1509-version-negotiation-client

[1509-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1509-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1509]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1510-version-negotiation]
ssl_conf = 1510-version-negotiation-ssl

[1510-version-negotiation-ssl]
server = 1510-version-negotiation-server
client = 1510-version-negotiation-client

[1510-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = SSLv3
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1510-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1510]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1511-version-negotiation]
ssl_conf = 1511-version-negotiation-ssl

[1511-version-negotiation-ssl]
server = 1511-version-negotiation-server
client = 1511-version-negotiation-client

[1511-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1511-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1511]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1512-version-negotiation]
ssl_conf = 1512-version-negotiation-ssl

[1512-version-negotiation-ssl]
server = 1512-version-negotiation-server
client = 1512-version-negotiation-client

[1512-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1512-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1512]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1513-version-negotiation]
ssl_conf = 1513-version-negotiation-ssl

[1513-version-negotiation-ssl]
server = 1513-version-negotiation-server
client = 1513-version-negotiation-client

[1513-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1513-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1513]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1514-version-negotiation]
ssl_conf = 1514-version-negotiation-ssl

[1514-version-negotiation-ssl]
server = 1514-version-negotiation-server
client = 1514-version-negotiation-client

[1514-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1514-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1514]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1515-version-negotiation]
ssl_conf = 1515-version-negotiation-ssl

[1515-version-negotiation-ssl]
server = 1515-version-negotiation-server
client = 1515-version-negotiation-client

[1515-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1515-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1515]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1516-version-negotiation]
ssl_conf = 1516-version-negotiation-ssl

[1516-version-negotiation-ssl]
server = 1516-version-negotiation-server
client = 1516-version-negotiation-client

[1516-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1516-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1516]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1517-version-negotiation]
ssl_conf = 1517-version-negotiation-ssl

[1517-version-negotiation-ssl]
server = 1517-version-negotiation-server
client = 1517-version-negotiation-client

[1517-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1517-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1517]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1518-version-negotiation]
ssl_conf = 1518-version-negotiation-ssl

[1518-version-negotiation-ssl]
server = 1518-version-negotiation-server
client = 1518-version-negotiation-client

[1518-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1518-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1518]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1519-version-negotiation]
ssl_conf = 1519-version-negotiation-ssl

[1519-version-negotiation-ssl]
server = 1519-version-negotiation-server
client = 1519-version-negotiation-client

[1519-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1519-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1519]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1520-version-negotiation]
ssl_conf = 1520-version-negotiation-ssl

[1520-version-negotiation-ssl]
server = 1520-version-negotiation-server
client = 1520-version-negotiation-client

[1520-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1520-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1520]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1521-version-negotiation]
ssl_conf = 1521-version-negotiation-ssl

[1521-version-negotiation-ssl]
server = 1521-version-negotiation-server
client = 1521-version-negotiation-client

[1521-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1521-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1521]
ExpectedProtocol = TLSv1.1
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1522-version-negotiation]
ssl_conf = 1522-version-negotiation-ssl

[1522-version-negotiation-ssl]
server = 1522-version-negotiation-server
client = 1522-version-negotiation-client

[1522-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1522-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1522]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1523-version-negotiation]
ssl_conf = 1523-version-negotiation-ssl

[1523-version-negotiation-ssl]
server = 1523-version-negotiation-server
client = 1523-version-negotiation-client

[1523-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1523-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1523]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1524-version-negotiation]
ssl_conf = 1524-version-negotiation-ssl

[1524-version-negotiation-ssl]
server = 1524-version-negotiation-server
client = 1524-version-negotiation-client

[1524-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1524-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1524]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1525-version-negotiation]
ssl_conf = 1525-version-negotiation-ssl

[1525-version-negotiation-ssl]
server = 1525-version-negotiation-server
client = 1525-version-negotiation-client

[1525-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1525-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1525]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1526-version-negotiation]
ssl_conf = 1526-version-negotiation-ssl

[1526-version-negotiation-ssl]
server = 1526-version-negotiation-server
client = 1526-version-negotiation-client

[1526-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1526-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1526]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1527-version-negotiation]
ssl_conf = 1527-version-negotiation-ssl

[1527-version-negotiation-ssl]
server = 1527-version-negotiation-server
client = 1527-version-negotiation-client

[1527-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1527-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1527]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1528-version-negotiation]
ssl_conf = 1528-version-negotiation-ssl

[1528-version-negotiation-ssl]
server = 1528-version-negotiation-server
client = 1528-version-negotiation-client

[1528-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1528-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1528]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1529-version-negotiation]
ssl_conf = 1529-version-negotiation-ssl

[1529-version-negotiation-ssl]
server = 1529-version-negotiation-server
client = 1529-version-negotiation-client

[1529-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1529-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1529]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1530-version-negotiation]
ssl_conf = 1530-version-negotiation-ssl

[1530-version-negotiation-ssl]
server = 1530-version-negotiation-server
client = 1530-version-negotiation-client

[1530-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1530-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1530]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1531-version-negotiation]
ssl_conf = 1531-version-negotiation-ssl

[1531-version-negotiation-ssl]
server = 1531-version-negotiation-server
client = 1531-version-negotiation-client

[1531-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1531-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1531]
ExpectedResult = ClientFail
Serialize = Client


# ===========================================================

[1532-version-negotiation]
ssl_conf = 1532-version-negotiation-ssl

[1532-version-negotiation-ssl]
server = 1532-version-negotiation-server
client = 1532-version-negotiation-client

[1532-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1532-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1532]
ExpectedResult = ClientFail
Serialize = Client


# ===========================================================

[1533-version-negotiation]
ssl_conf = 1533-version-negotiation-ssl

[1533-version-negotiation-ssl]
server = 1533-version-negotiation-server
client = 1533-version-negotiation-client

[1533-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1533-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1533]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1534-version-negotiation]
ssl_conf = 1534-version-negotiation-ssl

[1534-version-negotiation-ssl]
server = 1534-version-negotiation-server
client = 1534-version-negotiation-client

[1534-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1534-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1534]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1535-version-negotiation]
ssl_conf = 1535-version-negotiation-ssl

[1535-version-negotiation-ssl]
server = 1535-version-negotiation-server
client = 1535-version-negotiation-client

[1535-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1535-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1535]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1536-version-negotiation]
ssl_conf = 1536-version-negotiation-ssl

[1536-version-negotiation-ssl]
server = 1536-version-negotiation-server
client = 1536-version-negotiation-client

[1536-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = SSLv3
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1536-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1536]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1537-version-negotiation]
ssl_conf = 1537-version-negotiation-ssl

[1537-version-negotiation-ssl]
server = 1537-version-negotiation-server
client = 1537-version-negotiation-client

[1537-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1537-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1537]
ExpectedResult = ClientFail
Serialize = Client


# ===========================================================

[1538-version-negotiation]
ssl_conf = 1538-version-negotiation-ssl

[1538-version-negotiation-ssl]
server = 1538-version-negotiation-server
client = 1538-version-negotiation-client

[1538-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1538-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1538]
ExpectedResult = ClientFail
Serialize = Client


# ===========================================================

[1539-version-negotiation]
ssl_conf = 1539-version-negotiation-ssl

[1539-version-negotiation-ssl]
server = 1539-version-negotiation-server
client = 1539-version-negotiation-client

[1539-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1539-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1539]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1540-version-negotiation]
ssl_conf = 1540-version-negotiation-ssl

[1540-version-negotiation-ssl]
server = 1540-version-negotiation-server
client = 1540-version-negotiation-client

[1540-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1540-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1540]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1541-version-negotiation]
ssl_conf = 1541-version-negotiation-ssl

[1541-version-negotiation-ssl]
server = 1541-version-negotiation-server
client = 1541-version-negotiation-client

[1541-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1541-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1541]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1542-version-negotiation]
ssl_conf = 1542-version-negotiation-ssl

[1542-version-negotiation-ssl]
server = 1542-version-negotiation-server
client = 1542-version-negotiation-client

[1542-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1542-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1542]
ExpectedResult = ClientFail
Serialize = Client


# ===========================================================

[1543-version-negotiation]
ssl_conf = 1543-version-negotiation-ssl

[1543-version-negotiation-ssl]
server = 1543-version-negotiation-server
client = 1543-version-negotiation-client

[1543-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1543-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1543]
ExpectedResult = ClientFail
Serialize = Client


# ===========================================================

[1544-version-negotiation]
ssl_conf = 1544-version-negotiation-ssl

[1544-version-negotiation-ssl]
server = 1544-version-negotiation-server
client = 1544-version-negotiation-client

[1544-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1544-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1544]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1545-version-negotiation]
ssl_conf = 1545-version-negotiation-ssl

[1545-version-negotiation-ssl]
server = 1545-version-negotiation-server
client = 1545-version-negotiation-client

[1545-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1545-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1545]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1546-version-negotiation]
ssl_conf = 1546-version-negotiation-ssl

[1546-version-negotiation-ssl]
server = 1546-version-negotiation-server
client = 1546-version-negotiation-client

[1546-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1546-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1546]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1547-version-negotiation]
ssl_conf = 1547-version-negotiation-ssl

[1547-version-negotiation-ssl]
server = 1547-version-negotiation-server
client = 1547-version-negotiation-client

[1547-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1547-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1547]
ExpectedResult = ClientFail
Serialize = Client


# ===========================================================

[1548-version-negotiation]
ssl_conf = 1548-version-negotiation-ssl

[1548-version-negotiation-ssl]
server = 1548-version-negotiation-server
client = 1548-version-negotiation-client

[1548-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1548-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1548]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1549-version-negotiation]
ssl_conf = 1549-version-negotiation-ssl

[1549-version-negotiation-ssl]
server = 1549-version-negotiation-server
client = 1549-version-negotiation-client

[1549-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1549-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1549]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1550-version-negotiation]
ssl_conf = 1550-version-negotiation-ssl

[1550-version-negotiation-ssl]
server = 1550-version-negotiation-server
client = 1550-version-negotiation-client

[1550-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1550-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1550]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1551-version-negotiation]
ssl_conf = 1551-version-negotiation-ssl

[1551-version-negotiation-ssl]
server = 1551-version-negotiation-server
client = 1551-version-negotiation-client

[1551-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1551-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1551]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1552-version-negotiation]
ssl_conf = 1552-version-negotiation-ssl

[1552-version-negotiation-ssl]
server = 1552-version-negotiation-server
client = 1552-version-negotiation-client

[1552-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1552-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1552]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1553-version-negotiation]
ssl_conf = 1553-version-negotiation-ssl

[1553-version-negotiation-ssl]
server = 1553-version-negotiation-server
client = 1553-version-negotiation-client

[1553-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1553-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1553]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1554-version-negotiation]
ssl_conf = 1554-version-negotiation-ssl

[1554-version-negotiation-ssl]
server = 1554-version-negotiation-server
client = 1554-version-negotiation-client

[1554-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1554-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1554]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1555-version-negotiation]
ssl_conf = 1555-version-negotiation-ssl

[1555-version-negotiation-ssl]
server = 1555-version-negotiation-server
client = 1555-version-negotiation-client

[1555-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1555-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1555]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1556-version-negotiation]
ssl_conf = 1556-version-negotiation-ssl

[1556-version-negotiation-ssl]
server = 1556-version-negotiation-server
client = 1556-version-negotiation-client

[1556-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1556-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1556]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1557-version-negotiation]
ssl_conf = 1557-version-negotiation-ssl

[1557-version-negotiation-ssl]
server = 1557-version-negotiation-server
client = 1557-version-negotiation-client

[1557-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1557-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1557]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1558-version-negotiation]
ssl_conf = 1558-version-negotiation-ssl

[1558-version-negotiation-ssl]
server = 1558-version-negotiation-server
client = 1558-version-negotiation-client

[1558-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1558-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1558]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1559-version-negotiation]
ssl_conf = 1559-version-negotiation-ssl

[1559-version-negotiation-ssl]
server = 1559-version-negotiation-server
client = 1559-version-negotiation-client

[1559-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1559-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1559]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1560-version-negotiation]
ssl_conf = 1560-version-negotiation-ssl

[1560-version-negotiation-ssl]
server = 1560-version-negotiation-server
client = 1560-version-negotiation-client

[1560-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1560-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1560]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1561-version-negotiation]
ssl_conf = 1561-version-negotiation-ssl

[1561-version-negotiation-ssl]
server = 1561-version-negotiation-server
client = 1561-version-negotiation-client

[1561-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1561-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1561]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1562-version-negotiation]
ssl_conf = 1562-version-negotiation-ssl

[1562-version-negotiation-ssl]
server = 1562-version-negotiation-server
client = 1562-version-negotiation-client

[1562-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = SSLv3
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1562-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1562]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1563-version-negotiation]
ssl_conf = 1563-version-negotiation-ssl

[1563-version-negotiation-ssl]
server = 1563-version-negotiation-server
client = 1563-version-negotiation-client

[1563-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1563-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1563]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1564-version-negotiation]
ssl_conf = 1564-version-negotiation-ssl

[1564-version-negotiation-ssl]
server = 1564-version-negotiation-server
client = 1564-version-negotiation-client

[1564-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1564-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1564]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1565-version-negotiation]
ssl_conf = 1565-version-negotiation-ssl

[1565-version-negotiation-ssl]
server = 1565-version-negotiation-server
client = 1565-version-negotiation-client

[1565-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1565-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1565]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1566-version-negotiation]
ssl_conf = 1566-version-negotiation-ssl

[1566-version-negotiation-ssl]
server = 1566-version-negotiation-server
client = 1566-version-negotiation-client

[1566-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1566-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1566]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1567-version-negotiation]
ssl_conf = 1567-version-negotiation-ssl

[1567-version-negotiation-ssl]
server = 1567-version-negotiation-server
client = 1567-version-negotiation-client

[1567-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1567-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1567]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1568-version-negotiation]
ssl_conf = 1568-version-negotiation-ssl

[1568-version-negotiation-ssl]
server = 1568-version-negotiation-server
client = 1568-version-negotiation-client

[1568-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1568-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1568]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1569-version-negotiation]
ssl_conf = 1569-version-negotiation-ssl

[1569-version-negotiation-ssl]
server = 1569-version-negotiation-server
client = 1569-version-negotiation-client

[1569-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1569-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1569]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1570-version-negotiation]
ssl_conf = 1570-version-negotiation-ssl

[1570-version-negotiation-ssl]
server = 1570-version-negotiation-server
client = 1570-version-negotiation-client

[1570-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1570-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1570]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1571-version-negotiation]
ssl_conf = 1571-version-negotiation-ssl

[1571-version-negotiation-ssl]
server = 1571-version-negotiation-server
client = 1571-version-negotiation-client

[1571-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1571-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1571]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1572-version-negotiation]
ssl_conf = 1572-version-negotiation-ssl

[1572-version-negotiation-ssl]
server = 1572-version-negotiation-server
client = 1572-version-negotiation-client

[1572-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1572-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1572]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1573-version-negotiation]
ssl_conf = 1573-version-negotiation-ssl

[1573-version-negotiation-ssl]
server = 1573-version-negotiation-server
client = 1573-version-negotiation-client

[1573-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1573-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1573]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1574-version-negotiation]
ssl_conf = 1574-version-negotiation-ssl

[1574-version-negotiation-ssl]
server = 1574-version-negotiation-server
client = 1574-version-negotiation-client

[1574-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1574-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1574]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1575-version-negotiation]
ssl_conf = 1575-version-negotiation-ssl

[1575-version-negotiation-ssl]
server = 1575-version-negotiation-server
client = 1575-version-negotiation-client

[1575-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1575-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1575]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1576-version-negotiation]
ssl_conf = 1576-version-negotiation-ssl

[1576-version-negotiation-ssl]
server = 1576-version-negotiation-server
client = 1576-version-negotiation-client

[1576-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1576-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1576]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1577-version-negotiation]
ssl_conf = 1577-version-negotiation-ssl

[1577-version-negotiation-ssl]
server = 1577-version-negotiation-server
client = 1577-version-negotiation-client

[1577-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1577-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1577]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1578-version-negotiation]
ssl_conf = 1578-version-negotiation-ssl

[1578-version-negotiation-ssl]
server = 1578-version-negotiation-server
client = 1578-version-negotiation-client

[1578-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1578-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1578]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1579-version-negotiation]
ssl_conf = 1579-version-negotiation-ssl

[1579-version-negotiation-ssl]
server = 1579-version-negotiation-server
client = 1579-version-negotiation-client

[1579-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1579-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1579]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1580-version-negotiation]
ssl_conf = 1580-version-negotiation-ssl

[1580-version-negotiation-ssl]
server = 1580-version-negotiation-server
client = 1580-version-negotiation-client

[1580-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1580-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1580]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1581-version-negotiation]
ssl_conf = 1581-version-negotiation-ssl

[1581-version-negotiation-ssl]
server = 1581-version-negotiation-server
client = 1581-version-negotiation-client

[1581-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1581-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1581]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1582-version-negotiation]
ssl_conf = 1582-version-negotiation-ssl

[1582-version-negotiation-ssl]
server = 1582-version-negotiation-server
client = 1582-version-negotiation-client

[1582-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1582-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1582]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1583-version-negotiation]
ssl_conf = 1583-version-negotiation-ssl

[1583-version-negotiation-ssl]
server = 1583-version-negotiation-server
client = 1583-version-negotiation-client

[1583-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1583-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1583]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1584-version-negotiation]
ssl_conf = 1584-version-negotiation-ssl

[1584-version-negotiation-ssl]
server = 1584-version-negotiation-server
client = 1584-version-negotiation-client

[1584-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1584-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1584]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1585-version-negotiation]
ssl_conf = 1585-version-negotiation-ssl

[1585-version-negotiation-ssl]
server = 1585-version-negotiation-server
client = 1585-version-negotiation-client

[1585-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1585-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1585]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1586-version-negotiation]
ssl_conf = 1586-version-negotiation-ssl

[1586-version-negotiation-ssl]
server = 1586-version-negotiation-server
client = 1586-version-negotiation-client

[1586-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1586-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1586]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1587-version-negotiation]
ssl_conf = 1587-version-negotiation-ssl

[1587-version-negotiation-ssl]
server = 1587-version-negotiation-server
client = 1587-version-negotiation-client

[1587-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1587-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1587]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1588-version-negotiation]
ssl_conf = 1588-version-negotiation-ssl

[1588-version-negotiation-ssl]
server = 1588-version-negotiation-server
client = 1588-version-negotiation-client

[1588-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = SSLv3
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1588-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1588]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1589-version-negotiation]
ssl_conf = 1589-version-negotiation-ssl

[1589-version-negotiation-ssl]
server = 1589-version-negotiation-server
client = 1589-version-negotiation-client

[1589-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1589-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1589]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1590-version-negotiation]
ssl_conf = 1590-version-negotiation-ssl

[1590-version-negotiation-ssl]
server = 1590-version-negotiation-server
client = 1590-version-negotiation-client

[1590-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1590-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1590]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1591-version-negotiation]
ssl_conf = 1591-version-negotiation-ssl

[1591-version-negotiation-ssl]
server = 1591-version-negotiation-server
client = 1591-version-negotiation-client

[1591-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1591-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1591]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1592-version-negotiation]
ssl_conf = 1592-version-negotiation-ssl

[1592-version-negotiation-ssl]
server = 1592-version-negotiation-server
client = 1592-version-negotiation-client

[1592-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1592-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1592]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1593-version-negotiation]
ssl_conf = 1593-version-negotiation-ssl

[1593-version-negotiation-ssl]
server = 1593-version-negotiation-server
client = 1593-version-negotiation-client

[1593-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1593-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1593]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1594-version-negotiation]
ssl_conf = 1594-version-negotiation-ssl

[1594-version-negotiation-ssl]
server = 1594-version-negotiation-server
client = 1594-version-negotiation-client

[1594-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1594-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1594]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1595-version-negotiation]
ssl_conf = 1595-version-negotiation-ssl

[1595-version-negotiation-ssl]
server = 1595-version-negotiation-server
client = 1595-version-negotiation-client

[1595-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1595-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1595]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1596-version-negotiation]
ssl_conf = 1596-version-negotiation-ssl

[1596-version-negotiation-ssl]
server = 1596-version-negotiation-server
client = 1596-version-negotiation-client

[1596-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1596-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1596]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1597-version-negotiation]
ssl_conf = 1597-version-negotiation-ssl

[1597-version-negotiation-ssl]
server = 1597-version-negotiation-server
client = 1597-version-negotiation-client

[1597-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1597-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1597]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1598-version-negotiation]
ssl_conf = 1598-version-negotiation-ssl

[1598-version-negotiation-ssl]
server = 1598-version-negotiation-server
client = 1598-version-negotiation-client

[1598-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1598-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1598]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1599-version-negotiation]
ssl_conf = 1599-version-negotiation-ssl

[1599-version-negotiation-ssl]
server = 1599-version-negotiation-server
client = 1599-version-negotiation-client

[1599-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1599-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1599]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1600-version-negotiation]
ssl_conf = 1600-version-negotiation-ssl

[1600-version-negotiation-ssl]
server = 1600-version-negotiation-server
client = 1600-version-negotiation-client

[1600-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1600-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1600]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1601-version-negotiation]
ssl_conf = 1601-version-negotiation-ssl

[1601-version-negotiation-ssl]
server = 1601-version-negotiation-server
client = 1601-version-negotiation-client

[1601-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1601-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1601]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1602-version-negotiation]
ssl_conf = 1602-version-negotiation-ssl

[1602-version-negotiation-ssl]
server = 1602-version-negotiation-server
client = 1602-version-negotiation-client

[1602-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1602-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1602]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1603-version-negotiation]
ssl_conf = 1603-version-negotiation-ssl

[1603-version-negotiation-ssl]
server = 1603-version-negotiation-server
client = 1603-version-negotiation-client

[1603-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1603-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1603]
ExpectedProtocol = TLSv1.2
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1604-version-negotiation]
ssl_conf = 1604-version-negotiation-ssl

[1604-version-negotiation-ssl]
server = 1604-version-negotiation-server
client = 1604-version-negotiation-client

[1604-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1604-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1604]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1605-version-negotiation]
ssl_conf = 1605-version-negotiation-ssl

[1605-version-negotiation-ssl]
server = 1605-version-negotiation-server
client = 1605-version-negotiation-client

[1605-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1605-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1605]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1606-version-negotiation]
ssl_conf = 1606-version-negotiation-ssl

[1606-version-negotiation-ssl]
server = 1606-version-negotiation-server
client = 1606-version-negotiation-client

[1606-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1606-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1606]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1607-version-negotiation]
ssl_conf = 1607-version-negotiation-ssl

[1607-version-negotiation-ssl]
server = 1607-version-negotiation-server
client = 1607-version-negotiation-client

[1607-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1607-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1607]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1608-version-negotiation]
ssl_conf = 1608-version-negotiation-ssl

[1608-version-negotiation-ssl]
server = 1608-version-negotiation-server
client = 1608-version-negotiation-client

[1608-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1608-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1608]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1609-version-negotiation]
ssl_conf = 1609-version-negotiation-ssl

[1609-version-negotiation-ssl]
server = 1609-version-negotiation-server
client = 1609-version-negotiation-client

[1609-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1609-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1609]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1610-version-negotiation]
ssl_conf = 1610-version-negotiation-ssl

[1610-version-negotiation-ssl]
server = 1610-version-negotiation-server
client = 1610-version-negotiation-client

[1610-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1610-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1610]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1611-version-negotiation]
ssl_conf = 1611-version-negotiation-ssl

[1611-version-negotiation-ssl]
server = 1611-version-negotiation-server
client = 1611-version-negotiation-client

[1611-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1611-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1611]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1612-version-negotiation]
ssl_conf = 1612-version-negotiation-ssl

[1612-version-negotiation-ssl]
server = 1612-version-negotiation-server
client = 1612-version-negotiation-client

[1612-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1612-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1612]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1613-version-negotiation]
ssl_conf = 1613-version-negotiation-ssl

[1613-version-negotiation-ssl]
server = 1613-version-negotiation-server
client = 1613-version-negotiation-client

[1613-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1613-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1613]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1614-version-negotiation]
ssl_conf = 1614-version-negotiation-ssl

[1614-version-negotiation-ssl]
server = 1614-version-negotiation-server
client = 1614-version-negotiation-client

[1614-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = SSLv3
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1614-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1614]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1615-version-negotiation]
ssl_conf = 1615-version-negotiation-ssl

[1615-version-negotiation-ssl]
server = 1615-version-negotiation-server
client = 1615-version-negotiation-client

[1615-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1615-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1615]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1616-version-negotiation]
ssl_conf = 1616-version-negotiation-ssl

[1616-version-negotiation-ssl]
server = 1616-version-negotiation-server
client = 1616-version-negotiation-client

[1616-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1616-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1616]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1617-version-negotiation]
ssl_conf = 1617-version-negotiation-ssl

[1617-version-negotiation-ssl]
server = 1617-version-negotiation-server
client = 1617-version-negotiation-client

[1617-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1617-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1617]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1618-version-negotiation]
ssl_conf = 1618-version-negotiation-ssl

[1618-version-negotiation-ssl]
server = 1618-version-negotiation-server
client = 1618-version-negotiation-client

[1618-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1618-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1618]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1619-version-negotiation]
ssl_conf = 1619-version-negotiation-ssl

[1619-version-negotiation-ssl]
server = 1619-version-negotiation-server
client = 1619-version-negotiation-client

[1619-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1619-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1619]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1620-version-negotiation]
ssl_conf = 1620-version-negotiation-ssl

[1620-version-negotiation-ssl]
server = 1620-version-negotiation-server
client = 1620-version-negotiation-client

[1620-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1620-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1620]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1621-version-negotiation]
ssl_conf = 1621-version-negotiation-ssl

[1621-version-negotiation-ssl]
server = 1621-version-negotiation-server
client = 1621-version-negotiation-client

[1621-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1621-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1621]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1622-version-negotiation]
ssl_conf = 1622-version-negotiation-ssl

[1622-version-negotiation-ssl]
server = 1622-version-negotiation-server
client = 1622-version-negotiation-client

[1622-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1622-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1622]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1623-version-negotiation]
ssl_conf = 1623-version-negotiation-ssl

[1623-version-negotiation-ssl]
server = 1623-version-negotiation-server
client = 1623-version-negotiation-client

[1623-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1623-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1623]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1624-version-negotiation]
ssl_conf = 1624-version-negotiation-ssl

[1624-version-negotiation-ssl]
server = 1624-version-negotiation-server
client = 1624-version-negotiation-client

[1624-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1624-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1624]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1625-version-negotiation]
ssl_conf = 1625-version-negotiation-ssl

[1625-version-negotiation-ssl]
server = 1625-version-negotiation-server
client = 1625-version-negotiation-client

[1625-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1625-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1625]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1626-version-negotiation]
ssl_conf = 1626-version-negotiation-ssl

[1626-version-negotiation-ssl]
server = 1626-version-negotiation-server
client = 1626-version-negotiation-client

[1626-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1626-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1626]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1627-version-negotiation]
ssl_conf = 1627-version-negotiation-ssl

[1627-version-negotiation-ssl]
server = 1627-version-negotiation-server
client = 1627-version-negotiation-client

[1627-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1627-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1627]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1628-version-negotiation]
ssl_conf = 1628-version-negotiation-ssl

[1628-version-negotiation-ssl]
server = 1628-version-negotiation-server
client = 1628-version-negotiation-client

[1628-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1628-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1628]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1629-version-negotiation]
ssl_conf = 1629-version-negotiation-ssl

[1629-version-negotiation-ssl]
server = 1629-version-negotiation-server
client = 1629-version-negotiation-client

[1629-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1629-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1629]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1630-version-negotiation]
ssl_conf = 1630-version-negotiation-ssl

[1630-version-negotiation-ssl]
server = 1630-version-negotiation-server
client = 1630-version-negotiation-client

[1630-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1630-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1630]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1631-version-negotiation]
ssl_conf = 1631-version-negotiation-ssl

[1631-version-negotiation-ssl]
server = 1631-version-negotiation-server
client = 1631-version-negotiation-client

[1631-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1631-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1631]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1632-version-negotiation]
ssl_conf = 1632-version-negotiation-ssl

[1632-version-negotiation-ssl]
server = 1632-version-negotiation-server
client = 1632-version-negotiation-client

[1632-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1632-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1632]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1633-version-negotiation]
ssl_conf = 1633-version-negotiation-ssl

[1633-version-negotiation-ssl]
server = 1633-version-negotiation-server
client = 1633-version-negotiation-client

[1633-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1633-version-negotiation-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1633]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1634-version-negotiation]
ssl_conf = 1634-version-negotiation-ssl

[1634-version-negotiation-ssl]
server = 1634-version-negotiation-server
client = 1634-version-negotiation-client

[1634-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1634-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1634]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1635-version-negotiation]
ssl_conf = 1635-version-negotiation-ssl

[1635-version-negotiation-ssl]
server = 1635-version-negotiation-server
client = 1635-version-negotiation-client

[1635-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1635-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1635]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1636-version-negotiation]
ssl_conf = 1636-version-negotiation-ssl

[1636-version-negotiation-ssl]
server = 1636-version-negotiation-server
client = 1636-version-negotiation-client

[1636-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1636-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1636]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1637-version-negotiation]
ssl_conf = 1637-version-negotiation-ssl

[1637-version-negotiation-ssl]
server = 1637-version-negotiation-server
client = 1637-version-negotiation-client

[1637-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1637-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1637]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1638-version-negotiation]
ssl_conf = 1638-version-negotiation-ssl

[1638-version-negotiation-ssl]
server = 1638-version-negotiation-server
client = 1638-version-negotiation-client

[1638-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1638-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1638]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1639-version-negotiation]
ssl_conf = 1639-version-negotiation-ssl

[1639-version-negotiation-ssl]
server = 1639-version-negotiation-server
client = 1639-version-negotiation-client

[1639-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1639-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1639]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1640-version-negotiation]
ssl_conf = 1640-version-negotiation-ssl

[1640-version-negotiation-ssl]
server = 1640-version-negotiation-server
client = 1640-version-negotiation-client

[1640-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = SSLv3
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1640-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1640]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1641-version-negotiation]
ssl_conf = 1641-version-negotiation-ssl

[1641-version-negotiation-ssl]
server = 1641-version-negotiation-server
client = 1641-version-negotiation-client

[1641-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1641-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1641]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1642-version-negotiation]
ssl_conf = 1642-version-negotiation-ssl

[1642-version-negotiation-ssl]
server = 1642-version-negotiation-server
client = 1642-version-negotiation-client

[1642-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1642-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1642]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1643-version-negotiation]
ssl_conf = 1643-version-negotiation-ssl

[1643-version-negotiation-ssl]
server = 1643-version-negotiation-server
client = 1643-version-negotiation-client

[1643-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1643-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1643]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1644-version-negotiation]
ssl_conf = 1644-version-negotiation-ssl

[1644-version-negotiation-ssl]
server = 1644-version-negotiation-server
client = 1644-version-negotiation-client

[1644-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1644-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1644]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1645-version-negotiation]
ssl_conf = 1645-version-negotiation-ssl

[1645-version-negotiation-ssl]
server = 1645-version-negotiation-server
client = 1645-version-negotiation-client

[1645-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = SSLv3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1645-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1645]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1646-version-negotiation]
ssl_conf = 1646-version-negotiation-ssl

[1646-version-negotiation-ssl]
server = 1646-version-negotiation-server
client = 1646-version-negotiation-client

[1646-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1646-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1646]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1647-version-negotiation]
ssl_conf = 1647-version-negotiation-ssl

[1647-version-negotiation-ssl]
server = 1647-version-negotiation-server
client = 1647-version-negotiation-client

[1647-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1647-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1647]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1648-version-negotiation]
ssl_conf = 1648-version-negotiation-ssl

[1648-version-negotiation-ssl]
server = 1648-version-negotiation-server
client = 1648-version-negotiation-client

[1648-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1648-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1648]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1649-version-negotiation]
ssl_conf = 1649-version-negotiation-ssl

[1649-version-negotiation-ssl]
server = 1649-version-negotiation-server
client = 1649-version-negotiation-client

[1649-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1649-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1649]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1650-version-negotiation]
ssl_conf = 1650-version-negotiation-ssl

[1650-version-negotiation-ssl]
server = 1650-version-negotiation-server
client = 1650-version-negotiation-client

[1650-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1650-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1650]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1651-version-negotiation]
ssl_conf = 1651-version-negotiation-ssl

[1651-version-negotiation-ssl]
server = 1651-version-negotiation-server
client = 1651-version-negotiation-client

[1651-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1651-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1651]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1652-version-negotiation]
ssl_conf = 1652-version-negotiation-ssl

[1652-version-negotiation-ssl]
server = 1652-version-negotiation-server
client = 1652-version-negotiation-client

[1652-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1652-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1652]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1653-version-negotiation]
ssl_conf = 1653-version-negotiation-ssl

[1653-version-negotiation-ssl]
server = 1653-version-negotiation-server
client = 1653-version-negotiation-client

[1653-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1653-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1653]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1654-version-negotiation]
ssl_conf = 1654-version-negotiation-ssl

[1654-version-negotiation-ssl]
server = 1654-version-negotiation-server
client = 1654-version-negotiation-client

[1654-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1654-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1654]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1655-version-negotiation]
ssl_conf = 1655-version-negotiation-ssl

[1655-version-negotiation-ssl]
server = 1655-version-negotiation-server
client = 1655-version-negotiation-client

[1655-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1655-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1655]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1656-version-negotiation]
ssl_conf = 1656-version-negotiation-ssl

[1656-version-negotiation-ssl]
server = 1656-version-negotiation-server
client = 1656-version-negotiation-client

[1656-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1656-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1656]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1657-version-negotiation]
ssl_conf = 1657-version-negotiation-ssl

[1657-version-negotiation-ssl]
server = 1657-version-negotiation-server
client = 1657-version-negotiation-client

[1657-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1657-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1657]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1658-version-negotiation]
ssl_conf = 1658-version-negotiation-ssl

[1658-version-negotiation-ssl]
server = 1658-version-negotiation-server
client = 1658-version-negotiation-client

[1658-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1658-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1658]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1659-version-negotiation]
ssl_conf = 1659-version-negotiation-ssl

[1659-version-negotiation-ssl]
server = 1659-version-negotiation-server
client = 1659-version-negotiation-client

[1659-version-negotiation-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1659-version-negotiation-client]
CipherString = DEFAULT
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1659]
ExpectedProtocol = TLSv1.3
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1660-ciphersuite-sanity-check-client]
ssl_conf = 1660-ciphersuite-sanity-check-client-ssl

[1660-ciphersuite-sanity-check-client-ssl]
server = 1660-ciphersuite-sanity-check-client-server
client = 1660-ciphersuite-sanity-check-client-client

[1660-ciphersuite-sanity-check-client-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1660-ciphersuite-sanity-check-client-client]
CipherString = AES128-SHA
Ciphersuites = 
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1660]
ExpectedResult = ClientFail
Serialize = Client


# ===========================================================

[1661-ciphersuite-sanity-check-server]
ssl_conf = 1661-ciphersuite-sanity-check-server-ssl

[1661-ciphersuite-sanity-check-server-ssl]
server = 1661-ciphersuite-sanity-check-server-server
client = 1661-ciphersuite-sanity-check-server-client

[1661-ciphersuite-sanity-check-server-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = AES128-SHA
Ciphersuites = 
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1661-ciphersuite-sanity-check-server-client]
CipherString = AES128-SHA
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1661]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1662-verify-success]
ssl_conf = 1662-verify-success-ssl

[1662-verify-success-ssl]
server = 1662-verify-success-server
client = 1662-verify-success-client

[1662-verify-success-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1662-verify-success-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1662]
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1663-verify-custom-reject]
ssl_conf = 1663-verify-custom-reject-ssl

[1663-verify-custom-reject-ssl]
server = 1663-verify-custom-reject-server
client = 1663-verify-custom-reject-client

[1663-verify-custom-reject-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1663-verify-custom-reject-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1663]
ExpectedClientAlert = HandshakeFailure
ExpectedResult = ClientFail
Serialize = Client
client = 1663-verify-custom-reject-client-extra

[1663-verify-custom-reject-client-extra]
VerifyCallback = RejectAll


# ===========================================================

[1664-verify-custom-allow]
ssl_conf = 1664-verify-custom-allow-ssl

[1664-verify-custom-allow-ssl]
server = 1664-verify-custom-allow-server
client = 1664-verify-custom-allow-client

[1664-verify-custom-allow-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1664-verify-custom-allow-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1664]
ExpectedResult = Success
Serialize = Client
client = 1664-verify-custom-allow-client-extra

[1664-verify-custom-allow-client-extra]
VerifyCallback = AcceptAll


# ===========================================================

[1665-noverify-success]
ssl_conf = 1665-noverify-success-ssl

[1665-noverify-success-ssl]
server = 1665-noverify-success-server
client = 1665-noverify-success-client

[1665-noverify-success-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1665-noverify-success-client]
CipherString = DEFAULT

[test-1665]
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1666-noverify-ignore-custom-reject]
ssl_conf = 1666-noverify-ignore-custom-reject-ssl

[1666-noverify-ignore-custom-reject-ssl]
server = 1666-noverify-ignore-custom-reject-server
client = 1666-noverify-ignore-custom-reject-client

[1666-noverify-ignore-custom-reject-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1666-noverify-ignore-custom-reject-client]
CipherString = DEFAULT

[test-1666]
ExpectedResult = Success
Serialize = Client
client = 1666-noverify-ignore-custom-reject-client-extra

[1666-noverify-ignore-custom-reject-client-extra]
VerifyCallback = RejectAll


# ===========================================================

[1667-noverify-accept-custom-allow]
ssl_conf = 1667-noverify-accept-custom-allow-ssl

[1667-noverify-accept-custom-allow-ssl]
server = 1667-noverify-accept-custom-allow-server
client = 1667-noverify-accept-custom-allow-client

[1667-noverify-accept-custom-allow-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1667-noverify-accept-custom-allow-client]
CipherString = DEFAULT

[test-1667]
ExpectedResult = Success
Serialize = Client
client = 1667-noverify-accept-custom-allow-client-extra

[1667-noverify-accept-custom-allow-client-extra]
VerifyCallback = AcceptAll


# ===========================================================

[1668-verify-fail-no-root]
ssl_conf = 1668-verify-fail-no-root-ssl

[1668-verify-fail-no-root-ssl]
server = 1668-verify-fail-no-root-server
client = 1668-verify-fail-no-root-client

[1668-verify-fail-no-root-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1668-verify-fail-no-root-client]
CipherString = DEFAULT
VerifyMode = Peer

[test-1668]
ExpectedClientAlert = UnknownCA
ExpectedResult = ClientFail
Serialize = Client


# ===========================================================

[1669-verify-custom-success-no-root]
ssl_conf = 1669-verify-custom-success-no-root-ssl

[1669-verify-custom-success-no-root-ssl]
server = 1669-verify-custom-success-no-root-server
client = 1669-verify-custom-success-no-root-client

[1669-verify-custom-success-no-root-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1669-verify-custom-success-no-root-client]
CipherString = DEFAULT
VerifyMode = Peer

[test-1669]
ExpectedResult = Success
Serialize = Client
client = 1669-verify-custom-success-no-root-client-extra

[1669-verify-custom-success-no-root-client-extra]
VerifyCallback = AcceptAll


# ===========================================================

[1670-verify-custom-fail-no-root]
ssl_conf = 1670-verify-custom-fail-no-root-ssl

[1670-verify-custom-fail-no-root-ssl]
server = 1670-verify-custom-fail-no-root-server
client = 1670-verify-custom-fail-no-root-client

[1670-verify-custom-fail-no-root-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1670-verify-custom-fail-no-root-client]
CipherString = DEFAULT
VerifyMode = Peer

[test-1670]
ExpectedClientAlert = HandshakeFailure
ExpectedResult = ClientFail
Serialize = Client
client = 1670-verify-custom-fail-no-root-client-extra

[1670-verify-custom-fail-no-root-client-extra]
VerifyCallback = RejectAll


# ===========================================================

[1671-server-auth-flex]
ssl_conf = 1671-server-auth-flex-ssl

[1671-server-auth-flex-ssl]
server = 1671-server-auth-flex-server
client = 1671-server-auth-flex-client

[1671-server-auth-flex-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1671-server-auth-flex-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1671]
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1672-client-auth-flex-request]
ssl_conf = 1672-client-auth-flex-request-ssl

[1672-client-auth-flex-request-ssl]
server = 1672-client-auth-flex-request-server
client = 1672-client-auth-flex-request-client

[1672-client-auth-flex-request-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem
VerifyMode = Request

[1672-client-auth-flex-request-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1672]
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1673-client-auth-flex-require-fail]
ssl_conf = 1673-client-auth-flex-require-fail-ssl

[1673-client-auth-flex-require-fail-ssl]
server = 1673-client-auth-flex-require-fail-server
client = 1673-client-auth-flex-require-fail-client

[1673-client-auth-flex-require-fail-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/root-cert.pem
VerifyMode = Require

[1673-client-auth-flex-require-fail-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1673]
ExpectedResult = ServerFail
ExpectedServerAlert = CertificateRequired
Serialize = Client


# ===========================================================

[1674-client-auth-flex-require]
ssl_conf = 1674-client-auth-flex-require-ssl

[1674-client-auth-flex-require-ssl]
server = 1674-client-auth-flex-require-server
client = 1674-client-auth-flex-require-client

[1674-client-auth-flex-require-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/root-cert.pem
VerifyMode = Request

[1674-client-auth-flex-require-client]
Certificate = ${ENV::TEST_CERTS_DIR}/ee-client-chain.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/ee-key.pem
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1674]
ExpectedClientCANames = empty
ExpectedClientCertType = RSA
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1675-client-auth-flex-noroot]
ssl_conf = 1675-client-auth-flex-noroot-ssl

[1675-client-auth-flex-noroot-ssl]
server = 1675-client-auth-flex-noroot-server
client = 1675-client-auth-flex-noroot-client

[1675-client-auth-flex-noroot-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem
VerifyMode = Require

[1675-client-auth-flex-noroot-client]
Certificate = ${ENV::TEST_CERTS_DIR}/ee-client-chain.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/ee-key.pem
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1675]
ExpectedResult = ServerFail
ExpectedServerAlert = UnknownCA
Serialize = Client


# ===========================================================

[1676-server-auth-TLSv1]
ssl_conf = 1676-server-auth-TLSv1-ssl

[1676-server-auth-TLSv1-ssl]
server = 1676-server-auth-TLSv1-server
client = 1676-server-auth-TLSv1-client

[1676-server-auth-TLSv1-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1676-server-auth-TLSv1-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1676]
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1677-client-auth-TLSv1-request]
ssl_conf = 1677-client-auth-TLSv1-request-ssl

[1677-client-auth-TLSv1-request-ssl]
server = 1677-client-auth-TLSv1-request-server
client = 1677-client-auth-TLSv1-request-client

[1677-client-auth-TLSv1-request-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem
VerifyMode = Request

[1677-client-auth-TLSv1-request-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1677]
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1678-client-auth-TLSv1-require-fail]
ssl_conf = 1678-client-auth-TLSv1-require-fail-ssl

[1678-client-auth-TLSv1-require-fail-ssl]
server = 1678-client-auth-TLSv1-require-fail-server
client = 1678-client-auth-TLSv1-require-fail-client

[1678-client-auth-TLSv1-require-fail-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/root-cert.pem
VerifyMode = Require

[1678-client-auth-TLSv1-require-fail-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1678]
ExpectedResult = ServerFail
ExpectedServerAlert = HandshakeFailure
Serialize = Client


# ===========================================================

[1679-client-auth-TLSv1-require]
ssl_conf = 1679-client-auth-TLSv1-require-ssl

[1679-client-auth-TLSv1-require-ssl]
server = 1679-client-auth-TLSv1-require-server
client = 1679-client-auth-TLSv1-require-client

[1679-client-auth-TLSv1-require-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/root-cert.pem
VerifyMode = Request

[1679-client-auth-TLSv1-require-client]
Certificate = ${ENV::TEST_CERTS_DIR}/ee-client-chain.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/ee-key.pem
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1679]
ExpectedClientCANames = empty
ExpectedClientCertType = RSA
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1680-client-auth-TLSv1-noroot]
ssl_conf = 1680-client-auth-TLSv1-noroot-ssl

[1680-client-auth-TLSv1-noroot-ssl]
server = 1680-client-auth-TLSv1-noroot-server
client = 1680-client-auth-TLSv1-noroot-client

[1680-client-auth-TLSv1-noroot-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem
VerifyMode = Require

[1680-client-auth-TLSv1-noroot-client]
Certificate = ${ENV::TEST_CERTS_DIR}/ee-client-chain.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
PrivateKey = ${ENV::TEST_CERTS_DIR}/ee-key.pem
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1680]
ExpectedResult = ServerFail
ExpectedServerAlert = UnknownCA
Serialize = Client


# ===========================================================

[1681-server-auth-TLSv1.1]
ssl_conf = 1681-server-auth-TLSv1.1-ssl

[1681-server-auth-TLSv1.1-ssl]
server = 1681-server-auth-TLSv1.1-server
client = 1681-server-auth-TLSv1.1-client

[1681-server-auth-TLSv1.1-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1681-server-auth-TLSv1.1-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1681]
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1682-client-auth-TLSv1.1-request]
ssl_conf = 1682-client-auth-TLSv1.1-request-ssl

[1682-client-auth-TLSv1.1-request-ssl]
server = 1682-client-auth-TLSv1.1-request-server
client = 1682-client-auth-TLSv1.1-request-client

[1682-client-auth-TLSv1.1-request-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem
VerifyMode = Request

[1682-client-auth-TLSv1.1-request-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1682]
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1683-client-auth-TLSv1.1-require-fail]
ssl_conf = 1683-client-auth-TLSv1.1-require-fail-ssl

[1683-client-auth-TLSv1.1-require-fail-ssl]
server = 1683-client-auth-TLSv1.1-require-fail-server
client = 1683-client-auth-TLSv1.1-require-fail-client

[1683-client-auth-TLSv1.1-require-fail-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/root-cert.pem
VerifyMode = Require

[1683-client-auth-TLSv1.1-require-fail-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1683]
ExpectedResult = ServerFail
ExpectedServerAlert = HandshakeFailure
Serialize = Client


# ===========================================================

[1684-client-auth-TLSv1.1-require]
ssl_conf = 1684-client-auth-TLSv1.1-require-ssl

[1684-client-auth-TLSv1.1-require-ssl]
server = 1684-client-auth-TLSv1.1-require-server
client = 1684-client-auth-TLSv1.1-require-client

[1684-client-auth-TLSv1.1-require-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/root-cert.pem
VerifyMode = Request

[1684-client-auth-TLSv1.1-require-client]
Certificate = ${ENV::TEST_CERTS_DIR}/ee-client-chain.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/ee-key.pem
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1684]
ExpectedClientCANames = empty
ExpectedClientCertType = RSA
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1685-client-auth-TLSv1.1-noroot]
ssl_conf = 1685-client-auth-TLSv1.1-noroot-ssl

[1685-client-auth-TLSv1.1-noroot-ssl]
server = 1685-client-auth-TLSv1.1-noroot-server
client = 1685-client-auth-TLSv1.1-noroot-client

[1685-client-auth-TLSv1.1-noroot-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem
VerifyMode = Require

[1685-client-auth-TLSv1.1-noroot-client]
Certificate = ${ENV::TEST_CERTS_DIR}/ee-client-chain.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
PrivateKey = ${ENV::TEST_CERTS_DIR}/ee-key.pem
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1685]
ExpectedResult = ServerFail
ExpectedServerAlert = UnknownCA
Serialize = Client


# ===========================================================

[1686-server-auth-TLSv1.2]
ssl_conf = 1686-server-auth-TLSv1.2-ssl

[1686-server-auth-TLSv1.2-ssl]
server = 1686-server-auth-TLSv1.2-server
client = 1686-server-auth-TLSv1.2-client

[1686-server-auth-TLSv1.2-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1686-server-auth-TLSv1.2-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1686]
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1687-client-auth-TLSv1.2-request]
ssl_conf = 1687-client-auth-TLSv1.2-request-ssl

[1687-client-auth-TLSv1.2-request-ssl]
server = 1687-client-auth-TLSv1.2-request-server
client = 1687-client-auth-TLSv1.2-request-client

[1687-client-auth-TLSv1.2-request-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem
VerifyMode = Request

[1687-client-auth-TLSv1.2-request-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1687]
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1688-client-auth-TLSv1.2-require-fail]
ssl_conf = 1688-client-auth-TLSv1.2-require-fail-ssl

[1688-client-auth-TLSv1.2-require-fail-ssl]
server = 1688-client-auth-TLSv1.2-require-fail-server
client = 1688-client-auth-TLSv1.2-require-fail-client

[1688-client-auth-TLSv1.2-require-fail-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/root-cert.pem
VerifyMode = Require

[1688-client-auth-TLSv1.2-require-fail-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1688]
ExpectedResult = ServerFail
ExpectedServerAlert = HandshakeFailure
Serialize = Client


# ===========================================================

[1689-client-auth-TLSv1.2-require]
ssl_conf = 1689-client-auth-TLSv1.2-require-ssl

[1689-client-auth-TLSv1.2-require-ssl]
server = 1689-client-auth-TLSv1.2-require-server
client = 1689-client-auth-TLSv1.2-require-client

[1689-client-auth-TLSv1.2-require-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
ClientSignatureAlgorithms = SHA256+RSA
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/root-cert.pem
VerifyMode = Request

[1689-client-auth-TLSv1.2-require-client]
Certificate = ${ENV::TEST_CERTS_DIR}/ee-client-chain.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/ee-key.pem
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1689]
ExpectedClientCANames = empty
ExpectedClientCertType = RSA
ExpectedClientSignHash = SHA256
ExpectedClientSignType = RSA
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1690-client-auth-TLSv1.2-noroot]
ssl_conf = 1690-client-auth-TLSv1.2-noroot-ssl

[1690-client-auth-TLSv1.2-noroot-ssl]
server = 1690-client-auth-TLSv1.2-noroot-server
client = 1690-client-auth-TLSv1.2-noroot-client

[1690-client-auth-TLSv1.2-noroot-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem
VerifyMode = Require

[1690-client-auth-TLSv1.2-noroot-client]
Certificate = ${ENV::TEST_CERTS_DIR}/ee-client-chain.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/ee-key.pem
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1690]
ExpectedResult = ServerFail
ExpectedServerAlert = UnknownCA
Serialize = Client


# ===========================================================

[1691-SNI-switch-context]
ssl_conf = 1691-SNI-switch-context-ssl

[1691-SNI-switch-context-ssl]
server = 1691-SNI-switch-context-server
client = 1691-SNI-switch-context-client
server2 = 1691-SNI-switch-context-server

[1691-SNI-switch-context-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1691-SNI-switch-context-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1691]
ExpectedResult = Success
ExpectedServerName = server2
Serialize = Client
server = 1691-SNI-switch-context-server-extra
server2 = 1691-SNI-switch-context-server-extra
client = 1691-SNI-switch-context-client-extra

[1691-SNI-switch-context-server-extra]
ServerNameCallback = IgnoreMismatch

[1691-SNI-switch-context-client-extra]
ServerName = server2


# ===========================================================

[1692-SNI-keep-context]
ssl_conf = 1692-SNI-keep-context-ssl

[1692-SNI-keep-context-ssl]
server = 1692-SNI-keep-context-server
client = 1692-SNI-keep-context-client
server2 = 1692-SNI-keep-context-server

[1692-SNI-keep-context-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1692-SNI-keep-context-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1692]
ExpectedResult = Success
ExpectedServerName = server1
Serialize = Client
server = 1692-SNI-keep-context-server-extra
server2 = 1692-SNI-keep-context-server-extra
client = 1692-SNI-keep-context-client-extra

[1692-SNI-keep-context-server-extra]
ServerNameCallback = IgnoreMismatch

[1692-SNI-keep-context-client-extra]
ServerName = server1


# ===========================================================

[1693-SNI-no-server-support]
ssl_conf = 1693-SNI-no-server-support-ssl

[1693-SNI-no-server-support-ssl]
server = 1693-SNI-no-server-support-server
client = 1693-SNI-no-server-support-client

[1693-SNI-no-server-support-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1693-SNI-no-server-support-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1693]
ExpectedResult = Success
Serialize = Client
client = 1693-SNI-no-server-support-client-extra

[1693-SNI-no-server-support-client-extra]
ServerName = server1


# ===========================================================

[1694-SNI-no-client-support]
ssl_conf = 1694-SNI-no-client-support-ssl

[1694-SNI-no-client-support-ssl]
server = 1694-SNI-no-client-support-server
client = 1694-SNI-no-client-support-client
server2 = 1694-SNI-no-client-support-server

[1694-SNI-no-client-support-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1694-SNI-no-client-support-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1694]
ExpectedResult = Success
ExpectedServerName = server1
Serialize = Client
server = 1694-SNI-no-client-support-server-extra
server2 = 1694-SNI-no-client-support-server-extra

[1694-SNI-no-client-support-server-extra]
ServerNameCallback = IgnoreMismatch


# ===========================================================

[1695-SNI-bad-sni-ignore-mismatch]
ssl_conf = 1695-SNI-bad-sni-ignore-mismatch-ssl

[1695-SNI-bad-sni-ignore-mismatch-ssl]
server = 1695-SNI-bad-sni-ignore-mismatch-server
client = 1695-SNI-bad-sni-ignore-mismatch-client
server2 = 1695-SNI-bad-sni-ignore-mismatch-server

[1695-SNI-bad-sni-ignore-mismatch-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1695-SNI-bad-sni-ignore-mismatch-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1695]
ExpectedResult = Success
ExpectedServerName = server1
Serialize = Client
server = 1695-SNI-bad-sni-ignore-mismatch-server-extra
server2 = 1695-SNI-bad-sni-ignore-mismatch-server-extra
client = 1695-SNI-bad-sni-ignore-mismatch-client-extra

[1695-SNI-bad-sni-ignore-mismatch-server-extra]
ServerNameCallback = IgnoreMismatch

[1695-SNI-bad-sni-ignore-mismatch-client-extra]
ServerName = invalid


# ===========================================================

[1696-SNI-bad-sni-reject-mismatch]
ssl_conf = 1696-SNI-bad-sni-reject-mismatch-ssl

[1696-SNI-bad-sni-reject-mismatch-ssl]
server = 1696-SNI-bad-sni-reject-mismatch-server
client = 1696-SNI-bad-sni-reject-mismatch-client
server2 = 1696-SNI-bad-sni-reject-mismatch-server

[1696-SNI-bad-sni-reject-mismatch-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1696-SNI-bad-sni-reject-mismatch-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1696]
ExpectedResult = ServerFail
ExpectedServerAlert = UnrecognizedName
Serialize = Client
server = 1696-SNI-bad-sni-reject-mismatch-server-extra
server2 = 1696-SNI-bad-sni-reject-mismatch-server-extra
client = 1696-SNI-bad-sni-reject-mismatch-client-extra

[1696-SNI-bad-sni-reject-mismatch-server-extra]
ServerNameCallback = RejectMismatch

[1696-SNI-bad-sni-reject-mismatch-client-extra]
ServerName = invalid


# ===========================================================

[1697-SNI-bad-clienthello-sni-ignore-mismatch]
ssl_conf = 1697-SNI-bad-clienthello-sni-ignore-mismatch-ssl

[1697-SNI-bad-clienthello-sni-ignore-mismatch-ssl]
server = 1697-SNI-bad-clienthello-sni-ignore-mismatch-server
client = 1697-SNI-bad-clienthello-sni-ignore-mismatch-client
server2 = 1697-SNI-bad-clienthello-sni-ignore-mismatch-server

[1697-SNI-bad-clienthello-sni-ignore-mismatch-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1697-SNI-bad-clienthello-sni-ignore-mismatch-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1697]
ExpectedResult = Success
ExpectedServerName = server1
Serialize = Client
server = 1697-SNI-bad-clienthello-sni-ignore-mismatch-server-extra
server2 = 1697-SNI-bad-clienthello-sni-ignore-mismatch-server-extra
client = 1697-SNI-bad-clienthello-sni-ignore-mismatch-client-extra

[1697-SNI-bad-clienthello-sni-ignore-mismatch-server-extra]
ServerNameCallback = ClientHelloIgnoreMismatch

[1697-SNI-bad-clienthello-sni-ignore-mismatch-client-extra]
ServerName = invalid


# ===========================================================

[1698-SNI-bad-clienthello-sni-reject-mismatch]
ssl_conf = 1698-SNI-bad-clienthello-sni-reject-mismatch-ssl

[1698-SNI-bad-clienthello-sni-reject-mismatch-ssl]
server = 1698-SNI-bad-clienthello-sni-reject-mismatch-server
client = 1698-SNI-bad-clienthello-sni-reject-mismatch-client
server2 = 1698-SNI-bad-clienthello-sni-reject-mismatch-server

[1698-SNI-bad-clienthello-sni-reject-mismatch-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1698-SNI-bad-clienthello-sni-reject-mismatch-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1698]
ExpectedResult = ServerFail
ExpectedServerAlert = UnrecognizedName
Serialize = Client
server = 1698-SNI-bad-clienthello-sni-reject-mismatch-server-extra
server2 = 1698-SNI-bad-clienthello-sni-reject-mismatch-server-extra
client = 1698-SNI-bad-clienthello-sni-reject-mismatch-client-extra

[1698-SNI-bad-clienthello-sni-reject-mismatch-server-extra]
ServerNameCallback = ClientHelloRejectMismatch

[1698-SNI-bad-clienthello-sni-reject-mismatch-client-extra]
ServerName = invalid


# ===========================================================

[1699-SNI-clienthello-disable-v12]
ssl_conf = 1699-SNI-clienthello-disable-v12-ssl

[1699-SNI-clienthello-disable-v12-ssl]
server = 1699-SNI-clienthello-disable-v12-server
client = 1699-SNI-clienthello-disable-v12-client
server2 = 1699-SNI-clienthello-disable-v12-server

[1699-SNI-clienthello-disable-v12-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1699-SNI-clienthello-disable-v12-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1699]
ExpectedProtocol = TLSv1.1
ExpectedServerName = server2
Serialize = Client
server = 1699-SNI-clienthello-disable-v12-server-extra
server2 = 1699-SNI-clienthello-disable-v12-server-extra
client = 1699-SNI-clienthello-disable-v12-client-extra

[1699-SNI-clienthello-disable-v12-server-extra]
ServerNameCallback = ClientHelloNoV12

[1699-SNI-clienthello-disable-v12-client-extra]
ServerName = server2


# ===========================================================

[1700-sni-session-ticket]
ssl_conf = 1700-sni-session-ticket-ssl

[1700-sni-session-ticket-ssl]
server = 1700-sni-session-ticket-server
client = 1700-sni-session-ticket-client
server2 = 1700-sni-session-ticket-server2

[1700-sni-session-ticket-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1700-sni-session-ticket-server2]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1700-sni-session-ticket-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
Options = SessionTicket
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1700]
ExpectedResult = Success
Serialize = Client
SessionTicketExpected = No
server = 1700-sni-session-ticket-server-extra
client = 1700-sni-session-ticket-client-extra

[1700-sni-session-ticket-server-extra]
BrokenSessionTicket = Yes

[1700-sni-session-ticket-client-extra]
ServerName = server1


# ===========================================================

[1701-sni-session-ticket]
ssl_conf = 1701-sni-session-ticket-ssl

[1701-sni-session-ticket-ssl]
server = 1701-sni-session-ticket-server
client = 1701-sni-session-ticket-client
server2 = 1701-sni-session-ticket-server2

[1701-sni-session-ticket-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1701-sni-session-ticket-server2]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1701-sni-session-ticket-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
Options = SessionTicket
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1701]
ExpectedResult = Success
ExpectedServerName = server1
Serialize = Client
SessionIdExpected = Yes
SessionTicketExpected = Yes
server = 1701-sni-session-ticket-server-extra
client = 1701-sni-session-ticket-client-extra

[1701-sni-session-ticket-server-extra]
ServerNameCallback = IgnoreMismatch

[1701-sni-session-ticket-client-extra]
ServerName = server1


# ===========================================================

[1702-sni-session-ticket]
ssl_conf = 1702-sni-session-ticket-ssl

[1702-sni-session-ticket-ssl]
server = 1702-sni-session-ticket-server
client = 1702-sni-session-ticket-client
server2 = 1702-sni-session-ticket-server2

[1702-sni-session-ticket-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1702-sni-session-ticket-server2]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1702-sni-session-ticket-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
Options = SessionTicket
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1702]
ExpectedResult = Success
ExpectedServerName = server2
Serialize = Client
SessionIdExpected = Yes
SessionTicketExpected = Yes
server = 1702-sni-session-ticket-server-extra
client = 1702-sni-session-ticket-client-extra

[1702-sni-session-ticket-server-extra]
ServerNameCallback = IgnoreMismatch

[1702-sni-session-ticket-client-extra]
ServerName = server2


# ===========================================================

[1703-sni-session-ticket]
ssl_conf = 1703-sni-session-ticket-ssl

[1703-sni-session-ticket-ssl]
server = 1703-sni-session-ticket-server
client = 1703-sni-session-ticket-client
server2 = 1703-sni-session-ticket-server2

[1703-sni-session-ticket-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1703-sni-session-ticket-server2]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = -SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1703-sni-session-ticket-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
Options = SessionTicket
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1703]
ExpectedResult = Success
ExpectedServerName = server1
Serialize = Client
SessionIdExpected = Yes
SessionTicketExpected = Yes
server = 1703-sni-session-ticket-server-extra
client = 1703-sni-session-ticket-client-extra

[1703-sni-session-ticket-server-extra]
ServerNameCallback = IgnoreMismatch

[1703-sni-session-ticket-client-extra]
ServerName = server1


# ===========================================================

[1704-sni-session-ticket]
ssl_conf = 1704-sni-session-ticket-ssl

[1704-sni-session-ticket-ssl]
server = 1704-sni-session-ticket-server
client = 1704-sni-session-ticket-client
server2 = 1704-sni-session-ticket-server2

[1704-sni-session-ticket-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1704-sni-session-ticket-server2]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = -SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1704-sni-session-ticket-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
Options = SessionTicket
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1704]
ExpectedResult = Success
ExpectedServerName = server2
Serialize = Client
SessionIdExpected = Yes
SessionTicketExpected = No
server = 1704-sni-session-ticket-server-extra
client = 1704-sni-session-ticket-client-extra

[1704-sni-session-ticket-server-extra]
ServerNameCallback = IgnoreMismatch

[1704-sni-session-ticket-client-extra]
ServerName = server2


# ===========================================================

[1705-sni-session-ticket]
ssl_conf = 1705-sni-session-ticket-ssl

[1705-sni-session-ticket-ssl]
server = 1705-sni-session-ticket-server
client = 1705-sni-session-ticket-client
server2 = 1705-sni-session-ticket-server2

[1705-sni-session-ticket-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = -SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1705-sni-session-ticket-server2]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1705-sni-session-ticket-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
Options = SessionTicket
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1705]
ExpectedResult = Success
ExpectedServerName = server1
Serialize = Client
SessionIdExpected = Yes
SessionTicketExpected = No
server = 1705-sni-session-ticket-server-extra
client = 1705-sni-session-ticket-client-extra

[1705-sni-session-ticket-server-extra]
ServerNameCallback = IgnoreMismatch

[1705-sni-session-ticket-client-extra]
ServerName = server1


# ===========================================================

[1706-sni-session-ticket]
ssl_conf = 1706-sni-session-ticket-ssl

[1706-sni-session-ticket-ssl]
server = 1706-sni-session-ticket-server
client = 1706-sni-session-ticket-client
server2 = 1706-sni-session-ticket-server2

[1706-sni-session-ticket-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = -SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1706-sni-session-ticket-server2]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1706-sni-session-ticket-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
Options = SessionTicket
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1706]
ExpectedResult = Success
ExpectedServerName = server2
Serialize = Client
SessionIdExpected = Yes
SessionTicketExpected = No
server = 1706-sni-session-ticket-server-extra
client = 1706-sni-session-ticket-client-extra

[1706-sni-session-ticket-server-extra]
ServerNameCallback = IgnoreMismatch

[1706-sni-session-ticket-client-extra]
ServerName = server2


# ===========================================================

[1707-sni-session-ticket]
ssl_conf = 1707-sni-session-ticket-ssl

[1707-sni-session-ticket-ssl]
server = 1707-sni-session-ticket-server
client = 1707-sni-session-ticket-client
server2 = 1707-sni-session-ticket-server2

[1707-sni-session-ticket-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = -SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1707-sni-session-ticket-server2]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = -SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1707-sni-session-ticket-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
Options = SessionTicket
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1707]
ExpectedResult = Success
ExpectedServerName = server1
Serialize = Client
SessionIdExpected = Yes
SessionTicketExpected = No
server = 1707-sni-session-ticket-server-extra
client = 1707-sni-session-ticket-client-extra

[1707-sni-session-ticket-server-extra]
ServerNameCallback = IgnoreMismatch

[1707-sni-session-ticket-client-extra]
ServerName = server1


# ===========================================================

[1708-sni-session-ticket]
ssl_conf = 1708-sni-session-ticket-ssl

[1708-sni-session-ticket-ssl]
server = 1708-sni-session-ticket-server
client = 1708-sni-session-ticket-client
server2 = 1708-sni-session-ticket-server2

[1708-sni-session-ticket-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = -SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1708-sni-session-ticket-server2]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = -SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1708-sni-session-ticket-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
Options = SessionTicket
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1708]
ExpectedResult = Success
ExpectedServerName = server2
Serialize = Client
SessionIdExpected = Yes
SessionTicketExpected = No
server = 1708-sni-session-ticket-server-extra
client = 1708-sni-session-ticket-client-extra

[1708-sni-session-ticket-server-extra]
ServerNameCallback = IgnoreMismatch

[1708-sni-session-ticket-client-extra]
ServerName = server2


# ===========================================================

[1709-sni-session-ticket]
ssl_conf = 1709-sni-session-ticket-ssl

[1709-sni-session-ticket-ssl]
server = 1709-sni-session-ticket-server
client = 1709-sni-session-ticket-client
server2 = 1709-sni-session-ticket-server2

[1709-sni-session-ticket-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1709-sni-session-ticket-server2]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1709-sni-session-ticket-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
Options = -SessionTicket
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1709]
ExpectedResult = Success
ExpectedServerName = server1
Serialize = Client
SessionIdExpected = Yes
SessionTicketExpected = No
server = 1709-sni-session-ticket-server-extra
client = 1709-sni-session-ticket-client-extra

[1709-sni-session-ticket-server-extra]
ServerNameCallback = IgnoreMismatch

[1709-sni-session-ticket-client-extra]
ServerName = server1


# ===========================================================

[1710-sni-session-ticket]
ssl_conf = 1710-sni-session-ticket-ssl

[1710-sni-session-ticket-ssl]
server = 1710-sni-session-ticket-server
client = 1710-sni-session-ticket-client
server2 = 1710-sni-session-ticket-server2

[1710-sni-session-ticket-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1710-sni-session-ticket-server2]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1710-sni-session-ticket-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
Options = -SessionTicket
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1710]
ExpectedResult = Success
ExpectedServerName = server2
Serialize = Client
SessionIdExpected = Yes
SessionTicketExpected = No
server = 1710-sni-session-ticket-server-extra
client = 1710-sni-session-ticket-client-extra

[1710-sni-session-ticket-server-extra]
ServerNameCallback = IgnoreMismatch

[1710-sni-session-ticket-client-extra]
ServerName = server2


# ===========================================================

[1711-sni-session-ticket]
ssl_conf = 1711-sni-session-ticket-ssl

[1711-sni-session-ticket-ssl]
server = 1711-sni-session-ticket-server
client = 1711-sni-session-ticket-client
server2 = 1711-sni-session-ticket-server2

[1711-sni-session-ticket-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1711-sni-session-ticket-server2]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = -SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1711-sni-session-ticket-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
Options = -SessionTicket
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1711]
ExpectedResult = Success
ExpectedServerName = server1
Serialize = Client
SessionIdExpected = Yes
SessionTicketExpected = No
server = 1711-sni-session-ticket-server-extra
client = 1711-sni-session-ticket-client-extra

[1711-sni-session-ticket-server-extra]
ServerNameCallback = IgnoreMismatch

[1711-sni-session-ticket-client-extra]
ServerName = server1


# ===========================================================

[1712-sni-session-ticket]
ssl_conf = 1712-sni-session-ticket-ssl

[1712-sni-session-ticket-ssl]
server = 1712-sni-session-ticket-server
client = 1712-sni-session-ticket-client
server2 = 1712-sni-session-ticket-server2

[1712-sni-session-ticket-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1712-sni-session-ticket-server2]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = -SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1712-sni-session-ticket-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
Options = -SessionTicket
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1712]
ExpectedResult = Success
ExpectedServerName = server2
Serialize = Client
SessionIdExpected = Yes
SessionTicketExpected = No
server = 1712-sni-session-ticket-server-extra
client = 1712-sni-session-ticket-client-extra

[1712-sni-session-ticket-server-extra]
ServerNameCallback = IgnoreMismatch

[1712-sni-session-ticket-client-extra]
ServerName = server2


# ===========================================================

[1713-sni-session-ticket]
ssl_conf = 1713-sni-session-ticket-ssl

[1713-sni-session-ticket-ssl]
server = 1713-sni-session-ticket-server
client = 1713-sni-session-ticket-client
server2 = 1713-sni-session-ticket-server2

[1713-sni-session-ticket-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = -SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1713-sni-session-ticket-server2]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1713-sni-session-ticket-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
Options = -SessionTicket
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1713]
ExpectedResult = Success
ExpectedServerName = server1
Serialize = Client
SessionIdExpected = Yes
SessionTicketExpected = No
server = 1713-sni-session-ticket-server-extra
client = 1713-sni-session-ticket-client-extra

[1713-sni-session-ticket-server-extra]
ServerNameCallback = IgnoreMismatch

[1713-sni-session-ticket-client-extra]
ServerName = server1


# ===========================================================

[1714-sni-session-ticket]
ssl_conf = 1714-sni-session-ticket-ssl

[1714-sni-session-ticket-ssl]
server = 1714-sni-session-ticket-server
client = 1714-sni-session-ticket-client
server2 = 1714-sni-session-ticket-server2

[1714-sni-session-ticket-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = -SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1714-sni-session-ticket-server2]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1714-sni-session-ticket-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
Options = -SessionTicket
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1714]
ExpectedResult = Success
ExpectedServerName = server2
Serialize = Client
SessionIdExpected = Yes
SessionTicketExpected = No
server = 1714-sni-session-ticket-server-extra
client = 1714-sni-session-ticket-client-extra

[1714-sni-session-ticket-server-extra]
ServerNameCallback = IgnoreMismatch

[1714-sni-session-ticket-client-extra]
ServerName = server2


# ===========================================================

[1715-sni-session-ticket]
ssl_conf = 1715-sni-session-ticket-ssl

[1715-sni-session-ticket-ssl]
server = 1715-sni-session-ticket-server
client = 1715-sni-session-ticket-client
server2 = 1715-sni-session-ticket-server2

[1715-sni-session-ticket-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = -SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1715-sni-session-ticket-server2]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = -SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1715-sni-session-ticket-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
Options = -SessionTicket
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1715]
ExpectedResult = Success
ExpectedServerName = server1
Serialize = Client
SessionIdExpected = Yes
SessionTicketExpected = No
server = 1715-sni-session-ticket-server-extra
client = 1715-sni-session-ticket-client-extra

[1715-sni-session-ticket-server-extra]
ServerNameCallback = IgnoreMismatch

[1715-sni-session-ticket-client-extra]
ServerName = server1


# ===========================================================

[1716-sni-session-ticket]
ssl_conf = 1716-sni-session-ticket-ssl

[1716-sni-session-ticket-ssl]
server = 1716-sni-session-ticket-server
client = 1716-sni-session-ticket-client
server2 = 1716-sni-session-ticket-server2

[1716-sni-session-ticket-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = -SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1716-sni-session-ticket-server2]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = -SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1716-sni-session-ticket-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
Options = -SessionTicket
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1716]
ExpectedResult = Success
ExpectedServerName = server2
Serialize = Client
SessionIdExpected = Yes
SessionTicketExpected = No
server = 1716-sni-session-ticket-server-extra
client = 1716-sni-session-ticket-client-extra

[1716-sni-session-ticket-server-extra]
ServerNameCallback = IgnoreMismatch

[1716-sni-session-ticket-client-extra]
ServerName = server2


# ===========================================================

[1717-alpn-simple]
ssl_conf = 1717-alpn-simple-ssl

[1717-alpn-simple-ssl]
server = 1717-alpn-simple-server
client = 1717-alpn-simple-client

[1717-alpn-simple-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1717-alpn-simple-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1717]
ExpectedALPNProtocol = foo
Serialize = Client
server = 1717-alpn-simple-server-extra
client = 1717-alpn-simple-client-extra

[1717-alpn-simple-server-extra]
ALPNProtocols = foo

[1717-alpn-simple-client-extra]
ALPNProtocols = foo


# ===========================================================

[1718-alpn-server-finds-match]
ssl_conf = 1718-alpn-server-finds-match-ssl

[1718-alpn-server-finds-match-ssl]
server = 1718-alpn-server-finds-match-server
client = 1718-alpn-server-finds-match-client

[1718-alpn-server-finds-match-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1718-alpn-server-finds-match-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1718]
ExpectedALPNProtocol = bar
Serialize = Client
server = 1718-alpn-server-finds-match-server-extra
client = 1718-alpn-server-finds-match-client-extra

[1718-alpn-server-finds-match-server-extra]
ALPNProtocols = baz,bar

[1718-alpn-server-finds-match-client-extra]
ALPNProtocols = foo,bar


# ===========================================================

[1719-alpn-server-honours-server-pref]
ssl_conf = 1719-alpn-server-honours-server-pref-ssl

[1719-alpn-server-honours-server-pref-ssl]
server = 1719-alpn-server-honours-server-pref-server
client = 1719-alpn-server-honours-server-pref-client

[1719-alpn-server-honours-server-pref-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1719-alpn-server-honours-server-pref-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1719]
ExpectedALPNProtocol = bar
Serialize = Client
server = 1719-alpn-server-honours-server-pref-server-extra
client = 1719-alpn-server-honours-server-pref-client-extra

[1719-alpn-server-honours-server-pref-server-extra]
ALPNProtocols = bar,foo

[1719-alpn-server-honours-server-pref-client-extra]
ALPNProtocols = foo,bar


# ===========================================================

[1720-alpn-alert-on-mismatch]
ssl_conf = 1720-alpn-alert-on-mismatch-ssl

[1720-alpn-alert-on-mismatch-ssl]
server = 1720-alpn-alert-on-mismatch-server
client = 1720-alpn-alert-on-mismatch-client

[1720-alpn-alert-on-mismatch-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1720-alpn-alert-on-mismatch-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1720]
ExpectedResult = ServerFail
ExpectedServerAlert = NoApplicationProtocol
Serialize = Client
server = 1720-alpn-alert-on-mismatch-server-extra
client = 1720-alpn-alert-on-mismatch-client-extra

[1720-alpn-alert-on-mismatch-server-extra]
ALPNProtocols = baz

[1720-alpn-alert-on-mismatch-client-extra]
ALPNProtocols = foo,bar


# ===========================================================

[1721-alpn-no-server-support]
ssl_conf = 1721-alpn-no-server-support-ssl

[1721-alpn-no-server-support-ssl]
server = 1721-alpn-no-server-support-server
client = 1721-alpn-no-server-support-client

[1721-alpn-no-server-support-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1721-alpn-no-server-support-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1721]
Serialize = Client
client = 1721-alpn-no-server-support-client-extra

[1721-alpn-no-server-support-client-extra]
ALPNProtocols = foo


# ===========================================================

[1722-alpn-no-client-support]
ssl_conf = 1722-alpn-no-client-support-ssl

[1722-alpn-no-client-support-ssl]
server = 1722-alpn-no-client-support-server
client = 1722-alpn-no-client-support-client

[1722-alpn-no-client-support-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1722-alpn-no-client-support-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1722]
Serialize = Client
server = 1722-alpn-no-client-support-server-extra

[1722-alpn-no-client-support-server-extra]
ALPNProtocols = foo


# ===========================================================

[1723-alpn-with-sni-no-context-switch]
ssl_conf = 1723-alpn-with-sni-no-context-switch-ssl

[1723-alpn-with-sni-no-context-switch-ssl]
server = 1723-alpn-with-sni-no-context-switch-server
client = 1723-alpn-with-sni-no-context-switch-client
server2 = 1723-alpn-with-sni-no-context-switch-server2

[1723-alpn-with-sni-no-context-switch-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1723-alpn-with-sni-no-context-switch-server2]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1723-alpn-with-sni-no-context-switch-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1723]
ExpectedALPNProtocol = foo
ExpectedServerName = server1
Serialize = Client
server = 1723-alpn-with-sni-no-context-switch-server-extra
server2 = 1723-alpn-with-sni-no-context-switch-server2-extra
client = 1723-alpn-with-sni-no-context-switch-client-extra

[1723-alpn-with-sni-no-context-switch-server-extra]
ALPNProtocols = foo
ServerNameCallback = IgnoreMismatch

[1723-alpn-with-sni-no-context-switch-server2-extra]
ALPNProtocols = bar

[1723-alpn-with-sni-no-context-switch-client-extra]
ALPNProtocols = foo,bar
ServerName = server1


# ===========================================================

[1724-alpn-with-sni-context-switch]
ssl_conf = 1724-alpn-with-sni-context-switch-ssl

[1724-alpn-with-sni-context-switch-ssl]
server = 1724-alpn-with-sni-context-switch-server
client = 1724-alpn-with-sni-context-switch-client
server2 = 1724-alpn-with-sni-context-switch-server2

[1724-alpn-with-sni-context-switch-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1724-alpn-with-sni-context-switch-server2]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1724-alpn-with-sni-context-switch-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1724]
ExpectedALPNProtocol = bar
ExpectedServerName = server2
Serialize = Client
server = 1724-alpn-with-sni-context-switch-server-extra
server2 = 1724-alpn-with-sni-context-switch-server2-extra
client = 1724-alpn-with-sni-context-switch-client-extra

[1724-alpn-with-sni-context-switch-server-extra]
ALPNProtocols = foo
ServerNameCallback = IgnoreMismatch

[1724-alpn-with-sni-context-switch-server2-extra]
ALPNProtocols = bar

[1724-alpn-with-sni-context-switch-client-extra]
ALPNProtocols = foo,bar
ServerName = server2


# ===========================================================

[1725-alpn-selected-sni-server-supports-alpn]
ssl_conf = 1725-alpn-selected-sni-server-supports-alpn-ssl

[1725-alpn-selected-sni-server-supports-alpn-ssl]
server = 1725-alpn-selected-sni-server-supports-alpn-server
client = 1725-alpn-selected-sni-server-supports-alpn-client
server2 = 1725-alpn-selected-sni-server-supports-alpn-server2

[1725-alpn-selected-sni-server-supports-alpn-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1725-alpn-selected-sni-server-supports-alpn-server2]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1725-alpn-selected-sni-server-supports-alpn-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1725]
ExpectedALPNProtocol = bar
ExpectedServerName = server2
Serialize = Client
server = 1725-alpn-selected-sni-server-supports-alpn-server-extra
server2 = 1725-alpn-selected-sni-server-supports-alpn-server2-extra
client = 1725-alpn-selected-sni-server-supports-alpn-client-extra

[1725-alpn-selected-sni-server-supports-alpn-server-extra]
ServerNameCallback = IgnoreMismatch

[1725-alpn-selected-sni-server-supports-alpn-server2-extra]
ALPNProtocols = bar

[1725-alpn-selected-sni-server-supports-alpn-client-extra]
ALPNProtocols = foo,bar
ServerName = server2


# ===========================================================

[1726-alpn-selected-sni-server-does-not-support-alpn]
ssl_conf = 1726-alpn-selected-sni-server-does-not-support-alpn-ssl

[1726-alpn-selected-sni-server-does-not-support-alpn-ssl]
server = 1726-alpn-selected-sni-server-does-not-support-alpn-server
client = 1726-alpn-selected-sni-server-does-not-support-alpn-client
server2 = 1726-alpn-selected-sni-server-does-not-support-alpn-server2

[1726-alpn-selected-sni-server-does-not-support-alpn-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1726-alpn-selected-sni-server-does-not-support-alpn-server2]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1726-alpn-selected-sni-server-does-not-support-alpn-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1726]
ExpectedServerName = server2
Serialize = Client
server = 1726-alpn-selected-sni-server-does-not-support-alpn-server-extra
client = 1726-alpn-selected-sni-server-does-not-support-alpn-client-extra

[1726-alpn-selected-sni-server-does-not-support-alpn-server-extra]
ALPNProtocols = bar
ServerNameCallback = IgnoreMismatch

[1726-alpn-selected-sni-server-does-not-support-alpn-client-extra]
ALPNProtocols = foo,bar
ServerName = server2


# ===========================================================

[1727-alpn-simple-resumption]
ssl_conf = 1727-alpn-simple-resumption-ssl

[1727-alpn-simple-resumption-ssl]
server = 1727-alpn-simple-resumption-server
client = 1727-alpn-simple-resumption-client
resume-server = 1727-alpn-simple-resumption-server
resume-client = 1727-alpn-simple-resumption-client

[1727-alpn-simple-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1727-alpn-simple-resumption-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1727]
ExpectedALPNProtocol = foo
HandshakeMode = Resume
ResumptionExpected = Yes
Serialize = Client
server = 1727-alpn-simple-resumption-server-extra
resume-server = 1727-alpn-simple-resumption-server-extra
client = 1727-alpn-simple-resumption-client-extra
resume-client = 1727-alpn-simple-resumption-client-extra

[1727-alpn-simple-resumption-server-extra]
ALPNProtocols = foo

[1727-alpn-simple-resumption-client-extra]
ALPNProtocols = foo


# ===========================================================

[1728-alpn-server-switch-resumption]
ssl_conf = 1728-alpn-server-switch-resumption-ssl

[1728-alpn-server-switch-resumption-ssl]
server = 1728-alpn-server-switch-resumption-server
client = 1728-alpn-server-switch-resumption-client
resume-server = 1728-alpn-server-switch-resumption-resume-server
resume-client = 1728-alpn-server-switch-resumption-client

[1728-alpn-server-switch-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1728-alpn-server-switch-resumption-resume-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1728-alpn-server-switch-resumption-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1728]
ExpectedALPNProtocol = baz
HandshakeMode = Resume
ResumptionExpected = Yes
Serialize = Client
server = 1728-alpn-server-switch-resumption-server-extra
resume-server = 1728-alpn-server-switch-resumption-resume-server-extra
client = 1728-alpn-server-switch-resumption-client-extra
resume-client = 1728-alpn-server-switch-resumption-client-extra

[1728-alpn-server-switch-resumption-server-extra]
ALPNProtocols = bar,foo

[1728-alpn-server-switch-resumption-resume-server-extra]
ALPNProtocols = baz,foo

[1728-alpn-server-switch-resumption-client-extra]
ALPNProtocols = foo,bar,baz


# ===========================================================

[1729-alpn-client-switch-resumption]
ssl_conf = 1729-alpn-client-switch-resumption-ssl

[1729-alpn-client-switch-resumption-ssl]
server = 1729-alpn-client-switch-resumption-server
client = 1729-alpn-client-switch-resumption-client
resume-server = 1729-alpn-client-switch-resumption-server
resume-client = 1729-alpn-client-switch-resumption-resume-client

[1729-alpn-client-switch-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1729-alpn-client-switch-resumption-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[1729-alpn-client-switch-resumption-resume-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1729]
ExpectedALPNProtocol = bar
HandshakeMode = Resume
ResumptionExpected = Yes
Serialize = Client
server = 1729-alpn-client-switch-resumption-server-extra
resume-server = 1729-alpn-client-switch-resumption-server-extra
client = 1729-alpn-client-switch-resumption-client-extra
resume-client = 1729-alpn-client-switch-resumption-resume-client-extra

[1729-alpn-client-switch-resumption-server-extra]
ALPNProtocols = foo,bar,baz

[1729-alpn-client-switch-resumption-client-extra]
ALPNProtocols = foo,baz

[1729-alpn-client-switch-resumption-resume-client-extra]
ALPNProtocols = bar,baz


# ===========================================================

[1730-alpn-alert-on-mismatch-resumption]
ssl_conf = 1730-alpn-alert-on-mismatch-resumption-ssl

[1730-alpn-alert-on-mismatch-resumption-ssl]
server = 1730-alpn-alert-on-mismatch-resumption-server
client = 1730-alpn-alert-on-mismatch-resumption-client
resume-server = 1730-alpn-alert-on-mismatch-resumption-resume-server
resume-client = 1730-alpn-alert-on-mismatch-resumption-client

[1730-alpn-alert-on-mismatch-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1730-alpn-alert-on-mismatch-resumption-resume-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1730-alpn-alert-on-mismatch-resumption-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1730]
ExpectedResult = ServerFail
ExpectedServerAlert = NoApplicationProtocol
HandshakeMode = Resume
Serialize = Client
server = 1730-alpn-alert-on-mismatch-resumption-server-extra
resume-server = 1730-alpn-alert-on-mismatch-resumption-resume-server-extra
client = 1730-alpn-alert-on-mismatch-resumption-client-extra
resume-client = 1730-alpn-alert-on-mismatch-resumption-client-extra

[1730-alpn-alert-on-mismatch-resumption-server-extra]
ALPNProtocols = bar

[1730-alpn-alert-on-mismatch-resumption-resume-server-extra]
ALPNProtocols = baz

[1730-alpn-alert-on-mismatch-resumption-client-extra]
ALPNProtocols = foo,bar


# ===========================================================

[1731-alpn-no-server-support-resumption]
ssl_conf = 1731-alpn-no-server-support-resumption-ssl

[1731-alpn-no-server-support-resumption-ssl]
server = 1731-alpn-no-server-support-resumption-server
client = 1731-alpn-no-server-support-resumption-client
resume-server = 1731-alpn-no-server-support-resumption-resume-server
resume-client = 1731-alpn-no-server-support-resumption-client

[1731-alpn-no-server-support-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1731-alpn-no-server-support-resumption-resume-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1731-alpn-no-server-support-resumption-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1731]
HandshakeMode = Resume
ResumptionExpected = Yes
Serialize = Client
server = 1731-alpn-no-server-support-resumption-server-extra
client = 1731-alpn-no-server-support-resumption-client-extra
resume-client = 1731-alpn-no-server-support-resumption-client-extra

[1731-alpn-no-server-support-resumption-server-extra]
ALPNProtocols = foo

[1731-alpn-no-server-support-resumption-client-extra]
ALPNProtocols = foo


# ===========================================================

[1732-alpn-no-client-support-resumption]
ssl_conf = 1732-alpn-no-client-support-resumption-ssl

[1732-alpn-no-client-support-resumption-ssl]
server = 1732-alpn-no-client-support-resumption-server
client = 1732-alpn-no-client-support-resumption-client
resume-server = 1732-alpn-no-client-support-resumption-server
resume-client = 1732-alpn-no-client-support-resumption-resume-client

[1732-alpn-no-client-support-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1732-alpn-no-client-support-resumption-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[1732-alpn-no-client-support-resumption-resume-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1732]
HandshakeMode = Resume
ResumptionExpected = Yes
Serialize = Client
server = 1732-alpn-no-client-support-resumption-server-extra
resume-server = 1732-alpn-no-client-support-resumption-server-extra
client = 1732-alpn-no-client-support-resumption-client-extra

[1732-alpn-no-client-support-resumption-server-extra]
ALPNProtocols = foo

[1732-alpn-no-client-support-resumption-client-extra]
ALPNProtocols = foo


# ===========================================================

[1733-resumption]
ssl_conf = 1733-resumption-ssl

[1733-resumption-ssl]
server = 1733-resumption-server
client = 1733-resumption-client
resume-server = 1733-resumption-resume-server
resume-client = 1733-resumption-client

[1733-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1733-resumption-resume-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1733-resumption-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1733]
ExpectedProtocol = TLSv1
HandshakeMode = Resume
ResumptionExpected = Yes
Serialize = Client


# ===========================================================

[1734-resumption]
ssl_conf = 1734-resumption-ssl

[1734-resumption-ssl]
server = 1734-resumption-server
client = 1734-resumption-client
resume-server = 1734-resumption-resume-server
resume-client = 1734-resumption-client

[1734-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
Options = -SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1734-resumption-resume-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
Options = -SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1734-resumption-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1734]
ExpectedProtocol = TLSv1
HandshakeMode = Resume
ResumptionExpected = Yes
Serialize = Client


# ===========================================================

[1735-resumption]
ssl_conf = 1735-resumption-ssl

[1735-resumption-ssl]
server = 1735-resumption-server
client = 1735-resumption-client
resume-server = 1735-resumption-resume-server
resume-client = 1735-resumption-client

[1735-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1735-resumption-resume-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1735-resumption-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1735]
ExpectedProtocol = TLSv1.1
HandshakeMode = Resume
ResumptionExpected = No
Serialize = Client


# ===========================================================

[1736-resumption]
ssl_conf = 1736-resumption-ssl

[1736-resumption-ssl]
server = 1736-resumption-server
client = 1736-resumption-client
resume-server = 1736-resumption-resume-server
resume-client = 1736-resumption-client

[1736-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
Options = -SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1736-resumption-resume-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
Options = -SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1736-resumption-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1736]
ExpectedProtocol = TLSv1.1
HandshakeMode = Resume
ResumptionExpected = No
Serialize = Client


# ===========================================================

[1737-resumption]
ssl_conf = 1737-resumption-ssl

[1737-resumption-ssl]
server = 1737-resumption-server
client = 1737-resumption-client
resume-server = 1737-resumption-resume-server
resume-client = 1737-resumption-client

[1737-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1737-resumption-resume-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1737-resumption-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1737]
ExpectedProtocol = TLSv1.2
HandshakeMode = Resume
ResumptionExpected = No
Serialize = Client


# ===========================================================

[1738-resumption]
ssl_conf = 1738-resumption-ssl

[1738-resumption-ssl]
server = 1738-resumption-server
client = 1738-resumption-client
resume-server = 1738-resumption-resume-server
resume-client = 1738-resumption-client

[1738-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
Options = -SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1738-resumption-resume-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
Options = -SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1738-resumption-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1738]
ExpectedProtocol = TLSv1.2
HandshakeMode = Resume
ResumptionExpected = No
Serialize = Client


# ===========================================================

[1739-resumption]
ssl_conf = 1739-resumption-ssl

[1739-resumption-ssl]
server = 1739-resumption-server
client = 1739-resumption-client
resume-server = 1739-resumption-resume-server
resume-client = 1739-resumption-client

[1739-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1739-resumption-resume-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1739-resumption-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1739]
ExpectedProtocol = TLSv1.3
HandshakeMode = Resume
ResumptionExpected = No
Serialize = Client


# ===========================================================

[1740-resumption]
ssl_conf = 1740-resumption-ssl

[1740-resumption-ssl]
server = 1740-resumption-server
client = 1740-resumption-client
resume-server = 1740-resumption-resume-server
resume-client = 1740-resumption-client

[1740-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
Options = -SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1740-resumption-resume-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
Options = -SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1740-resumption-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1740]
ExpectedProtocol = TLSv1.3
HandshakeMode = Resume
ResumptionExpected = No
Serialize = Client


# ===========================================================

[1741-resumption]
ssl_conf = 1741-resumption-ssl

[1741-resumption-ssl]
server = 1741-resumption-server
client = 1741-resumption-client
resume-server = 1741-resumption-resume-server
resume-client = 1741-resumption-client

[1741-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1741-resumption-resume-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1741-resumption-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1741]
ExpectedProtocol = TLSv1
HandshakeMode = Resume
ResumptionExpected = No
Serialize = Client


# ===========================================================

[1742-resumption]
ssl_conf = 1742-resumption-ssl

[1742-resumption-ssl]
server = 1742-resumption-server
client = 1742-resumption-client
resume-server = 1742-resumption-resume-server
resume-client = 1742-resumption-client

[1742-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
Options = -SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1742-resumption-resume-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
Options = -SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1742-resumption-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1742]
ExpectedProtocol = TLSv1
HandshakeMode = Resume
ResumptionExpected = No
Serialize = Client


# ===========================================================

[1743-resumption]
ssl_conf = 1743-resumption-ssl

[1743-resumption-ssl]
server = 1743-resumption-server
client = 1743-resumption-client
resume-server = 1743-resumption-resume-server
resume-client = 1743-resumption-client

[1743-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1743-resumption-resume-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1743-resumption-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1743]
ExpectedProtocol = TLSv1.1
HandshakeMode = Resume
ResumptionExpected = Yes
Serialize = Client


# ===========================================================

[1744-resumption]
ssl_conf = 1744-resumption-ssl

[1744-resumption-ssl]
server = 1744-resumption-server
client = 1744-resumption-client
resume-server = 1744-resumption-resume-server
resume-client = 1744-resumption-client

[1744-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
Options = -SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1744-resumption-resume-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
Options = -SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1744-resumption-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1744]
ExpectedProtocol = TLSv1.1
HandshakeMode = Resume
ResumptionExpected = Yes
Serialize = Client


# ===========================================================

[1745-resumption]
ssl_conf = 1745-resumption-ssl

[1745-resumption-ssl]
server = 1745-resumption-server
client = 1745-resumption-client
resume-server = 1745-resumption-resume-server
resume-client = 1745-resumption-client

[1745-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1745-resumption-resume-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1745-resumption-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1745]
ExpectedProtocol = TLSv1.2
HandshakeMode = Resume
ResumptionExpected = No
Serialize = Client


# ===========================================================

[1746-resumption]
ssl_conf = 1746-resumption-ssl

[1746-resumption-ssl]
server = 1746-resumption-server
client = 1746-resumption-client
resume-server = 1746-resumption-resume-server
resume-client = 1746-resumption-client

[1746-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
Options = -SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1746-resumption-resume-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
Options = -SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1746-resumption-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1746]
ExpectedProtocol = TLSv1.2
HandshakeMode = Resume
ResumptionExpected = No
Serialize = Client


# ===========================================================

[1747-resumption]
ssl_conf = 1747-resumption-ssl

[1747-resumption-ssl]
server = 1747-resumption-server
client = 1747-resumption-client
resume-server = 1747-resumption-resume-server
resume-client = 1747-resumption-client

[1747-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1747-resumption-resume-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1747-resumption-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1747]
ExpectedProtocol = TLSv1.3
HandshakeMode = Resume
ResumptionExpected = No
Serialize = Client


# ===========================================================

[1748-resumption]
ssl_conf = 1748-resumption-ssl

[1748-resumption-ssl]
server = 1748-resumption-server
client = 1748-resumption-client
resume-server = 1748-resumption-resume-server
resume-client = 1748-resumption-client

[1748-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
Options = -SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1748-resumption-resume-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
Options = -SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1748-resumption-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1748]
ExpectedProtocol = TLSv1.3
HandshakeMode = Resume
ResumptionExpected = No
Serialize = Client


# ===========================================================

[1749-resumption]
ssl_conf = 1749-resumption-ssl

[1749-resumption-ssl]
server = 1749-resumption-server
client = 1749-resumption-client
resume-server = 1749-resumption-resume-server
resume-client = 1749-resumption-client

[1749-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1749-resumption-resume-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1749-resumption-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1749]
ExpectedProtocol = TLSv1
HandshakeMode = Resume
ResumptionExpected = No
Serialize = Client


# ===========================================================

[1750-resumption]
ssl_conf = 1750-resumption-ssl

[1750-resumption-ssl]
server = 1750-resumption-server
client = 1750-resumption-client
resume-server = 1750-resumption-resume-server
resume-client = 1750-resumption-client

[1750-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
Options = -SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1750-resumption-resume-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
Options = -SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1750-resumption-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1750]
ExpectedProtocol = TLSv1
HandshakeMode = Resume
ResumptionExpected = No
Serialize = Client


# ===========================================================

[1751-resumption]
ssl_conf = 1751-resumption-ssl

[1751-resumption-ssl]
server = 1751-resumption-server
client = 1751-resumption-client
resume-server = 1751-resumption-resume-server
resume-client = 1751-resumption-client

[1751-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1751-resumption-resume-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1751-resumption-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1751]
ExpectedProtocol = TLSv1.1
HandshakeMode = Resume
ResumptionExpected = No
Serialize = Client


# ===========================================================

[1752-resumption]
ssl_conf = 1752-resumption-ssl

[1752-resumption-ssl]
server = 1752-resumption-server
client = 1752-resumption-client
resume-server = 1752-resumption-resume-server
resume-client = 1752-resumption-client

[1752-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
Options = -SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1752-resumption-resume-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
Options = -SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1752-resumption-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1752]
ExpectedProtocol = TLSv1.1
HandshakeMode = Resume
ResumptionExpected = No
Serialize = Client


# ===========================================================

[1753-resumption]
ssl_conf = 1753-resumption-ssl

[1753-resumption-ssl]
server = 1753-resumption-server
client = 1753-resumption-client
resume-server = 1753-resumption-resume-server
resume-client = 1753-resumption-client

[1753-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1753-resumption-resume-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1753-resumption-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1753]
ExpectedProtocol = TLSv1.2
HandshakeMode = Resume
ResumptionExpected = Yes
Serialize = Client


# ===========================================================

[1754-resumption]
ssl_conf = 1754-resumption-ssl

[1754-resumption-ssl]
server = 1754-resumption-server
client = 1754-resumption-client
resume-server = 1754-resumption-resume-server
resume-client = 1754-resumption-client

[1754-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
Options = -SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1754-resumption-resume-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
Options = -SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1754-resumption-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1754]
ExpectedProtocol = TLSv1.2
HandshakeMode = Resume
ResumptionExpected = Yes
Serialize = Client


# ===========================================================

[1755-resumption]
ssl_conf = 1755-resumption-ssl

[1755-resumption-ssl]
server = 1755-resumption-server
client = 1755-resumption-client
resume-server = 1755-resumption-resume-server
resume-client = 1755-resumption-client

[1755-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1755-resumption-resume-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1755-resumption-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1755]
ExpectedProtocol = TLSv1.3
HandshakeMode = Resume
ResumptionExpected = No
Serialize = Client


# ===========================================================

[1756-resumption]
ssl_conf = 1756-resumption-ssl

[1756-resumption-ssl]
server = 1756-resumption-server
client = 1756-resumption-client
resume-server = 1756-resumption-resume-server
resume-client = 1756-resumption-client

[1756-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
Options = -SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1756-resumption-resume-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
Options = -SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1756-resumption-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1756]
ExpectedProtocol = TLSv1.3
HandshakeMode = Resume
ResumptionExpected = No
Serialize = Client


# ===========================================================

[1757-resumption]
ssl_conf = 1757-resumption-ssl

[1757-resumption-ssl]
server = 1757-resumption-server
client = 1757-resumption-client
resume-server = 1757-resumption-resume-server
resume-client = 1757-resumption-client

[1757-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1757-resumption-resume-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1757-resumption-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1757]
ExpectedProtocol = TLSv1
HandshakeMode = Resume
ResumptionExpected = No
Serialize = Client


# ===========================================================

[1758-resumption]
ssl_conf = 1758-resumption-ssl

[1758-resumption-ssl]
server = 1758-resumption-server
client = 1758-resumption-client
resume-server = 1758-resumption-resume-server
resume-client = 1758-resumption-client

[1758-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
Options = -SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1758-resumption-resume-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1
Options = -SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1758-resumption-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1758]
ExpectedProtocol = TLSv1
HandshakeMode = Resume
ResumptionExpected = No
Serialize = Client


# ===========================================================

[1759-resumption]
ssl_conf = 1759-resumption-ssl

[1759-resumption-ssl]
server = 1759-resumption-server
client = 1759-resumption-client
resume-server = 1759-resumption-resume-server
resume-client = 1759-resumption-client

[1759-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1759-resumption-resume-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1759-resumption-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1759]
ExpectedProtocol = TLSv1.1
HandshakeMode = Resume
ResumptionExpected = No
Serialize = Client


# ===========================================================

[1760-resumption]
ssl_conf = 1760-resumption-ssl

[1760-resumption-ssl]
server = 1760-resumption-server
client = 1760-resumption-client
resume-server = 1760-resumption-resume-server
resume-client = 1760-resumption-client

[1760-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
Options = -SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1760-resumption-resume-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.1
Options = -SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1760-resumption-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1760]
ExpectedProtocol = TLSv1.1
HandshakeMode = Resume
ResumptionExpected = No
Serialize = Client


# ===========================================================

[1761-resumption]
ssl_conf = 1761-resumption-ssl

[1761-resumption-ssl]
server = 1761-resumption-server
client = 1761-resumption-client
resume-server = 1761-resumption-resume-server
resume-client = 1761-resumption-client

[1761-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1761-resumption-resume-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1761-resumption-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1761]
ExpectedProtocol = TLSv1.2
HandshakeMode = Resume
ResumptionExpected = No
Serialize = Client


# ===========================================================

[1762-resumption]
ssl_conf = 1762-resumption-ssl

[1762-resumption-ssl]
server = 1762-resumption-server
client = 1762-resumption-client
resume-server = 1762-resumption-resume-server
resume-client = 1762-resumption-client

[1762-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
Options = -SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1762-resumption-resume-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
Options = -SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1762-resumption-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1762]
ExpectedProtocol = TLSv1.2
HandshakeMode = Resume
ResumptionExpected = No
Serialize = Client


# ===========================================================

[1763-resumption]
ssl_conf = 1763-resumption-ssl

[1763-resumption-ssl]
server = 1763-resumption-server
client = 1763-resumption-client
resume-server = 1763-resumption-resume-server
resume-client = 1763-resumption-client

[1763-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1763-resumption-resume-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1763-resumption-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1763]
ExpectedProtocol = TLSv1.3
HandshakeMode = Resume
ResumptionExpected = Yes
Serialize = Client


# ===========================================================

[1764-resumption]
ssl_conf = 1764-resumption-ssl

[1764-resumption-ssl]
server = 1764-resumption-server
client = 1764-resumption-client
resume-server = 1764-resumption-resume-server
resume-client = 1764-resumption-client

[1764-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
Options = -SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1764-resumption-resume-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
Options = -SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1764-resumption-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1764]
ExpectedProtocol = TLSv1.3
HandshakeMode = Resume
ResumptionExpected = Yes
Serialize = Client


# ===========================================================

[1765-resumption]
ssl_conf = 1765-resumption-ssl

[1765-resumption-ssl]
server = 1765-resumption-server
client = 1765-resumption-client
resume-server = 1765-resumption-server
resume-client = 1765-resumption-resume-client

[1765-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1765-resumption-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[1765-resumption-resume-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1765]
ExpectedProtocol = TLSv1
HandshakeMode = Resume
ResumptionExpected = Yes
Serialize = Client


# ===========================================================

[1766-resumption]
ssl_conf = 1766-resumption-ssl

[1766-resumption-ssl]
server = 1766-resumption-server
client = 1766-resumption-client
resume-server = 1766-resumption-server
resume-client = 1766-resumption-resume-client

[1766-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = -SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1766-resumption-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[1766-resumption-resume-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1766]
ExpectedProtocol = TLSv1
HandshakeMode = Resume
ResumptionExpected = Yes
Serialize = Client


# ===========================================================

[1767-resumption]
ssl_conf = 1767-resumption-ssl

[1767-resumption-ssl]
server = 1767-resumption-server
client = 1767-resumption-client
resume-server = 1767-resumption-server
resume-client = 1767-resumption-resume-client

[1767-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1767-resumption-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[1767-resumption-resume-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1767]
ExpectedProtocol = TLSv1.1
HandshakeMode = Resume
ResumptionExpected = No
Serialize = Client


# ===========================================================

[1768-resumption]
ssl_conf = 1768-resumption-ssl

[1768-resumption-ssl]
server = 1768-resumption-server
client = 1768-resumption-client
resume-server = 1768-resumption-server
resume-client = 1768-resumption-resume-client

[1768-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = -SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1768-resumption-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[1768-resumption-resume-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1768]
ExpectedProtocol = TLSv1.1
HandshakeMode = Resume
ResumptionExpected = No
Serialize = Client


# ===========================================================

[1769-resumption]
ssl_conf = 1769-resumption-ssl

[1769-resumption-ssl]
server = 1769-resumption-server
client = 1769-resumption-client
resume-server = 1769-resumption-server
resume-client = 1769-resumption-resume-client

[1769-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1769-resumption-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[1769-resumption-resume-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1769]
ExpectedProtocol = TLSv1.2
HandshakeMode = Resume
ResumptionExpected = No
Serialize = Client


# ===========================================================

[1770-resumption]
ssl_conf = 1770-resumption-ssl

[1770-resumption-ssl]
server = 1770-resumption-server
client = 1770-resumption-client
resume-server = 1770-resumption-server
resume-client = 1770-resumption-resume-client

[1770-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = -SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1770-resumption-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[1770-resumption-resume-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1770]
ExpectedProtocol = TLSv1.2
HandshakeMode = Resume
ResumptionExpected = No
Serialize = Client


# ===========================================================

[1771-resumption]
ssl_conf = 1771-resumption-ssl

[1771-resumption-ssl]
server = 1771-resumption-server
client = 1771-resumption-client
resume-server = 1771-resumption-server
resume-client = 1771-resumption-resume-client

[1771-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1771-resumption-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[1771-resumption-resume-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1771]
ExpectedProtocol = TLSv1.3
HandshakeMode = Resume
ResumptionExpected = No
Serialize = Client


# ===========================================================

[1772-resumption]
ssl_conf = 1772-resumption-ssl

[1772-resumption-ssl]
server = 1772-resumption-server
client = 1772-resumption-client
resume-server = 1772-resumption-server
resume-client = 1772-resumption-resume-client

[1772-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = -SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1772-resumption-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
MinProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[1772-resumption-resume-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1772]
ExpectedProtocol = TLSv1.3
HandshakeMode = Resume
ResumptionExpected = No
Serialize = Client


# ===========================================================

[1773-resumption]
ssl_conf = 1773-resumption-ssl

[1773-resumption-ssl]
server = 1773-resumption-server
client = 1773-resumption-client
resume-server = 1773-resumption-server
resume-client = 1773-resumption-resume-client

[1773-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1773-resumption-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[1773-resumption-resume-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1773]
ExpectedProtocol = TLSv1
HandshakeMode = Resume
ResumptionExpected = No
Serialize = Client


# ===========================================================

[1774-resumption]
ssl_conf = 1774-resumption-ssl

[1774-resumption-ssl]
server = 1774-resumption-server
client = 1774-resumption-client
resume-server = 1774-resumption-server
resume-client = 1774-resumption-resume-client

[1774-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = -SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1774-resumption-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[1774-resumption-resume-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1774]
ExpectedProtocol = TLSv1
HandshakeMode = Resume
ResumptionExpected = No
Serialize = Client


# ===========================================================

[1775-resumption]
ssl_conf = 1775-resumption-ssl

[1775-resumption-ssl]
server = 1775-resumption-server
client = 1775-resumption-client
resume-server = 1775-resumption-server
resume-client = 1775-resumption-resume-client

[1775-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1775-resumption-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[1775-resumption-resume-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1775]
ExpectedProtocol = TLSv1.1
HandshakeMode = Resume
ResumptionExpected = Yes
Serialize = Client


# ===========================================================

[1776-resumption]
ssl_conf = 1776-resumption-ssl

[1776-resumption-ssl]
server = 1776-resumption-server
client = 1776-resumption-client
resume-server = 1776-resumption-server
resume-client = 1776-resumption-resume-client

[1776-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = -SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1776-resumption-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[1776-resumption-resume-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1776]
ExpectedProtocol = TLSv1.1
HandshakeMode = Resume
ResumptionExpected = Yes
Serialize = Client


# ===========================================================

[1777-resumption]
ssl_conf = 1777-resumption-ssl

[1777-resumption-ssl]
server = 1777-resumption-server
client = 1777-resumption-client
resume-server = 1777-resumption-server
resume-client = 1777-resumption-resume-client

[1777-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1777-resumption-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[1777-resumption-resume-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1777]
ExpectedProtocol = TLSv1.2
HandshakeMode = Resume
ResumptionExpected = No
Serialize = Client


# ===========================================================

[1778-resumption]
ssl_conf = 1778-resumption-ssl

[1778-resumption-ssl]
server = 1778-resumption-server
client = 1778-resumption-client
resume-server = 1778-resumption-server
resume-client = 1778-resumption-resume-client

[1778-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = -SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1778-resumption-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[1778-resumption-resume-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1778]
ExpectedProtocol = TLSv1.2
HandshakeMode = Resume
ResumptionExpected = No
Serialize = Client


# ===========================================================

[1779-resumption]
ssl_conf = 1779-resumption-ssl

[1779-resumption-ssl]
server = 1779-resumption-server
client = 1779-resumption-client
resume-server = 1779-resumption-server
resume-client = 1779-resumption-resume-client

[1779-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1779-resumption-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[1779-resumption-resume-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1779]
ExpectedProtocol = TLSv1.3
HandshakeMode = Resume
ResumptionExpected = No
Serialize = Client


# ===========================================================

[1780-resumption]
ssl_conf = 1780-resumption-ssl

[1780-resumption-ssl]
server = 1780-resumption-server
client = 1780-resumption-client
resume-server = 1780-resumption-server
resume-client = 1780-resumption-resume-client

[1780-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = -SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1780-resumption-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
MinProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[1780-resumption-resume-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1780]
ExpectedProtocol = TLSv1.3
HandshakeMode = Resume
ResumptionExpected = No
Serialize = Client


# ===========================================================

[1781-resumption]
ssl_conf = 1781-resumption-ssl

[1781-resumption-ssl]
server = 1781-resumption-server
client = 1781-resumption-client
resume-server = 1781-resumption-server
resume-client = 1781-resumption-resume-client

[1781-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1781-resumption-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[1781-resumption-resume-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1781]
ExpectedProtocol = TLSv1
HandshakeMode = Resume
ResumptionExpected = No
Serialize = Client


# ===========================================================

[1782-resumption]
ssl_conf = 1782-resumption-ssl

[1782-resumption-ssl]
server = 1782-resumption-server
client = 1782-resumption-client
resume-server = 1782-resumption-server
resume-client = 1782-resumption-resume-client

[1782-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = -SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1782-resumption-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[1782-resumption-resume-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1782]
ExpectedProtocol = TLSv1
HandshakeMode = Resume
ResumptionExpected = No
Serialize = Client


# ===========================================================

[1783-resumption]
ssl_conf = 1783-resumption-ssl

[1783-resumption-ssl]
server = 1783-resumption-server
client = 1783-resumption-client
resume-server = 1783-resumption-server
resume-client = 1783-resumption-resume-client

[1783-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1783-resumption-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[1783-resumption-resume-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1783]
ExpectedProtocol = TLSv1.1
HandshakeMode = Resume
ResumptionExpected = No
Serialize = Client


# ===========================================================

[1784-resumption]
ssl_conf = 1784-resumption-ssl

[1784-resumption-ssl]
server = 1784-resumption-server
client = 1784-resumption-client
resume-server = 1784-resumption-server
resume-client = 1784-resumption-resume-client

[1784-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = -SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1784-resumption-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[1784-resumption-resume-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1784]
ExpectedProtocol = TLSv1.1
HandshakeMode = Resume
ResumptionExpected = No
Serialize = Client


# ===========================================================

[1785-resumption]
ssl_conf = 1785-resumption-ssl

[1785-resumption-ssl]
server = 1785-resumption-server
client = 1785-resumption-client
resume-server = 1785-resumption-server
resume-client = 1785-resumption-resume-client

[1785-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1785-resumption-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[1785-resumption-resume-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1785]
ExpectedProtocol = TLSv1.2
HandshakeMode = Resume
ResumptionExpected = Yes
Serialize = Client


# ===========================================================

[1786-resumption]
ssl_conf = 1786-resumption-ssl

[1786-resumption-ssl]
server = 1786-resumption-server
client = 1786-resumption-client
resume-server = 1786-resumption-server
resume-client = 1786-resumption-resume-client

[1786-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = -SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1786-resumption-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[1786-resumption-resume-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1786]
ExpectedProtocol = TLSv1.2
HandshakeMode = Resume
ResumptionExpected = Yes
Serialize = Client


# ===========================================================

[1787-resumption]
ssl_conf = 1787-resumption-ssl

[1787-resumption-ssl]
server = 1787-resumption-server
client = 1787-resumption-client
resume-server = 1787-resumption-server
resume-client = 1787-resumption-resume-client

[1787-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1787-resumption-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[1787-resumption-resume-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1787]
ExpectedProtocol = TLSv1.3
HandshakeMode = Resume
ResumptionExpected = No
Serialize = Client


# ===========================================================

[1788-resumption]
ssl_conf = 1788-resumption-ssl

[1788-resumption-ssl]
server = 1788-resumption-server
client = 1788-resumption-client
resume-server = 1788-resumption-server
resume-client = 1788-resumption-resume-client

[1788-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = -SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1788-resumption-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[1788-resumption-resume-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1788]
ExpectedProtocol = TLSv1.3
HandshakeMode = Resume
ResumptionExpected = No
Serialize = Client


# ===========================================================

[1789-resumption]
ssl_conf = 1789-resumption-ssl

[1789-resumption-ssl]
server = 1789-resumption-server
client = 1789-resumption-client
resume-server = 1789-resumption-server
resume-client = 1789-resumption-resume-client

[1789-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1789-resumption-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[1789-resumption-resume-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1789]
ExpectedProtocol = TLSv1
HandshakeMode = Resume
ResumptionExpected = No
Serialize = Client


# ===========================================================

[1790-resumption]
ssl_conf = 1790-resumption-ssl

[1790-resumption-ssl]
server = 1790-resumption-server
client = 1790-resumption-client
resume-server = 1790-resumption-server
resume-client = 1790-resumption-resume-client

[1790-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = -SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1790-resumption-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[1790-resumption-resume-client]
CipherString = DEFAULT
MaxProtocol = TLSv1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1790]
ExpectedProtocol = TLSv1
HandshakeMode = Resume
ResumptionExpected = No
Serialize = Client


# ===========================================================

[1791-resumption]
ssl_conf = 1791-resumption-ssl

[1791-resumption-ssl]
server = 1791-resumption-server
client = 1791-resumption-client
resume-server = 1791-resumption-server
resume-client = 1791-resumption-resume-client

[1791-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1791-resumption-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[1791-resumption-resume-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1791]
ExpectedProtocol = TLSv1.1
HandshakeMode = Resume
ResumptionExpected = No
Serialize = Client


# ===========================================================

[1792-resumption]
ssl_conf = 1792-resumption-ssl

[1792-resumption-ssl]
server = 1792-resumption-server
client = 1792-resumption-client
resume-server = 1792-resumption-server
resume-client = 1792-resumption-resume-client

[1792-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = -SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1792-resumption-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[1792-resumption-resume-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1792]
ExpectedProtocol = TLSv1.1
HandshakeMode = Resume
ResumptionExpected = No
Serialize = Client


# ===========================================================

[1793-resumption]
ssl_conf = 1793-resumption-ssl

[1793-resumption-ssl]
server = 1793-resumption-server
client = 1793-resumption-client
resume-server = 1793-resumption-server
resume-client = 1793-resumption-resume-client

[1793-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1793-resumption-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[1793-resumption-resume-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1793]
ExpectedProtocol = TLSv1.2
HandshakeMode = Resume
ResumptionExpected = No
Serialize = Client


# ===========================================================

[1794-resumption]
ssl_conf = 1794-resumption-ssl

[1794-resumption-ssl]
server = 1794-resumption-server
client = 1794-resumption-client
resume-server = 1794-resumption-server
resume-client = 1794-resumption-resume-client

[1794-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = -SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1794-resumption-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[1794-resumption-resume-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1794]
ExpectedProtocol = TLSv1.2
HandshakeMode = Resume
ResumptionExpected = No
Serialize = Client


# ===========================================================

[1795-resumption]
ssl_conf = 1795-resumption-ssl

[1795-resumption-ssl]
server = 1795-resumption-server
client = 1795-resumption-client
resume-server = 1795-resumption-server
resume-client = 1795-resumption-resume-client

[1795-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1795-resumption-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[1795-resumption-resume-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1795]
ExpectedProtocol = TLSv1.3
HandshakeMode = Resume
ResumptionExpected = Yes
Serialize = Client


# ===========================================================

[1796-resumption]
ssl_conf = 1796-resumption-ssl

[1796-resumption-ssl]
server = 1796-resumption-server
client = 1796-resumption-client
resume-server = 1796-resumption-server
resume-client = 1796-resumption-resume-client

[1796-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = -SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1796-resumption-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[1796-resumption-resume-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1796]
ExpectedProtocol = TLSv1.3
HandshakeMode = Resume
ResumptionExpected = Yes
Serialize = Client


# ===========================================================

[1797-resumption-with-hrr]
ssl_conf = 1797-resumption-with-hrr-ssl

[1797-resumption-with-hrr-ssl]
server = 1797-resumption-with-hrr-server
client = 1797-resumption-with-hrr-client
resume-server = 1797-resumption-with-hrr-server
resume-client = 1797-resumption-with-hrr-resume-client

[1797-resumption-with-hrr-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Curves = P-256
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1797-resumption-with-hrr-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[1797-resumption-with-hrr-resume-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1797]
ExpectedProtocol = TLSv1.3
HandshakeMode = Resume
Method = TLS
ResumptionExpected = Yes
Serialize = Client


# ===========================================================

[1798-ct-permissive-without-scts]
ssl_conf = 1798-ct-permissive-without-scts-ssl

[1798-ct-permissive-without-scts-ssl]
server = 1798-ct-permissive-without-scts-server
client = 1798-ct-permissive-without-scts-client

[1798-ct-permissive-without-scts-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1798-ct-permissive-without-scts-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1798]
ExpectedResult = Success
Serialize = Client
client = 1798-ct-permissive-without-scts-client-extra

[1798-ct-permissive-without-scts-client-extra]
CTValidation = Permissive


# ===========================================================

[1799-ct-permissive-with-scts]
ssl_conf = 1799-ct-permissive-with-scts-ssl

[1799-ct-permissive-with-scts-ssl]
server = 1799-ct-permissive-with-scts-server
client = 1799-ct-permissive-with-scts-client

[1799-ct-permissive-with-scts-server]
Certificate = ${ENV::TEST_CERTS_DIR}/embeddedSCTs1.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/embeddedSCTs1-key.pem

[1799-ct-permissive-with-scts-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/embeddedSCTs1_issuer.pem
VerifyMode = Peer

[test-1799]
ExpectedResult = Success
Serialize = Client
client = 1799-ct-permissive-with-scts-client-extra

[1799-ct-permissive-with-scts-client-extra]
CTValidation = Permissive


# ===========================================================

[1800-ct-strict-without-scts]
ssl_conf = 1800-ct-strict-without-scts-ssl

[1800-ct-strict-without-scts-ssl]
server = 1800-ct-strict-without-scts-server
client = 1800-ct-strict-without-scts-client

[1800-ct-strict-without-scts-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1800-ct-strict-without-scts-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1800]
ExpectedClientAlert = HandshakeFailure
ExpectedResult = ClientFail
Serialize = Client
client = 1800-ct-strict-without-scts-client-extra

[1800-ct-strict-without-scts-client-extra]
CTValidation = Strict


# ===========================================================

[1801-ct-strict-with-scts]
ssl_conf = 1801-ct-strict-with-scts-ssl

[1801-ct-strict-with-scts-ssl]
server = 1801-ct-strict-with-scts-server
client = 1801-ct-strict-with-scts-client

[1801-ct-strict-with-scts-server]
Certificate = ${ENV::TEST_CERTS_DIR}/embeddedSCTs1.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/embeddedSCTs1-key.pem

[1801-ct-strict-with-scts-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/embeddedSCTs1_issuer.pem
VerifyMode = Peer

[test-1801]
ExpectedResult = Success
Serialize = Client
client = 1801-ct-strict-with-scts-client-extra

[1801-ct-strict-with-scts-client-extra]
CTValidation = Strict


# ===========================================================

[1802-ct-permissive-resumption]
ssl_conf = 1802-ct-permissive-resumption-ssl

[1802-ct-permissive-resumption-ssl]
server = 1802-ct-permissive-resumption-server
client = 1802-ct-permissive-resumption-client
resume-server = 1802-ct-permissive-resumption-server
resume-client = 1802-ct-permissive-resumption-client

[1802-ct-permissive-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/embeddedSCTs1.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/embeddedSCTs1-key.pem

[1802-ct-permissive-resumption-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/embeddedSCTs1_issuer.pem
VerifyMode = Peer

[test-1802]
ExpectedResult = Success
HandshakeMode = Resume
ResumptionExpected = Yes
Serialize = Client
client = 1802-ct-permissive-resumption-client-extra
resume-client = 1802-ct-permissive-resumption-client-extra

[1802-ct-permissive-resumption-client-extra]
CTValidation = Permissive


# ===========================================================

[1803-ct-strict-resumption]
ssl_conf = 1803-ct-strict-resumption-ssl

[1803-ct-strict-resumption-ssl]
server = 1803-ct-strict-resumption-server
client = 1803-ct-strict-resumption-client
resume-server = 1803-ct-strict-resumption-server
resume-client = 1803-ct-strict-resumption-resume-client

[1803-ct-strict-resumption-server]
Certificate = ${ENV::TEST_CERTS_DIR}/embeddedSCTs1.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/embeddedSCTs1-key.pem

[1803-ct-strict-resumption-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/embeddedSCTs1_issuer.pem
VerifyMode = Peer

[1803-ct-strict-resumption-resume-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1803]
ExpectedResult = Success
HandshakeMode = Resume
ResumptionExpected = Yes
Serialize = Client
client = 1803-ct-strict-resumption-client-extra
resume-client = 1803-ct-strict-resumption-resume-client-extra

[1803-ct-strict-resumption-client-extra]
CTValidation = Strict

[1803-ct-strict-resumption-resume-client-extra]
CTValidation = Strict


# ===========================================================

[1804-one-fragment-minus-app-data]
ssl_conf = 1804-one-fragment-minus-app-data-ssl

[1804-one-fragment-minus-app-data-ssl]
server = 1804-one-fragment-minus-app-data-server
client = 1804-one-fragment-minus-app-data-client

[1804-one-fragment-minus-app-data-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1804-one-fragment-minus-app-data-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1804]
ApplicationData = 511
Serialize = Client


# ===========================================================

[1805-one-fragment-app-data]
ssl_conf = 1805-one-fragment-app-data-ssl

[1805-one-fragment-app-data-ssl]
server = 1805-one-fragment-app-data-server
client = 1805-one-fragment-app-data-client

[1805-one-fragment-app-data-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1805-one-fragment-app-data-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1805]
ApplicationData = 512
Serialize = Client


# ===========================================================

[1806-one-fragment-plus-app-data]
ssl_conf = 1806-one-fragment-plus-app-data-ssl

[1806-one-fragment-plus-app-data-ssl]
server = 1806-one-fragment-plus-app-data-server
client = 1806-one-fragment-plus-app-data-client

[1806-one-fragment-plus-app-data-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1806-one-fragment-plus-app-data-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1806]
ApplicationData = 513
Serialize = Client


# ===========================================================

[1807-small-app-data]
ssl_conf = 1807-small-app-data-ssl

[1807-small-app-data-ssl]
server = 1807-small-app-data-server
client = 1807-small-app-data-client

[1807-small-app-data-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1807-small-app-data-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1807]
ApplicationData = 4097
Serialize = Client


# ===========================================================

[1808-small-app-data-large-fragment-size]
ssl_conf = 1808-small-app-data-large-fragment-size-ssl

[1808-small-app-data-large-fragment-size-ssl]
server = 1808-small-app-data-large-fragment-size-server
client = 1808-small-app-data-large-fragment-size-client

[1808-small-app-data-large-fragment-size-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1808-small-app-data-large-fragment-size-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1808]
ApplicationData = 4097
MaxFragmentSize = 16384
Serialize = Client


# ===========================================================

[1809-medium-app-data]
ssl_conf = 1809-medium-app-data-ssl

[1809-medium-app-data-ssl]
server = 1809-medium-app-data-server
client = 1809-medium-app-data-client

[1809-medium-app-data-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1809-medium-app-data-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1809]
ApplicationData = 32775
Serialize = Client


# ===========================================================

[1810-medium-plus-app-data]
ssl_conf = 1810-medium-plus-app-data-ssl

[1810-medium-plus-app-data-ssl]
server = 1810-medium-plus-app-data-server
client = 1810-medium-plus-app-data-client

[1810-medium-plus-app-data-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1810-medium-plus-app-data-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1810]
ApplicationData = 131069
Serialize = Client


# ===========================================================

[1811-large-app-data]
ssl_conf = 1811-large-app-data-ssl

[1811-large-app-data-ssl]
server = 1811-large-app-data-server
client = 1811-large-app-data-client

[1811-large-app-data-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1811-large-app-data-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1811]
ApplicationData = 1048576
Serialize = Client


# ===========================================================

[1812-large-app-data-large-fragment-size]
ssl_conf = 1812-large-app-data-large-fragment-size-ssl

[1812-large-app-data-large-fragment-size-ssl]
server = 1812-large-app-data-large-fragment-size-server
client = 1812-large-app-data-large-fragment-size-client

[1812-large-app-data-large-fragment-size-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1812-large-app-data-large-fragment-size-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1812]
ApplicationData = 1048576
MaxFragmentSize = 16384
Serialize = Client


# ===========================================================

[1813-large-app-data-odd-fragment-size]
ssl_conf = 1813-large-app-data-odd-fragment-size-ssl

[1813-large-app-data-odd-fragment-size-ssl]
server = 1813-large-app-data-odd-fragment-size-server
client = 1813-large-app-data-odd-fragment-size-client

[1813-large-app-data-odd-fragment-size-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1813-large-app-data-odd-fragment-size-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1813]
ApplicationData = 1048576
MaxFragmentSize = 5115
Serialize = Client


# ===========================================================

[1814-large-app-data-aes-sha1-multibuffer]
ssl_conf = 1814-large-app-data-aes-sha1-multibuffer-ssl

[1814-large-app-data-aes-sha1-multibuffer-ssl]
server = 1814-large-app-data-aes-sha1-multibuffer-server
client = 1814-large-app-data-aes-sha1-multibuffer-client

[1814-large-app-data-aes-sha1-multibuffer-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1814-large-app-data-aes-sha1-multibuffer-client]
CipherString = AES128-SHA
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1814]
ApplicationData = 1048576
MaxFragmentSize = 4096
Serialize = Client


# ===========================================================

[1815-large-app-data-aes-sha2-multibuffer]
ssl_conf = 1815-large-app-data-aes-sha2-multibuffer-ssl

[1815-large-app-data-aes-sha2-multibuffer-ssl]
server = 1815-large-app-data-aes-sha2-multibuffer-server
client = 1815-large-app-data-aes-sha2-multibuffer-client

[1815-large-app-data-aes-sha2-multibuffer-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1815-large-app-data-aes-sha2-multibuffer-client]
CipherString = AES128-SHA256
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1815]
ApplicationData = 1048576
MaxFragmentSize = 4096
Serialize = Client


# ===========================================================

[1816-large-app-data-aes-sha1-multibuffer-odd-fragment]
ssl_conf = 1816-large-app-data-aes-sha1-multibuffer-odd-fragment-ssl

[1816-large-app-data-aes-sha1-multibuffer-odd-fragment-ssl]
server = 1816-large-app-data-aes-sha1-multibuffer-odd-fragment-server
client = 1816-large-app-data-aes-sha1-multibuffer-odd-fragment-client

[1816-large-app-data-aes-sha1-multibuffer-odd-fragment-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1816-large-app-data-aes-sha1-multibuffer-odd-fragment-client]
CipherString = AES128-SHA
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1816]
ApplicationData = 1048579
MaxFragmentSize = 5115
Serialize = Client


# ===========================================================

[1817-large-app-data-aes-sha2-multibuffer-odd-fragment]
ssl_conf = 1817-large-app-data-aes-sha2-multibuffer-odd-fragment-ssl

[1817-large-app-data-aes-sha2-multibuffer-odd-fragment-ssl]
server = 1817-large-app-data-aes-sha2-multibuffer-odd-fragment-server
client = 1817-large-app-data-aes-sha2-multibuffer-odd-fragment-client

[1817-large-app-data-aes-sha2-multibuffer-odd-fragment-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1817-large-app-data-aes-sha2-multibuffer-odd-fragment-client]
CipherString = AES128-SHA256
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1817]
ApplicationData = 1048573
MaxFragmentSize = 5125
Serialize = Client


# ===========================================================

[1818-small-app-data-aes-sha1-multibuffer]
ssl_conf = 1818-small-app-data-aes-sha1-multibuffer-ssl

[1818-small-app-data-aes-sha1-multibuffer-ssl]
server = 1818-small-app-data-aes-sha1-multibuffer-server
client = 1818-small-app-data-aes-sha1-multibuffer-client

[1818-small-app-data-aes-sha1-multibuffer-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1818-small-app-data-aes-sha1-multibuffer-client]
CipherString = AES128-SHA
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1818]
ApplicationData = 4096
MaxFragmentSize = 4096
Serialize = Client


# ===========================================================

[1819-small-app-data-aes-sha2-multibuffer]
ssl_conf = 1819-small-app-data-aes-sha2-multibuffer-ssl

[1819-small-app-data-aes-sha2-multibuffer-ssl]
server = 1819-small-app-data-aes-sha2-multibuffer-server
client = 1819-small-app-data-aes-sha2-multibuffer-client

[1819-small-app-data-aes-sha2-multibuffer-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1819-small-app-data-aes-sha2-multibuffer-client]
CipherString = AES128-SHA256
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1819]
ApplicationData = 4096
MaxFragmentSize = 4096
Serialize = Client


# ===========================================================

[1820-Maximum Fragment Len extension set to 1024 w. FragmentSize disabled]
ssl_conf = 1820-Maximum Fragment Len extension set to 1024 w. FragmentSize disabled-ssl

[1820-Maximum Fragment Len extension set to 1024 w. FragmentSize disabled-ssl]
server = 1820-Maximum Fragment Len extension set to 1024 w. FragmentSize disabled-server
client = 1820-Maximum Fragment Len extension set to 1024 w. FragmentSize disabled-client

[1820-Maximum Fragment Len extension set to 1024 w. FragmentSize disabled-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1820-Maximum Fragment Len extension set to 1024 w. FragmentSize disabled-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1820]
ApplicationData = 3072
MaxFragmentSize = 16384
Serialize = Client
client = 1820-Maximum Fragment Len extension set to 1024 w. FragmentSize disabled-client-extra

[1820-Maximum Fragment Len extension set to 1024 w. FragmentSize disabled-client-extra]
MaxFragmentLenExt = 1024


# ===========================================================

[1821-Maximum Fragment Len extension equal FragmentSize to 2048]
ssl_conf = 1821-Maximum Fragment Len extension equal FragmentSize to 2048-ssl

[1821-Maximum Fragment Len extension equal FragmentSize to 2048-ssl]
server = 1821-Maximum Fragment Len extension equal FragmentSize to 2048-server
client = 1821-Maximum Fragment Len extension equal FragmentSize to 2048-client

[1821-Maximum Fragment Len extension equal FragmentSize to 2048-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1821-Maximum Fragment Len extension equal FragmentSize to 2048-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1821]
ApplicationData = 3072
MaxFragmentSize = 2048
Serialize = Client
client = 1821-Maximum Fragment Len extension equal FragmentSize to 2048-client-extra

[1821-Maximum Fragment Len extension equal FragmentSize to 2048-client-extra]
MaxFragmentLenExt = 2048


# ===========================================================

[1822-Maximum Fragment Len extension 512 lower than FragmentSize 1024]
ssl_conf = 1822-Maximum Fragment Len extension 512 lower than FragmentSize 1024-ssl

[1822-Maximum Fragment Len extension 512 lower than FragmentSize 1024-ssl]
server = 1822-Maximum Fragment Len extension 512 lower than FragmentSize 1024-server
client = 1822-Maximum Fragment Len extension 512 lower than FragmentSize 1024-client

[1822-Maximum Fragment Len extension 512 lower than FragmentSize 1024-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1822-Maximum Fragment Len extension 512 lower than FragmentSize 1024-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1822]
ApplicationData = 3072
MaxFragmentSize = 1024
Serialize = Client
client = 1822-Maximum Fragment Len extension 512 lower than FragmentSize 1024-client-extra

[1822-Maximum Fragment Len extension 512 lower than FragmentSize 1024-client-extra]
MaxFragmentLenExt = 512


# ===========================================================

[1823-Maximum Fragment Len extension 1024 lower than FragmentSize 1024]
ssl_conf = 1823-Maximum Fragment Len extension 1024 lower than FragmentSize 1024-ssl

[1823-Maximum Fragment Len extension 1024 lower than FragmentSize 1024-ssl]
server = 1823-Maximum Fragment Len extension 1024 lower than FragmentSize 1024-server
client = 1823-Maximum Fragment Len extension 1024 lower than FragmentSize 1024-client

[1823-Maximum Fragment Len extension 1024 lower than FragmentSize 1024-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1823-Maximum Fragment Len extension 1024 lower than FragmentSize 1024-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1823]
ApplicationData = 3072
MaxFragmentSize = 1024
Serialize = Client
client = 1823-Maximum Fragment Len extension 1024 lower than FragmentSize 1024-client-extra

[1823-Maximum Fragment Len extension 1024 lower than FragmentSize 1024-client-extra]
MaxFragmentLenExt = 2048


# ===========================================================

[1824-Maximum Fragment Len extension 4096 greater than FragmentSize 2048]
ssl_conf = 1824-Maximum Fragment Len extension 4096 greater than FragmentSize 2048-ssl

[1824-Maximum Fragment Len extension 4096 greater than FragmentSize 2048-ssl]
server = 1824-Maximum Fragment Len extension 4096 greater than FragmentSize 2048-server
client = 1824-Maximum Fragment Len extension 4096 greater than FragmentSize 2048-client

[1824-Maximum Fragment Len extension 4096 greater than FragmentSize 2048-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1824-Maximum Fragment Len extension 4096 greater than FragmentSize 2048-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1824]
ApplicationData = 8196
MaxFragmentSize = 2048
Serialize = Client
client = 1824-Maximum Fragment Len extension 4096 greater than FragmentSize 2048-client-extra

[1824-Maximum Fragment Len extension 4096 greater than FragmentSize 2048-client-extra]
MaxFragmentLenExt = 4096


# ===========================================================

[1825-Maximum Fragment Len extension 2048 greater than FragmentSize 1024]
ssl_conf = 1825-Maximum Fragment Len extension 2048 greater than FragmentSize 1024-ssl

[1825-Maximum Fragment Len extension 2048 greater than FragmentSize 1024-ssl]
server = 1825-Maximum Fragment Len extension 2048 greater than FragmentSize 1024-server
client = 1825-Maximum Fragment Len extension 2048 greater than FragmentSize 1024-client

[1825-Maximum Fragment Len extension 2048 greater than FragmentSize 1024-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1825-Maximum Fragment Len extension 2048 greater than FragmentSize 1024-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1825]
ApplicationData = 3072
MaxFragmentSize = 1024
Serialize = Client
client = 1825-Maximum Fragment Len extension 2048 greater than FragmentSize 1024-client-extra

[1825-Maximum Fragment Len extension 2048 greater than FragmentSize 1024-client-extra]
MaxFragmentLenExt = 2048


# ===========================================================

[1826-curve-sect163k1]
ssl_conf = 1826-curve-sect163k1-ssl

[1826-curve-sect163k1-ssl]
server = 1826-curve-sect163k1-server
client = 1826-curve-sect163k1-client

[1826-curve-sect163k1-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Curves = sect163k1
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1826-curve-sect163k1-client]
CipherString = ECDHE
Curves = sect163k1
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1826]
ExpectedResult = Success
ExpectedTmpKeyType = sect163k1
Serialize = Client


# ===========================================================

[1827-curve-sect163r1]
ssl_conf = 1827-curve-sect163r1-ssl

[1827-curve-sect163r1-ssl]
server = 1827-curve-sect163r1-server
client = 1827-curve-sect163r1-client

[1827-curve-sect163r1-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Curves = sect163r1
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1827-curve-sect163r1-client]
CipherString = ECDHE
Curves = sect163r1
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1827]
ExpectedResult = Success
ExpectedTmpKeyType = sect163r1
Serialize = Client


# ===========================================================

[1828-curve-sect163r2]
ssl_conf = 1828-curve-sect163r2-ssl

[1828-curve-sect163r2-ssl]
server = 1828-curve-sect163r2-server
client = 1828-curve-sect163r2-client

[1828-curve-sect163r2-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Curves = sect163r2
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1828-curve-sect163r2-client]
CipherString = ECDHE
Curves = sect163r2
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1828]
ExpectedResult = Success
ExpectedTmpKeyType = sect163r2
Serialize = Client


# ===========================================================

[1829-curve-sect193r1]
ssl_conf = 1829-curve-sect193r1-ssl

[1829-curve-sect193r1-ssl]
server = 1829-curve-sect193r1-server
client = 1829-curve-sect193r1-client

[1829-curve-sect193r1-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Curves = sect193r1
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1829-curve-sect193r1-client]
CipherString = ECDHE
Curves = sect193r1
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1829]
ExpectedResult = Success
ExpectedTmpKeyType = sect193r1
Serialize = Client


# ===========================================================

[1830-curve-sect193r2]
ssl_conf = 1830-curve-sect193r2-ssl

[1830-curve-sect193r2-ssl]
server = 1830-curve-sect193r2-server
client = 1830-curve-sect193r2-client

[1830-curve-sect193r2-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Curves = sect193r2
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1830-curve-sect193r2-client]
CipherString = ECDHE
Curves = sect193r2
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1830]
ExpectedResult = Success
ExpectedTmpKeyType = sect193r2
Serialize = Client


# ===========================================================

[1831-curve-sect233k1]
ssl_conf = 1831-curve-sect233k1-ssl

[1831-curve-sect233k1-ssl]
server = 1831-curve-sect233k1-server
client = 1831-curve-sect233k1-client

[1831-curve-sect233k1-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Curves = sect233k1
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1831-curve-sect233k1-client]
CipherString = ECDHE
Curves = sect233k1
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1831]
ExpectedResult = Success
ExpectedTmpKeyType = sect233k1
Serialize = Client


# ===========================================================

[1832-curve-sect233r1]
ssl_conf = 1832-curve-sect233r1-ssl

[1832-curve-sect233r1-ssl]
server = 1832-curve-sect233r1-server
client = 1832-curve-sect233r1-client

[1832-curve-sect233r1-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Curves = sect233r1
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1832-curve-sect233r1-client]
CipherString = ECDHE
Curves = sect233r1
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1832]
ExpectedResult = Success
ExpectedTmpKeyType = sect233r1
Serialize = Client


# ===========================================================

[1833-curve-sect239k1]
ssl_conf = 1833-curve-sect239k1-ssl

[1833-curve-sect239k1-ssl]
server = 1833-curve-sect239k1-server
client = 1833-curve-sect239k1-client

[1833-curve-sect239k1-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Curves = sect239k1
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1833-curve-sect239k1-client]
CipherString = ECDHE
Curves = sect239k1
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1833]
ExpectedResult = Success
ExpectedTmpKeyType = sect239k1
Serialize = Client


# ===========================================================

[1834-curve-sect283k1]
ssl_conf = 1834-curve-sect283k1-ssl

[1834-curve-sect283k1-ssl]
server = 1834-curve-sect283k1-server
client = 1834-curve-sect283k1-client

[1834-curve-sect283k1-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Curves = sect283k1
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1834-curve-sect283k1-client]
CipherString = ECDHE
Curves = sect283k1
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1834]
ExpectedResult = Success
ExpectedTmpKeyType = sect283k1
Serialize = Client


# ===========================================================

[1835-curve-sect283r1]
ssl_conf = 1835-curve-sect283r1-ssl

[1835-curve-sect283r1-ssl]
server = 1835-curve-sect283r1-server
client = 1835-curve-sect283r1-client

[1835-curve-sect283r1-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Curves = sect283r1
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1835-curve-sect283r1-client]
CipherString = ECDHE
Curves = sect283r1
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1835]
ExpectedResult = Success
ExpectedTmpKeyType = sect283r1
Serialize = Client


# ===========================================================

[1836-curve-sect409k1]
ssl_conf = 1836-curve-sect409k1-ssl

[1836-curve-sect409k1-ssl]
server = 1836-curve-sect409k1-server
client = 1836-curve-sect409k1-client

[1836-curve-sect409k1-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Curves = sect409k1
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1836-curve-sect409k1-client]
CipherString = ECDHE
Curves = sect409k1
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1836]
ExpectedResult = Success
ExpectedTmpKeyType = sect409k1
Serialize = Client


# ===========================================================

[1837-curve-sect409r1]
ssl_conf = 1837-curve-sect409r1-ssl

[1837-curve-sect409r1-ssl]
server = 1837-curve-sect409r1-server
client = 1837-curve-sect409r1-client

[1837-curve-sect409r1-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Curves = sect409r1
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1837-curve-sect409r1-client]
CipherString = ECDHE
Curves = sect409r1
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1837]
ExpectedResult = Success
ExpectedTmpKeyType = sect409r1
Serialize = Client


# ===========================================================

[1838-curve-sect571k1]
ssl_conf = 1838-curve-sect571k1-ssl

[1838-curve-sect571k1-ssl]
server = 1838-curve-sect571k1-server
client = 1838-curve-sect571k1-client

[1838-curve-sect571k1-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Curves = sect571k1
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1838-curve-sect571k1-client]
CipherString = ECDHE
Curves = sect571k1
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1838]
ExpectedResult = Success
ExpectedTmpKeyType = sect571k1
Serialize = Client


# ===========================================================

[1839-curve-sect571r1]
ssl_conf = 1839-curve-sect571r1-ssl

[1839-curve-sect571r1-ssl]
server = 1839-curve-sect571r1-server
client = 1839-curve-sect571r1-client

[1839-curve-sect571r1-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Curves = sect571r1
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1839-curve-sect571r1-client]
CipherString = ECDHE
Curves = sect571r1
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1839]
ExpectedResult = Success
ExpectedTmpKeyType = sect571r1
Serialize = Client


# ===========================================================

[1840-curve-secp160k1]
ssl_conf = 1840-curve-secp160k1-ssl

[1840-curve-secp160k1-ssl]
server = 1840-curve-secp160k1-server
client = 1840-curve-secp160k1-client

[1840-curve-secp160k1-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Curves = secp160k1
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1840-curve-secp160k1-client]
CipherString = ECDHE
Curves = secp160k1
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1840]
ExpectedResult = Success
ExpectedTmpKeyType = secp160k1
Serialize = Client


# ===========================================================

[1841-curve-secp160r1]
ssl_conf = 1841-curve-secp160r1-ssl

[1841-curve-secp160r1-ssl]
server = 1841-curve-secp160r1-server
client = 1841-curve-secp160r1-client

[1841-curve-secp160r1-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Curves = secp160r1
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1841-curve-secp160r1-client]
CipherString = ECDHE
Curves = secp160r1
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1841]
ExpectedResult = Success
ExpectedTmpKeyType = secp160r1
Serialize = Client


# ===========================================================

[1842-curve-secp160r2]
ssl_conf = 1842-curve-secp160r2-ssl

[1842-curve-secp160r2-ssl]
server = 1842-curve-secp160r2-server
client = 1842-curve-secp160r2-client

[1842-curve-secp160r2-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Curves = secp160r2
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1842-curve-secp160r2-client]
CipherString = ECDHE
Curves = secp160r2
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1842]
ExpectedResult = Success
ExpectedTmpKeyType = secp160r2
Serialize = Client


# ===========================================================

[1843-curve-secp192k1]
ssl_conf = 1843-curve-secp192k1-ssl

[1843-curve-secp192k1-ssl]
server = 1843-curve-secp192k1-server
client = 1843-curve-secp192k1-client

[1843-curve-secp192k1-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Curves = secp192k1
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1843-curve-secp192k1-client]
CipherString = ECDHE
Curves = secp192k1
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1843]
ExpectedResult = Success
ExpectedTmpKeyType = secp192k1
Serialize = Client


# ===========================================================

[1844-curve-prime192v1]
ssl_conf = 1844-curve-prime192v1-ssl

[1844-curve-prime192v1-ssl]
server = 1844-curve-prime192v1-server
client = 1844-curve-prime192v1-client

[1844-curve-prime192v1-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Curves = prime192v1
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1844-curve-prime192v1-client]
CipherString = ECDHE
Curves = prime192v1
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1844]
ExpectedResult = Success
ExpectedTmpKeyType = prime192v1
Serialize = Client


# ===========================================================

[1845-curve-secp224k1]
ssl_conf = 1845-curve-secp224k1-ssl

[1845-curve-secp224k1-ssl]
server = 1845-curve-secp224k1-server
client = 1845-curve-secp224k1-client

[1845-curve-secp224k1-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Curves = secp224k1
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1845-curve-secp224k1-client]
CipherString = ECDHE
Curves = secp224k1
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1845]
ExpectedResult = Success
ExpectedTmpKeyType = secp224k1
Serialize = Client


# ===========================================================

[1846-curve-secp224r1]
ssl_conf = 1846-curve-secp224r1-ssl

[1846-curve-secp224r1-ssl]
server = 1846-curve-secp224r1-server
client = 1846-curve-secp224r1-client

[1846-curve-secp224r1-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Curves = secp224r1
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1846-curve-secp224r1-client]
CipherString = ECDHE
Curves = secp224r1
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1846]
ExpectedResult = Success
ExpectedTmpKeyType = secp224r1
Serialize = Client


# ===========================================================

[1847-curve-secp256k1]
ssl_conf = 1847-curve-secp256k1-ssl

[1847-curve-secp256k1-ssl]
server = 1847-curve-secp256k1-server
client = 1847-curve-secp256k1-client

[1847-curve-secp256k1-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Curves = secp256k1
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1847-curve-secp256k1-client]
CipherString = ECDHE
Curves = secp256k1
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1847]
ExpectedResult = Success
ExpectedTmpKeyType = secp256k1
Serialize = Client


# ===========================================================

[1848-curve-prime256v1]
ssl_conf = 1848-curve-prime256v1-ssl

[1848-curve-prime256v1-ssl]
server = 1848-curve-prime256v1-server
client = 1848-curve-prime256v1-client

[1848-curve-prime256v1-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Curves = prime256v1
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1848-curve-prime256v1-client]
CipherString = ECDHE
Curves = prime256v1
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1848]
ExpectedResult = Success
ExpectedTmpKeyType = prime256v1
Serialize = Client


# ===========================================================

[1849-curve-secp384r1]
ssl_conf = 1849-curve-secp384r1-ssl

[1849-curve-secp384r1-ssl]
server = 1849-curve-secp384r1-server
client = 1849-curve-secp384r1-client

[1849-curve-secp384r1-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Curves = secp384r1
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1849-curve-secp384r1-client]
CipherString = ECDHE
Curves = secp384r1
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1849]
ExpectedResult = Success
ExpectedTmpKeyType = secp384r1
Serialize = Client


# ===========================================================

[1850-curve-secp521r1]
ssl_conf = 1850-curve-secp521r1-ssl

[1850-curve-secp521r1-ssl]
server = 1850-curve-secp521r1-server
client = 1850-curve-secp521r1-client

[1850-curve-secp521r1-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Curves = secp521r1
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1850-curve-secp521r1-client]
CipherString = ECDHE
Curves = secp521r1
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1850]
ExpectedResult = Success
ExpectedTmpKeyType = secp521r1
Serialize = Client


# ===========================================================

[1851-curve-brainpoolP256r1]
ssl_conf = 1851-curve-brainpoolP256r1-ssl

[1851-curve-brainpoolP256r1-ssl]
server = 1851-curve-brainpoolP256r1-server
client = 1851-curve-brainpoolP256r1-client

[1851-curve-brainpoolP256r1-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Curves = brainpoolP256r1
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1851-curve-brainpoolP256r1-client]
CipherString = ECDHE
Curves = brainpoolP256r1
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1851]
ExpectedResult = Success
ExpectedTmpKeyType = brainpoolP256r1
Serialize = Client


# ===========================================================

[1852-curve-brainpoolP384r1]
ssl_conf = 1852-curve-brainpoolP384r1-ssl

[1852-curve-brainpoolP384r1-ssl]
server = 1852-curve-brainpoolP384r1-server
client = 1852-curve-brainpoolP384r1-client

[1852-curve-brainpoolP384r1-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Curves = brainpoolP384r1
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1852-curve-brainpoolP384r1-client]
CipherString = ECDHE
Curves = brainpoolP384r1
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1852]
ExpectedResult = Success
ExpectedTmpKeyType = brainpoolP384r1
Serialize = Client


# ===========================================================

[1853-curve-brainpoolP512r1]
ssl_conf = 1853-curve-brainpoolP512r1-ssl

[1853-curve-brainpoolP512r1-ssl]
server = 1853-curve-brainpoolP512r1-server
client = 1853-curve-brainpoolP512r1-client

[1853-curve-brainpoolP512r1-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Curves = brainpoolP512r1
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1853-curve-brainpoolP512r1-client]
CipherString = ECDHE
Curves = brainpoolP512r1
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1853]
ExpectedResult = Success
ExpectedTmpKeyType = brainpoolP512r1
Serialize = Client


# ===========================================================

[1854-certstatus-good]
ssl_conf = 1854-certstatus-good-ssl

[1854-certstatus-good-ssl]
server = 1854-certstatus-good-server
client = 1854-certstatus-good-client

[1854-certstatus-good-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1854-certstatus-good-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1854]
ExpectedResult = Success
Method = TLS
Serialize = Client
server = 1854-certstatus-good-server-extra

[1854-certstatus-good-server-extra]
CertStatus = GoodResponse


# ===========================================================

[1855-certstatus-bad]
ssl_conf = 1855-certstatus-bad-ssl

[1855-certstatus-bad-ssl]
server = 1855-certstatus-bad-server
client = 1855-certstatus-bad-client

[1855-certstatus-bad-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1855-certstatus-bad-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1855]
ExpectedResult = ClientFail
Method = TLS
Serialize = Client
server = 1855-certstatus-bad-server-extra

[1855-certstatus-bad-server-extra]
CertStatus = BadResponse


# ===========================================================

[1856-renegotiate-client-no-resume]
ssl_conf = 1856-renegotiate-client-no-resume-ssl

[1856-renegotiate-client-no-resume-ssl]
server = 1856-renegotiate-client-no-resume-server
client = 1856-renegotiate-client-no-resume-client

[1856-renegotiate-client-no-resume-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
Options = NoResumptionOnRenegotiation
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1856-renegotiate-client-no-resume-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1856]
ExpectedResult = Success
HandshakeMode = RenegotiateClient
Method = TLS
ResumptionExpected = No
Serialize = Client


# ===========================================================

[1857-renegotiate-client-resume]
ssl_conf = 1857-renegotiate-client-resume-ssl

[1857-renegotiate-client-resume-ssl]
server = 1857-renegotiate-client-resume-server
client = 1857-renegotiate-client-resume-client

[1857-renegotiate-client-resume-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1857-renegotiate-client-resume-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1857]
ExpectedResult = Success
HandshakeMode = RenegotiateClient
Method = TLS
ResumptionExpected = Yes
Serialize = Client


# ===========================================================

[1858-renegotiate-server-no-resume]
ssl_conf = 1858-renegotiate-server-no-resume-ssl

[1858-renegotiate-server-no-resume-ssl]
server = 1858-renegotiate-server-no-resume-server
client = 1858-renegotiate-server-no-resume-client

[1858-renegotiate-server-no-resume-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
Options = NoResumptionOnRenegotiation
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1858-renegotiate-server-no-resume-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1858]
ExpectedResult = Success
HandshakeMode = RenegotiateServer
Method = TLS
ResumptionExpected = No
Serialize = Client


# ===========================================================

[1859-renegotiate-server-resume]
ssl_conf = 1859-renegotiate-server-resume-ssl

[1859-renegotiate-server-resume-ssl]
server = 1859-renegotiate-server-resume-server
client = 1859-renegotiate-server-resume-client

[1859-renegotiate-server-resume-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1859-renegotiate-server-resume-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1859]
ExpectedResult = Success
HandshakeMode = RenegotiateServer
Method = TLS
ResumptionExpected = Yes
Serialize = Client


# ===========================================================

[1860-renegotiate-client-auth-once]
ssl_conf = 1860-renegotiate-client-auth-once-ssl

[1860-renegotiate-client-auth-once-ssl]
server = 1860-renegotiate-client-auth-once-server
client = 1860-renegotiate-client-auth-once-client

[1860-renegotiate-client-auth-once-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
Options = NoResumptionOnRenegotiation
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/root-cert.pem
VerifyMode = Once

[1860-renegotiate-client-auth-once-client]
Certificate = ${ENV::TEST_CERTS_DIR}/ee-client-chain.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/ee-key.pem
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1860]
ExpectedResult = Success
HandshakeMode = RenegotiateServer
Method = TLS
ResumptionExpected = No
Serialize = Client


# ===========================================================

[1861-renegotiate-aead-to-non-aead]
ssl_conf = 1861-renegotiate-aead-to-non-aead-ssl

[1861-renegotiate-aead-to-non-aead-ssl]
server = 1861-renegotiate-aead-to-non-aead-server
client = 1861-renegotiate-aead-to-non-aead-client

[1861-renegotiate-aead-to-non-aead-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = NoResumptionOnRenegotiation
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1861-renegotiate-aead-to-non-aead-client]
CipherString = AES128-GCM-SHA256
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1861]
ExpectedResult = Success
HandshakeMode = RenegotiateClient
Method = TLS
ResumptionExpected = No
Serialize = Client
client = 1861-renegotiate-aead-to-non-aead-client-extra

[1861-renegotiate-aead-to-non-aead-client-extra]
RenegotiateCiphers = AES128-SHA


# ===========================================================

[1862-renegotiate-non-aead-to-aead]
ssl_conf = 1862-renegotiate-non-aead-to-aead-ssl

[1862-renegotiate-non-aead-to-aead-ssl]
server = 1862-renegotiate-non-aead-to-aead-server
client = 1862-renegotiate-non-aead-to-aead-client

[1862-renegotiate-non-aead-to-aead-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = NoResumptionOnRenegotiation
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1862-renegotiate-non-aead-to-aead-client]
CipherString = AES128-SHA
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1862]
ExpectedResult = Success
HandshakeMode = RenegotiateClient
Method = TLS
ResumptionExpected = No
Serialize = Client
client = 1862-renegotiate-non-aead-to-aead-client-extra

[1862-renegotiate-non-aead-to-aead-client-extra]
RenegotiateCiphers = AES128-GCM-SHA256


# ===========================================================

[1863-renegotiate-non-aead-to-non-aead]
ssl_conf = 1863-renegotiate-non-aead-to-non-aead-ssl

[1863-renegotiate-non-aead-to-non-aead-ssl]
server = 1863-renegotiate-non-aead-to-non-aead-server
client = 1863-renegotiate-non-aead-to-non-aead-client

[1863-renegotiate-non-aead-to-non-aead-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = NoResumptionOnRenegotiation
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1863-renegotiate-non-aead-to-non-aead-client]
CipherString = AES128-SHA
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1863]
ExpectedResult = Success
HandshakeMode = RenegotiateClient
Method = TLS
ResumptionExpected = No
Serialize = Client
client = 1863-renegotiate-non-aead-to-non-aead-client-extra

[1863-renegotiate-non-aead-to-non-aead-client-extra]
RenegotiateCiphers = AES256-SHA


# ===========================================================

[1864-renegotiate-aead-to-aead]
ssl_conf = 1864-renegotiate-aead-to-aead-ssl

[1864-renegotiate-aead-to-aead-ssl]
server = 1864-renegotiate-aead-to-aead-server
client = 1864-renegotiate-aead-to-aead-client

[1864-renegotiate-aead-to-aead-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = NoResumptionOnRenegotiation
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1864-renegotiate-aead-to-aead-client]
CipherString = AES128-GCM-SHA256
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1864]
ExpectedResult = Success
HandshakeMode = RenegotiateClient
Method = TLS
ResumptionExpected = No
Serialize = Client
client = 1864-renegotiate-aead-to-aead-client-extra

[1864-renegotiate-aead-to-aead-client-extra]
RenegotiateCiphers = AES256-GCM-SHA384


# ===========================================================

[1865-no-renegotiation-server-by-client]
ssl_conf = 1865-no-renegotiation-server-by-client-ssl

[1865-no-renegotiation-server-by-client-ssl]
server = 1865-no-renegotiation-server-by-client-server
client = 1865-no-renegotiation-server-by-client-client

[1865-no-renegotiation-server-by-client-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
Options = NoRenegotiation
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1865-no-renegotiation-server-by-client-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1865]
ExpectedResult = ClientFail
HandshakeMode = RenegotiateClient
Method = TLS
ResumptionExpected = No
Serialize = Client


# ===========================================================

[1866-no-renegotiation-server-by-server]
ssl_conf = 1866-no-renegotiation-server-by-server-ssl

[1866-no-renegotiation-server-by-server-ssl]
server = 1866-no-renegotiation-server-by-server-server
client = 1866-no-renegotiation-server-by-server-client

[1866-no-renegotiation-server-by-server-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
Options = NoRenegotiation
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1866-no-renegotiation-server-by-server-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1866]
ExpectedResult = ServerFail
HandshakeMode = RenegotiateServer
Method = TLS
ResumptionExpected = No
Serialize = Client


# ===========================================================

[1867-no-renegotiation-client-by-server]
ssl_conf = 1867-no-renegotiation-client-by-server-ssl

[1867-no-renegotiation-client-by-server-ssl]
server = 1867-no-renegotiation-client-by-server-server
client = 1867-no-renegotiation-client-by-server-client

[1867-no-renegotiation-client-by-server-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1867-no-renegotiation-client-by-server-client]
CipherString = DEFAULT
Options = NoRenegotiation
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1867]
ExpectedResult = ServerFail
HandshakeMode = RenegotiateServer
Method = TLS
ResumptionExpected = No
Serialize = Client


# ===========================================================

[1868-no-renegotiation-client-by-client]
ssl_conf = 1868-no-renegotiation-client-by-client-ssl

[1868-no-renegotiation-client-by-client-ssl]
server = 1868-no-renegotiation-client-by-client-server
client = 1868-no-renegotiation-client-by-client-client

[1868-no-renegotiation-client-by-client-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1868-no-renegotiation-client-by-client-client]
CipherString = DEFAULT
Options = NoRenegotiation
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1868]
ExpectedResult = ClientFail
HandshakeMode = RenegotiateClient
Method = TLS
ResumptionExpected = No
Serialize = Client


# ===========================================================

[1869-disable-encrypt-then-mac-server-sha]
ssl_conf = 1869-disable-encrypt-then-mac-server-sha-ssl

[1869-disable-encrypt-then-mac-server-sha-ssl]
server = 1869-disable-encrypt-then-mac-server-sha-server
client = 1869-disable-encrypt-then-mac-server-sha-client

[1869-disable-encrypt-then-mac-server-sha-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = -EncryptThenMac
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1869-disable-encrypt-then-mac-server-sha-client]
CipherString = AES128-SHA
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1869]
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1870-disable-encrypt-then-mac-client-sha]
ssl_conf = 1870-disable-encrypt-then-mac-client-sha-ssl

[1870-disable-encrypt-then-mac-client-sha-ssl]
server = 1870-disable-encrypt-then-mac-client-sha-server
client = 1870-disable-encrypt-then-mac-client-sha-client

[1870-disable-encrypt-then-mac-client-sha-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1870-disable-encrypt-then-mac-client-sha-client]
CipherString = AES128-SHA
MaxProtocol = TLSv1.2
Options = -EncryptThenMac
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1870]
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1871-disable-encrypt-then-mac-both-sha]
ssl_conf = 1871-disable-encrypt-then-mac-both-sha-ssl

[1871-disable-encrypt-then-mac-both-sha-ssl]
server = 1871-disable-encrypt-then-mac-both-sha-server
client = 1871-disable-encrypt-then-mac-both-sha-client

[1871-disable-encrypt-then-mac-both-sha-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = -EncryptThenMac
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1871-disable-encrypt-then-mac-both-sha-client]
CipherString = AES128-SHA
MaxProtocol = TLSv1.2
Options = -EncryptThenMac
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1871]
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1872-disable-encrypt-then-mac-server-sha2]
ssl_conf = 1872-disable-encrypt-then-mac-server-sha2-ssl

[1872-disable-encrypt-then-mac-server-sha2-ssl]
server = 1872-disable-encrypt-then-mac-server-sha2-server
client = 1872-disable-encrypt-then-mac-server-sha2-client

[1872-disable-encrypt-then-mac-server-sha2-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = -EncryptThenMac
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1872-disable-encrypt-then-mac-server-sha2-client]
CipherString = AES128-SHA256
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1872]
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1873-disable-encrypt-then-mac-client-sha2]
ssl_conf = 1873-disable-encrypt-then-mac-client-sha2-ssl

[1873-disable-encrypt-then-mac-client-sha2-ssl]
server = 1873-disable-encrypt-then-mac-client-sha2-server
client = 1873-disable-encrypt-then-mac-client-sha2-client

[1873-disable-encrypt-then-mac-client-sha2-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1873-disable-encrypt-then-mac-client-sha2-client]
CipherString = AES128-SHA256
MaxProtocol = TLSv1.2
Options = -EncryptThenMac
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1873]
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1874-disable-encrypt-then-mac-both-sha2]
ssl_conf = 1874-disable-encrypt-then-mac-both-sha2-ssl

[1874-disable-encrypt-then-mac-both-sha2-ssl]
server = 1874-disable-encrypt-then-mac-both-sha2-server
client = 1874-disable-encrypt-then-mac-both-sha2-client

[1874-disable-encrypt-then-mac-both-sha2-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = -EncryptThenMac
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1874-disable-encrypt-then-mac-both-sha2-client]
CipherString = AES128-SHA256
MaxProtocol = TLSv1.2
Options = -EncryptThenMac
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1874]
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1875-ECDSA CipherString Selection]
ssl_conf = 1875-ECDSA CipherString Selection-ssl

[1875-ECDSA CipherString Selection-ssl]
server = 1875-ECDSA CipherString Selection-server
client = 1875-ECDSA CipherString Selection-client

[1875-ECDSA CipherString Selection-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
ECDSA.Certificate = ${ENV::TEST_CERTS_DIR}/server-ecdsa-cert.pem
ECDSA.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ecdsa-key.pem
Ed25519.Certificate = ${ENV::TEST_CERTS_DIR}/server-ed25519-cert.pem
Ed25519.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ed25519-key.pem
Ed448.Certificate = ${ENV::TEST_CERTS_DIR}/server-ed448-cert.pem
Ed448.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ed448-key.pem
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1875-ECDSA CipherString Selection-client]
CipherString = aECDSA
MaxProtocol = TLSv1.2
RequestCAFile = ${ENV::TEST_CERTS_DIR}/root-cert.pem
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1875]
ExpectedResult = Success
ExpectedServerCANames = empty
ExpectedServerCertType = P-256
ExpectedServerSignType = EC
Serialize = Client


# ===========================================================

[1876-ECDSA CipherString Selection]
ssl_conf = 1876-ECDSA CipherString Selection-ssl

[1876-ECDSA CipherString Selection-ssl]
server = 1876-ECDSA CipherString Selection-server
client = 1876-ECDSA CipherString Selection-client

[1876-ECDSA CipherString Selection-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
ECDSA.Certificate = ${ENV::TEST_CERTS_DIR}/server-ecdsa-cert.pem
ECDSA.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ecdsa-key.pem
Groups = P-384
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1876-ECDSA CipherString Selection-client]
CipherString = aECDSA
Groups = P-256:P-384
MaxProtocol = TLSv1.2
RequestCAFile = ${ENV::TEST_CERTS_DIR}/root-cert.pem
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1876]
ExpectedResult = Success
ExpectedServerCANames = empty
ExpectedServerCertType = P-256
ExpectedServerSignType = EC
Serialize = Client


# ===========================================================

[1877-ECDSA CipherString Selection]
ssl_conf = 1877-ECDSA CipherString Selection-ssl

[1877-ECDSA CipherString Selection-ssl]
server = 1877-ECDSA CipherString Selection-server
client = 1877-ECDSA CipherString Selection-client

[1877-ECDSA CipherString Selection-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
ECDSA.Certificate = ${ENV::TEST_CERTS_DIR}/server-ecdsa-cert.pem
ECDSA.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ecdsa-key.pem
Groups = P-256:P-384
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1877-ECDSA CipherString Selection-client]
CipherString = aECDSA
Groups = P-384
MaxProtocol = TLSv1.2
RequestCAFile = ${ENV::TEST_CERTS_DIR}/root-cert.pem
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1877]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1878-Ed25519 CipherString and Signature Algorithm Selection]
ssl_conf = 1878-Ed25519 CipherString and Signature Algorithm Selection-ssl

[1878-Ed25519 CipherString and Signature Algorithm Selection-ssl]
server = 1878-Ed25519 CipherString and Signature Algorithm Selection-server
client = 1878-Ed25519 CipherString and Signature Algorithm Selection-client

[1878-Ed25519 CipherString and Signature Algorithm Selection-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
ECDSA.Certificate = ${ENV::TEST_CERTS_DIR}/server-ecdsa-cert.pem
ECDSA.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ecdsa-key.pem
Ed25519.Certificate = ${ENV::TEST_CERTS_DIR}/server-ed25519-cert.pem
Ed25519.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ed25519-key.pem
Ed448.Certificate = ${ENV::TEST_CERTS_DIR}/server-ed448-cert.pem
Ed448.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ed448-key.pem
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1878-Ed25519 CipherString and Signature Algorithm Selection-client]
CipherString = aECDSA
MaxProtocol = TLSv1.2
RequestCAFile = ${ENV::TEST_CERTS_DIR}/root-cert.pem
SignatureAlgorithms = ed25519:ECDSA+SHA256
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1878]
ExpectedResult = Success
ExpectedServerCANames = empty
ExpectedServerCertType = Ed25519
ExpectedServerSignType = Ed25519
Serialize = Client


# ===========================================================

[1879-Ed448 CipherString and Signature Algorithm Selection]
ssl_conf = 1879-Ed448 CipherString and Signature Algorithm Selection-ssl

[1879-Ed448 CipherString and Signature Algorithm Selection-ssl]
server = 1879-Ed448 CipherString and Signature Algorithm Selection-server
client = 1879-Ed448 CipherString and Signature Algorithm Selection-client

[1879-Ed448 CipherString and Signature Algorithm Selection-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
ECDSA.Certificate = ${ENV::TEST_CERTS_DIR}/server-ecdsa-cert.pem
ECDSA.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ecdsa-key.pem
Ed25519.Certificate = ${ENV::TEST_CERTS_DIR}/server-ed25519-cert.pem
Ed25519.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ed25519-key.pem
Ed448.Certificate = ${ENV::TEST_CERTS_DIR}/server-ed448-cert.pem
Ed448.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ed448-key.pem
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1879-Ed448 CipherString and Signature Algorithm Selection-client]
CipherString = aECDSA
MaxProtocol = TLSv1.2
RequestCAFile = ${ENV::TEST_CERTS_DIR}/root-cert.pem
SignatureAlgorithms = ed448:ECDSA+SHA256
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1879]
ExpectedResult = Success
ExpectedServerCANames = empty
ExpectedServerCertType = Ed448
ExpectedServerSignType = Ed448
Serialize = Client


# ===========================================================

[1880-ECDSA with brainpool]
ssl_conf = 1880-ECDSA with brainpool-ssl

[1880-ECDSA with brainpool-ssl]
server = 1880-ECDSA with brainpool-server
client = 1880-ECDSA with brainpool-client

[1880-ECDSA with brainpool-server]
Certificate = ${ENV::TEST_CERTS_DIR}/server-ecdsa-brainpoolP256r1-cert.pem
CipherString = DEFAULT
Groups = brainpoolP256r1
PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ecdsa-brainpoolP256r1-key.pem

[1880-ECDSA with brainpool-client]
CipherString = aECDSA
Groups = brainpoolP256r1
RequestCAFile = ${ENV::TEST_CERTS_DIR}/root-cert.pem
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1880]
ExpectedResult = Success
ExpectedServerCANames = empty
ExpectedServerCertType = brainpoolP256r1
ExpectedServerSignType = EC
Serialize = Client


# ===========================================================

[1881-RSA CipherString Selection]
ssl_conf = 1881-RSA CipherString Selection-ssl

[1881-RSA CipherString Selection-ssl]
server = 1881-RSA CipherString Selection-server
client = 1881-RSA CipherString Selection-client

[1881-RSA CipherString Selection-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
ECDSA.Certificate = ${ENV::TEST_CERTS_DIR}/server-ecdsa-cert.pem
ECDSA.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ecdsa-key.pem
Ed25519.Certificate = ${ENV::TEST_CERTS_DIR}/server-ed25519-cert.pem
Ed25519.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ed25519-key.pem
Ed448.Certificate = ${ENV::TEST_CERTS_DIR}/server-ed448-cert.pem
Ed448.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ed448-key.pem
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1881-RSA CipherString Selection-client]
CipherString = aRSA
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1881]
ExpectedResult = Success
ExpectedServerCertType = RSA
ExpectedServerSignType = RSA-PSS
Serialize = Client


# ===========================================================

[1882-RSA-PSS Certificate CipherString Selection]
ssl_conf = 1882-RSA-PSS Certificate CipherString Selection-ssl

[1882-RSA-PSS Certificate CipherString Selection-ssl]
server = 1882-RSA-PSS Certificate CipherString Selection-server
client = 1882-RSA-PSS Certificate CipherString Selection-client

[1882-RSA-PSS Certificate CipherString Selection-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
ECDSA.Certificate = ${ENV::TEST_CERTS_DIR}/server-ecdsa-cert.pem
ECDSA.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ecdsa-key.pem
Ed25519.Certificate = ${ENV::TEST_CERTS_DIR}/server-ed25519-cert.pem
Ed25519.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ed25519-key.pem
Ed448.Certificate = ${ENV::TEST_CERTS_DIR}/server-ed448-cert.pem
Ed448.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ed448-key.pem
MaxProtocol = TLSv1.2
PSS.Certificate = ${ENV::TEST_CERTS_DIR}/server-pss-cert.pem
PSS.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-pss-key.pem
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1882-RSA-PSS Certificate CipherString Selection-client]
CipherString = aRSA
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1882]
ExpectedResult = Success
ExpectedServerCertType = RSA-PSS
ExpectedServerSignType = RSA-PSS
Serialize = Client


# ===========================================================

[1883-P-256 CipherString and Signature Algorithm Selection]
ssl_conf = 1883-P-256 CipherString and Signature Algorithm Selection-ssl

[1883-P-256 CipherString and Signature Algorithm Selection-ssl]
server = 1883-P-256 CipherString and Signature Algorithm Selection-server
client = 1883-P-256 CipherString and Signature Algorithm Selection-client

[1883-P-256 CipherString and Signature Algorithm Selection-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
ECDSA.Certificate = ${ENV::TEST_CERTS_DIR}/server-ecdsa-cert.pem
ECDSA.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ecdsa-key.pem
Ed25519.Certificate = ${ENV::TEST_CERTS_DIR}/server-ed25519-cert.pem
Ed25519.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ed25519-key.pem
Ed448.Certificate = ${ENV::TEST_CERTS_DIR}/server-ed448-cert.pem
Ed448.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ed448-key.pem
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1883-P-256 CipherString and Signature Algorithm Selection-client]
CipherString = aECDSA
MaxProtocol = TLSv1.2
SignatureAlgorithms = ECDSA+SHA256:ed25519
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1883]
ExpectedResult = Success
ExpectedServerCertType = P-256
ExpectedServerSignHash = SHA256
ExpectedServerSignType = EC
Serialize = Client


# ===========================================================

[1884-Ed25519 CipherString and Curves Selection]
ssl_conf = 1884-Ed25519 CipherString and Curves Selection-ssl

[1884-Ed25519 CipherString and Curves Selection-ssl]
server = 1884-Ed25519 CipherString and Curves Selection-server
client = 1884-Ed25519 CipherString and Curves Selection-client

[1884-Ed25519 CipherString and Curves Selection-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
ECDSA.Certificate = ${ENV::TEST_CERTS_DIR}/server-ecdsa-cert.pem
ECDSA.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ecdsa-key.pem
Ed25519.Certificate = ${ENV::TEST_CERTS_DIR}/server-ed25519-cert.pem
Ed25519.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ed25519-key.pem
Ed448.Certificate = ${ENV::TEST_CERTS_DIR}/server-ed448-cert.pem
Ed448.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ed448-key.pem
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1884-Ed25519 CipherString and Curves Selection-client]
CipherString = aECDSA
Curves = X25519
MaxProtocol = TLSv1.2
SignatureAlgorithms = ECDSA+SHA256:ed25519
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1884]
ExpectedResult = Success
ExpectedServerCertType = Ed25519
ExpectedServerSignType = Ed25519
Serialize = Client


# ===========================================================

[1885-Ed448 CipherString and Curves Selection]
ssl_conf = 1885-Ed448 CipherString and Curves Selection-ssl

[1885-Ed448 CipherString and Curves Selection-ssl]
server = 1885-Ed448 CipherString and Curves Selection-server
client = 1885-Ed448 CipherString and Curves Selection-client

[1885-Ed448 CipherString and Curves Selection-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
ECDSA.Certificate = ${ENV::TEST_CERTS_DIR}/server-ecdsa-cert.pem
ECDSA.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ecdsa-key.pem
Ed25519.Certificate = ${ENV::TEST_CERTS_DIR}/server-ed25519-cert.pem
Ed25519.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ed25519-key.pem
Ed448.Certificate = ${ENV::TEST_CERTS_DIR}/server-ed448-cert.pem
Ed448.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ed448-key.pem
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1885-Ed448 CipherString and Curves Selection-client]
CipherString = aECDSA
Curves = X448
MaxProtocol = TLSv1.2
SignatureAlgorithms = ECDSA+SHA256:ed448
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1885]
ExpectedResult = Success
ExpectedServerCertType = Ed448
ExpectedServerSignType = Ed448
Serialize = Client


# ===========================================================

[1886-ECDSA CipherString Selection, no ECDSA certificate]
ssl_conf = 1886-ECDSA CipherString Selection, no ECDSA certificate-ssl

[1886-ECDSA CipherString Selection, no ECDSA certificate-ssl]
server = 1886-ECDSA CipherString Selection, no ECDSA certificate-server
client = 1886-ECDSA CipherString Selection, no ECDSA certificate-client

[1886-ECDSA CipherString Selection, no ECDSA certificate-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1886-ECDSA CipherString Selection, no ECDSA certificate-client]
CipherString = aECDSA
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1886]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1887-ECDSA Signature Algorithm Selection]
ssl_conf = 1887-ECDSA Signature Algorithm Selection-ssl

[1887-ECDSA Signature Algorithm Selection-ssl]
server = 1887-ECDSA Signature Algorithm Selection-server
client = 1887-ECDSA Signature Algorithm Selection-client

[1887-ECDSA Signature Algorithm Selection-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
ECDSA.Certificate = ${ENV::TEST_CERTS_DIR}/server-ecdsa-cert.pem
ECDSA.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ecdsa-key.pem
Ed25519.Certificate = ${ENV::TEST_CERTS_DIR}/server-ed25519-cert.pem
Ed25519.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ed25519-key.pem
Ed448.Certificate = ${ENV::TEST_CERTS_DIR}/server-ed448-cert.pem
Ed448.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ed448-key.pem
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1887-ECDSA Signature Algorithm Selection-client]
CipherString = DEFAULT
SignatureAlgorithms = ECDSA+SHA256
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1887]
ExpectedResult = Success
ExpectedServerCertType = P-256
ExpectedServerSignHash = SHA256
ExpectedServerSignType = EC
Serialize = Client


# ===========================================================

[1888-ECDSA Signature Algorithm Selection SHA384]
ssl_conf = 1888-ECDSA Signature Algorithm Selection SHA384-ssl

[1888-ECDSA Signature Algorithm Selection SHA384-ssl]
server = 1888-ECDSA Signature Algorithm Selection SHA384-server
client = 1888-ECDSA Signature Algorithm Selection SHA384-client

[1888-ECDSA Signature Algorithm Selection SHA384-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
ECDSA.Certificate = ${ENV::TEST_CERTS_DIR}/server-ecdsa-cert.pem
ECDSA.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ecdsa-key.pem
Ed25519.Certificate = ${ENV::TEST_CERTS_DIR}/server-ed25519-cert.pem
Ed25519.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ed25519-key.pem
Ed448.Certificate = ${ENV::TEST_CERTS_DIR}/server-ed448-cert.pem
Ed448.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ed448-key.pem
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1888-ECDSA Signature Algorithm Selection SHA384-client]
CipherString = DEFAULT
SignatureAlgorithms = ECDSA+SHA384
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1888]
ExpectedResult = Success
ExpectedServerCertType = P-256
ExpectedServerSignHash = SHA384
ExpectedServerSignType = EC
Serialize = Client


# ===========================================================

[1889-ECDSA Signature Algorithm Selection SHA1]
ssl_conf = 1889-ECDSA Signature Algorithm Selection SHA1-ssl

[1889-ECDSA Signature Algorithm Selection SHA1-ssl]
server = 1889-ECDSA Signature Algorithm Selection SHA1-server
client = 1889-ECDSA Signature Algorithm Selection SHA1-client

[1889-ECDSA Signature Algorithm Selection SHA1-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
ECDSA.Certificate = ${ENV::TEST_CERTS_DIR}/server-ecdsa-cert.pem
ECDSA.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ecdsa-key.pem
Ed25519.Certificate = ${ENV::TEST_CERTS_DIR}/server-ed25519-cert.pem
Ed25519.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ed25519-key.pem
Ed448.Certificate = ${ENV::TEST_CERTS_DIR}/server-ed448-cert.pem
Ed448.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ed448-key.pem
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1889-ECDSA Signature Algorithm Selection SHA1-client]
CipherString = DEFAULT
SignatureAlgorithms = ECDSA+SHA1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1889]
ExpectedResult = Success
ExpectedServerCertType = P-256
ExpectedServerSignHash = SHA1
ExpectedServerSignType = EC
Serialize = Client


# ===========================================================

[1890-ECDSA Signature Algorithm Selection compressed point]
ssl_conf = 1890-ECDSA Signature Algorithm Selection compressed point-ssl

[1890-ECDSA Signature Algorithm Selection compressed point-ssl]
server = 1890-ECDSA Signature Algorithm Selection compressed point-server
client = 1890-ECDSA Signature Algorithm Selection compressed point-client

[1890-ECDSA Signature Algorithm Selection compressed point-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
ECDSA.Certificate = ${ENV::TEST_CERTS_DIR}/server-cecdsa-cert.pem
ECDSA.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-cecdsa-key.pem
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1890-ECDSA Signature Algorithm Selection compressed point-client]
CipherString = DEFAULT
SignatureAlgorithms = ECDSA+SHA256
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1890]
ExpectedResult = Success
ExpectedServerCertType = P-256
ExpectedServerSignHash = SHA256
ExpectedServerSignType = EC
Serialize = Client


# ===========================================================

[1891-ECDSA Signature Algorithm Selection, no ECDSA certificate]
ssl_conf = 1891-ECDSA Signature Algorithm Selection, no ECDSA certificate-ssl

[1891-ECDSA Signature Algorithm Selection, no ECDSA certificate-ssl]
server = 1891-ECDSA Signature Algorithm Selection, no ECDSA certificate-server
client = 1891-ECDSA Signature Algorithm Selection, no ECDSA certificate-client

[1891-ECDSA Signature Algorithm Selection, no ECDSA certificate-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1891-ECDSA Signature Algorithm Selection, no ECDSA certificate-client]
CipherString = DEFAULT
SignatureAlgorithms = ECDSA+SHA256
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1891]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1892-RSA Signature Algorithm Selection]
ssl_conf = 1892-RSA Signature Algorithm Selection-ssl

[1892-RSA Signature Algorithm Selection-ssl]
server = 1892-RSA Signature Algorithm Selection-server
client = 1892-RSA Signature Algorithm Selection-client

[1892-RSA Signature Algorithm Selection-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
ECDSA.Certificate = ${ENV::TEST_CERTS_DIR}/server-ecdsa-cert.pem
ECDSA.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ecdsa-key.pem
Ed25519.Certificate = ${ENV::TEST_CERTS_DIR}/server-ed25519-cert.pem
Ed25519.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ed25519-key.pem
Ed448.Certificate = ${ENV::TEST_CERTS_DIR}/server-ed448-cert.pem
Ed448.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ed448-key.pem
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1892-RSA Signature Algorithm Selection-client]
CipherString = DEFAULT
SignatureAlgorithms = RSA+SHA256
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1892]
ExpectedResult = Success
ExpectedServerCertType = RSA
ExpectedServerSignHash = SHA256
ExpectedServerSignType = RSA
Serialize = Client


# ===========================================================

[1893-RSA-PSS Signature Algorithm Selection]
ssl_conf = 1893-RSA-PSS Signature Algorithm Selection-ssl

[1893-RSA-PSS Signature Algorithm Selection-ssl]
server = 1893-RSA-PSS Signature Algorithm Selection-server
client = 1893-RSA-PSS Signature Algorithm Selection-client

[1893-RSA-PSS Signature Algorithm Selection-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
ECDSA.Certificate = ${ENV::TEST_CERTS_DIR}/server-ecdsa-cert.pem
ECDSA.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ecdsa-key.pem
Ed25519.Certificate = ${ENV::TEST_CERTS_DIR}/server-ed25519-cert.pem
Ed25519.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ed25519-key.pem
Ed448.Certificate = ${ENV::TEST_CERTS_DIR}/server-ed448-cert.pem
Ed448.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ed448-key.pem
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1893-RSA-PSS Signature Algorithm Selection-client]
CipherString = DEFAULT
SignatureAlgorithms = RSA-PSS+SHA256
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1893]
ExpectedResult = Success
ExpectedServerCertType = RSA
ExpectedServerSignHash = SHA256
ExpectedServerSignType = RSA-PSS
Serialize = Client


# ===========================================================

[1894-RSA-PSS Certificate Legacy Signature Algorithm Selection]
ssl_conf = 1894-RSA-PSS Certificate Legacy Signature Algorithm Selection-ssl

[1894-RSA-PSS Certificate Legacy Signature Algorithm Selection-ssl]
server = 1894-RSA-PSS Certificate Legacy Signature Algorithm Selection-server
client = 1894-RSA-PSS Certificate Legacy Signature Algorithm Selection-client

[1894-RSA-PSS Certificate Legacy Signature Algorithm Selection-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
ECDSA.Certificate = ${ENV::TEST_CERTS_DIR}/server-ecdsa-cert.pem
ECDSA.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ecdsa-key.pem
Ed25519.Certificate = ${ENV::TEST_CERTS_DIR}/server-ed25519-cert.pem
Ed25519.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ed25519-key.pem
Ed448.Certificate = ${ENV::TEST_CERTS_DIR}/server-ed448-cert.pem
Ed448.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ed448-key.pem
MaxProtocol = TLSv1.2
PSS.Certificate = ${ENV::TEST_CERTS_DIR}/server-pss-cert.pem
PSS.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-pss-key.pem
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1894-RSA-PSS Certificate Legacy Signature Algorithm Selection-client]
CipherString = DEFAULT
SignatureAlgorithms = RSA-PSS+SHA256
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1894]
ExpectedResult = Success
ExpectedServerCertType = RSA
ExpectedServerSignHash = SHA256
ExpectedServerSignType = RSA-PSS
Serialize = Client


# ===========================================================

[1895-RSA-PSS Certificate Unified Signature Algorithm Selection]
ssl_conf = 1895-RSA-PSS Certificate Unified Signature Algorithm Selection-ssl

[1895-RSA-PSS Certificate Unified Signature Algorithm Selection-ssl]
server = 1895-RSA-PSS Certificate Unified Signature Algorithm Selection-server
client = 1895-RSA-PSS Certificate Unified Signature Algorithm Selection-client

[1895-RSA-PSS Certificate Unified Signature Algorithm Selection-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
ECDSA.Certificate = ${ENV::TEST_CERTS_DIR}/server-ecdsa-cert.pem
ECDSA.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ecdsa-key.pem
Ed25519.Certificate = ${ENV::TEST_CERTS_DIR}/server-ed25519-cert.pem
Ed25519.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ed25519-key.pem
Ed448.Certificate = ${ENV::TEST_CERTS_DIR}/server-ed448-cert.pem
Ed448.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ed448-key.pem
MaxProtocol = TLSv1.2
PSS.Certificate = ${ENV::TEST_CERTS_DIR}/server-pss-cert.pem
PSS.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-pss-key.pem
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1895-RSA-PSS Certificate Unified Signature Algorithm Selection-client]
CipherString = DEFAULT
SignatureAlgorithms = rsa_pss_pss_sha256
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1895]
ExpectedResult = Success
ExpectedServerCertType = RSA-PSS
ExpectedServerSignHash = SHA256
ExpectedServerSignType = RSA-PSS
Serialize = Client


# ===========================================================

[1896-Only RSA-PSS Certificate]
ssl_conf = 1896-Only RSA-PSS Certificate-ssl

[1896-Only RSA-PSS Certificate-ssl]
server = 1896-Only RSA-PSS Certificate-server
client = 1896-Only RSA-PSS Certificate-client

[1896-Only RSA-PSS Certificate-server]
Certificate = ${ENV::TEST_CERTS_DIR}/server-pss-cert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/server-pss-key.pem

[1896-Only RSA-PSS Certificate-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1896]
ExpectedResult = Success
ExpectedServerCertType = RSA-PSS
ExpectedServerSignHash = SHA256
ExpectedServerSignType = RSA-PSS
Serialize = Client


# ===========================================================

[1897-RSA-PSS Certificate, no PSS signature algorithms]
ssl_conf = 1897-RSA-PSS Certificate, no PSS signature algorithms-ssl

[1897-RSA-PSS Certificate, no PSS signature algorithms-ssl]
server = 1897-RSA-PSS Certificate, no PSS signature algorithms-server
client = 1897-RSA-PSS Certificate, no PSS signature algorithms-client

[1897-RSA-PSS Certificate, no PSS signature algorithms-server]
Certificate = ${ENV::TEST_CERTS_DIR}/server-pss-cert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/server-pss-key.pem

[1897-RSA-PSS Certificate, no PSS signature algorithms-client]
CipherString = DEFAULT
SignatureAlgorithms = RSA+SHA256
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1897]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1898-RSA key exchange with all RSA certificate types]
ssl_conf = 1898-RSA key exchange with all RSA certificate types-ssl

[1898-RSA key exchange with all RSA certificate types-ssl]
server = 1898-RSA key exchange with all RSA certificate types-server
client = 1898-RSA key exchange with all RSA certificate types-client

[1898-RSA key exchange with all RSA certificate types-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PSS.Certificate = ${ENV::TEST_CERTS_DIR}/server-pss-cert.pem
PSS.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-pss-key.pem
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1898-RSA key exchange with all RSA certificate types-client]
CipherString = kRSA
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1898]
ExpectedResult = Success
ExpectedServerCertType = RSA
Serialize = Client


# ===========================================================

[1899-RSA key exchange with only RSA-PSS certificate]
ssl_conf = 1899-RSA key exchange with only RSA-PSS certificate-ssl

[1899-RSA key exchange with only RSA-PSS certificate-ssl]
server = 1899-RSA key exchange with only RSA-PSS certificate-server
client = 1899-RSA key exchange with only RSA-PSS certificate-client

[1899-RSA key exchange with only RSA-PSS certificate-server]
Certificate = ${ENV::TEST_CERTS_DIR}/server-pss-cert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/server-pss-key.pem

[1899-RSA key exchange with only RSA-PSS certificate-client]
CipherString = kRSA
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1899]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1900-Suite B P-256 Hash Algorithm Selection]
ssl_conf = 1900-Suite B P-256 Hash Algorithm Selection-ssl

[1900-Suite B P-256 Hash Algorithm Selection-ssl]
server = 1900-Suite B P-256 Hash Algorithm Selection-server
client = 1900-Suite B P-256 Hash Algorithm Selection-client

[1900-Suite B P-256 Hash Algorithm Selection-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = SUITEB128
ECDSA.Certificate = ${ENV::TEST_CERTS_DIR}/p256-server-cert.pem
ECDSA.PrivateKey = ${ENV::TEST_CERTS_DIR}/p256-server-key.pem
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1900-Suite B P-256 Hash Algorithm Selection-client]
CipherString = DEFAULT
SignatureAlgorithms = ECDSA+SHA384:ECDSA+SHA256
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/p384-root.pem
VerifyMode = Peer

[test-1900]
ExpectedResult = Success
ExpectedServerCertType = P-256
ExpectedServerSignHash = SHA256
ExpectedServerSignType = EC
Serialize = Client


# ===========================================================

[1901-Suite B P-384 Hash Algorithm Selection]
ssl_conf = 1901-Suite B P-384 Hash Algorithm Selection-ssl

[1901-Suite B P-384 Hash Algorithm Selection-ssl]
server = 1901-Suite B P-384 Hash Algorithm Selection-server
client = 1901-Suite B P-384 Hash Algorithm Selection-client

[1901-Suite B P-384 Hash Algorithm Selection-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = SUITEB128
ECDSA.Certificate = ${ENV::TEST_CERTS_DIR}/p384-server-cert.pem
ECDSA.PrivateKey = ${ENV::TEST_CERTS_DIR}/p384-server-key.pem
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1901-Suite B P-384 Hash Algorithm Selection-client]
CipherString = DEFAULT
SignatureAlgorithms = ECDSA+SHA256:ECDSA+SHA384
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/p384-root.pem
VerifyMode = Peer

[test-1901]
ExpectedResult = Success
ExpectedServerCertType = P-384
ExpectedServerSignHash = SHA384
ExpectedServerSignType = EC
Serialize = Client


# ===========================================================

[1902-TLS 1.2 Ed25519 Client Auth]
ssl_conf = 1902-TLS 1.2 Ed25519 Client Auth-ssl

[1902-TLS 1.2 Ed25519 Client Auth-ssl]
server = 1902-TLS 1.2 Ed25519 Client Auth-server
client = 1902-TLS 1.2 Ed25519 Client Auth-client

[1902-TLS 1.2 Ed25519 Client Auth-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/root-cert.pem
VerifyMode = Require

[1902-TLS 1.2 Ed25519 Client Auth-client]
CipherString = DEFAULT
Ed25519.Certificate = ${ENV::TEST_CERTS_DIR}/client-ed25519-cert.pem
Ed25519.PrivateKey = ${ENV::TEST_CERTS_DIR}/client-ed25519-key.pem
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1902]
ExpectedClientCertType = Ed25519
ExpectedClientSignType = Ed25519
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1903-TLS 1.2 Ed448 Client Auth]
ssl_conf = 1903-TLS 1.2 Ed448 Client Auth-ssl

[1903-TLS 1.2 Ed448 Client Auth-ssl]
server = 1903-TLS 1.2 Ed448 Client Auth-server
client = 1903-TLS 1.2 Ed448 Client Auth-client

[1903-TLS 1.2 Ed448 Client Auth-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/root-cert.pem
VerifyMode = Require

[1903-TLS 1.2 Ed448 Client Auth-client]
CipherString = DEFAULT
Ed448.Certificate = ${ENV::TEST_CERTS_DIR}/client-ed448-cert.pem
Ed448.PrivateKey = ${ENV::TEST_CERTS_DIR}/client-ed448-key.pem
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1903]
ExpectedClientCertType = Ed448
ExpectedClientSignType = Ed448
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1904-Only RSA-PSS Certificate, TLS v1.1]
ssl_conf = 1904-Only RSA-PSS Certificate, TLS v1.1-ssl

[1904-Only RSA-PSS Certificate, TLS v1.1-ssl]
server = 1904-Only RSA-PSS Certificate, TLS v1.1-server
client = 1904-Only RSA-PSS Certificate, TLS v1.1-client

[1904-Only RSA-PSS Certificate, TLS v1.1-server]
Certificate = ${ENV::TEST_CERTS_DIR}/server-pss-cert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/server-pss-key.pem

[1904-Only RSA-PSS Certificate, TLS v1.1-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1904]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1905-TLS 1.3 ECDSA Signature Algorithm Selection]
ssl_conf = 1905-TLS 1.3 ECDSA Signature Algorithm Selection-ssl

[1905-TLS 1.3 ECDSA Signature Algorithm Selection-ssl]
server = 1905-TLS 1.3 ECDSA Signature Algorithm Selection-server
client = 1905-TLS 1.3 ECDSA Signature Algorithm Selection-client

[1905-TLS 1.3 ECDSA Signature Algorithm Selection-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
ECDSA.Certificate = ${ENV::TEST_CERTS_DIR}/server-ecdsa-cert.pem
ECDSA.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ecdsa-key.pem
Ed25519.Certificate = ${ENV::TEST_CERTS_DIR}/server-ed25519-cert.pem
Ed25519.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ed25519-key.pem
Ed448.Certificate = ${ENV::TEST_CERTS_DIR}/server-ed448-cert.pem
Ed448.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ed448-key.pem
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1905-TLS 1.3 ECDSA Signature Algorithm Selection-client]
CipherString = DEFAULT
SignatureAlgorithms = ECDSA+SHA256
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1905]
ExpectedResult = Success
ExpectedServerCANames = empty
ExpectedServerCertType = P-256
ExpectedServerSignHash = SHA256
ExpectedServerSignType = EC
Serialize = Client


# ===========================================================

[1906-TLS 1.3 ECDSA Signature Algorithm Selection compressed point]
ssl_conf = 1906-TLS 1.3 ECDSA Signature Algorithm Selection compressed point-ssl

[1906-TLS 1.3 ECDSA Signature Algorithm Selection compressed point-ssl]
server = 1906-TLS 1.3 ECDSA Signature Algorithm Selection compressed point-server
client = 1906-TLS 1.3 ECDSA Signature Algorithm Selection compressed point-client

[1906-TLS 1.3 ECDSA Signature Algorithm Selection compressed point-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
ECDSA.Certificate = ${ENV::TEST_CERTS_DIR}/server-cecdsa-cert.pem
ECDSA.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-cecdsa-key.pem
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1906-TLS 1.3 ECDSA Signature Algorithm Selection compressed point-client]
CipherString = DEFAULT
SignatureAlgorithms = ECDSA+SHA256
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1906]
ExpectedResult = Success
ExpectedServerCANames = empty
ExpectedServerCertType = P-256
ExpectedServerSignHash = SHA256
ExpectedServerSignType = EC
Serialize = Client


# ===========================================================

[1907-TLS 1.3 ECDSA Signature Algorithm Selection SHA1]
ssl_conf = 1907-TLS 1.3 ECDSA Signature Algorithm Selection SHA1-ssl

[1907-TLS 1.3 ECDSA Signature Algorithm Selection SHA1-ssl]
server = 1907-TLS 1.3 ECDSA Signature Algorithm Selection SHA1-server
client = 1907-TLS 1.3 ECDSA Signature Algorithm Selection SHA1-client

[1907-TLS 1.3 ECDSA Signature Algorithm Selection SHA1-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
ECDSA.Certificate = ${ENV::TEST_CERTS_DIR}/server-ecdsa-cert.pem
ECDSA.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ecdsa-key.pem
Ed25519.Certificate = ${ENV::TEST_CERTS_DIR}/server-ed25519-cert.pem
Ed25519.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ed25519-key.pem
Ed448.Certificate = ${ENV::TEST_CERTS_DIR}/server-ed448-cert.pem
Ed448.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ed448-key.pem
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1907-TLS 1.3 ECDSA Signature Algorithm Selection SHA1-client]
CipherString = DEFAULT
SignatureAlgorithms = ECDSA+SHA1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1907]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1908-TLS 1.3 ECDSA Signature Algorithm Selection with PSS]
ssl_conf = 1908-TLS 1.3 ECDSA Signature Algorithm Selection with PSS-ssl

[1908-TLS 1.3 ECDSA Signature Algorithm Selection with PSS-ssl]
server = 1908-TLS 1.3 ECDSA Signature Algorithm Selection with PSS-server
client = 1908-TLS 1.3 ECDSA Signature Algorithm Selection with PSS-client

[1908-TLS 1.3 ECDSA Signature Algorithm Selection with PSS-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
ECDSA.Certificate = ${ENV::TEST_CERTS_DIR}/server-ecdsa-cert.pem
ECDSA.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ecdsa-key.pem
Ed25519.Certificate = ${ENV::TEST_CERTS_DIR}/server-ed25519-cert.pem
Ed25519.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ed25519-key.pem
Ed448.Certificate = ${ENV::TEST_CERTS_DIR}/server-ed448-cert.pem
Ed448.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ed448-key.pem
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1908-TLS 1.3 ECDSA Signature Algorithm Selection with PSS-client]
CipherString = DEFAULT
RequestCAFile = ${ENV::TEST_CERTS_DIR}/root-cert.pem
SignatureAlgorithms = ECDSA+SHA256:RSA-PSS+SHA256
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1908]
ExpectedResult = Success
ExpectedServerCANames = ${ENV::TEST_CERTS_DIR}/root-cert.pem
ExpectedServerCertType = P-256
ExpectedServerSignHash = SHA256
ExpectedServerSignType = EC
Serialize = Client


# ===========================================================

[1909-TLS 1.3 RSA Signature Algorithm Selection SHA384 with PSS]
ssl_conf = 1909-TLS 1.3 RSA Signature Algorithm Selection SHA384 with PSS-ssl

[1909-TLS 1.3 RSA Signature Algorithm Selection SHA384 with PSS-ssl]
server = 1909-TLS 1.3 RSA Signature Algorithm Selection SHA384 with PSS-server
client = 1909-TLS 1.3 RSA Signature Algorithm Selection SHA384 with PSS-client

[1909-TLS 1.3 RSA Signature Algorithm Selection SHA384 with PSS-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
ECDSA.Certificate = ${ENV::TEST_CERTS_DIR}/server-ecdsa-cert.pem
ECDSA.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ecdsa-key.pem
Ed25519.Certificate = ${ENV::TEST_CERTS_DIR}/server-ed25519-cert.pem
Ed25519.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ed25519-key.pem
Ed448.Certificate = ${ENV::TEST_CERTS_DIR}/server-ed448-cert.pem
Ed448.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ed448-key.pem
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1909-TLS 1.3 RSA Signature Algorithm Selection SHA384 with PSS-client]
CipherString = DEFAULT
SignatureAlgorithms = ECDSA+SHA384:RSA-PSS+SHA384
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1909]
ExpectedResult = Success
ExpectedServerCertType = RSA
ExpectedServerSignHash = SHA384
ExpectedServerSignType = RSA-PSS
Serialize = Client


# ===========================================================

[1910-TLS 1.3 ECDSA Signature Algorithm Selection, no ECDSA certificate]
ssl_conf = 1910-TLS 1.3 ECDSA Signature Algorithm Selection, no ECDSA certificate-ssl

[1910-TLS 1.3 ECDSA Signature Algorithm Selection, no ECDSA certificate-ssl]
server = 1910-TLS 1.3 ECDSA Signature Algorithm Selection, no ECDSA certificate-server
client = 1910-TLS 1.3 ECDSA Signature Algorithm Selection, no ECDSA certificate-client

[1910-TLS 1.3 ECDSA Signature Algorithm Selection, no ECDSA certificate-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1910-TLS 1.3 ECDSA Signature Algorithm Selection, no ECDSA certificate-client]
CipherString = DEFAULT
SignatureAlgorithms = ECDSA+SHA256
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1910]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1911-TLS 1.3 RSA Signature Algorithm Selection, no PSS]
ssl_conf = 1911-TLS 1.3 RSA Signature Algorithm Selection, no PSS-ssl

[1911-TLS 1.3 RSA Signature Algorithm Selection, no PSS-ssl]
server = 1911-TLS 1.3 RSA Signature Algorithm Selection, no PSS-server
client = 1911-TLS 1.3 RSA Signature Algorithm Selection, no PSS-client

[1911-TLS 1.3 RSA Signature Algorithm Selection, no PSS-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
ECDSA.Certificate = ${ENV::TEST_CERTS_DIR}/server-ecdsa-cert.pem
ECDSA.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ecdsa-key.pem
Ed25519.Certificate = ${ENV::TEST_CERTS_DIR}/server-ed25519-cert.pem
Ed25519.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ed25519-key.pem
Ed448.Certificate = ${ENV::TEST_CERTS_DIR}/server-ed448-cert.pem
Ed448.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ed448-key.pem
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1911-TLS 1.3 RSA Signature Algorithm Selection, no PSS-client]
CipherString = DEFAULT
SignatureAlgorithms = RSA+SHA256
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1911]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1912-TLS 1.3 RSA-PSS Signature Algorithm Selection]
ssl_conf = 1912-TLS 1.3 RSA-PSS Signature Algorithm Selection-ssl

[1912-TLS 1.3 RSA-PSS Signature Algorithm Selection-ssl]
server = 1912-TLS 1.3 RSA-PSS Signature Algorithm Selection-server
client = 1912-TLS 1.3 RSA-PSS Signature Algorithm Selection-client

[1912-TLS 1.3 RSA-PSS Signature Algorithm Selection-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
ECDSA.Certificate = ${ENV::TEST_CERTS_DIR}/server-ecdsa-cert.pem
ECDSA.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ecdsa-key.pem
Ed25519.Certificate = ${ENV::TEST_CERTS_DIR}/server-ed25519-cert.pem
Ed25519.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ed25519-key.pem
Ed448.Certificate = ${ENV::TEST_CERTS_DIR}/server-ed448-cert.pem
Ed448.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ed448-key.pem
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1912-TLS 1.3 RSA-PSS Signature Algorithm Selection-client]
CipherString = DEFAULT
SignatureAlgorithms = RSA-PSS+SHA256
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1912]
ExpectedResult = Success
ExpectedServerCertType = RSA
ExpectedServerSignHash = SHA256
ExpectedServerSignType = RSA-PSS
Serialize = Client


# ===========================================================

[1913-TLS 1.3 Ed25519 Signature Algorithm Selection]
ssl_conf = 1913-TLS 1.3 Ed25519 Signature Algorithm Selection-ssl

[1913-TLS 1.3 Ed25519 Signature Algorithm Selection-ssl]
server = 1913-TLS 1.3 Ed25519 Signature Algorithm Selection-server
client = 1913-TLS 1.3 Ed25519 Signature Algorithm Selection-client

[1913-TLS 1.3 Ed25519 Signature Algorithm Selection-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
ECDSA.Certificate = ${ENV::TEST_CERTS_DIR}/server-ecdsa-cert.pem
ECDSA.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ecdsa-key.pem
Ed25519.Certificate = ${ENV::TEST_CERTS_DIR}/server-ed25519-cert.pem
Ed25519.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ed25519-key.pem
Ed448.Certificate = ${ENV::TEST_CERTS_DIR}/server-ed448-cert.pem
Ed448.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ed448-key.pem
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1913-TLS 1.3 Ed25519 Signature Algorithm Selection-client]
CipherString = DEFAULT
SignatureAlgorithms = ed25519
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1913]
ExpectedResult = Success
ExpectedServerCertType = Ed25519
ExpectedServerSignType = Ed25519
Serialize = Client


# ===========================================================

[1914-TLS 1.3 Ed448 Signature Algorithm Selection]
ssl_conf = 1914-TLS 1.3 Ed448 Signature Algorithm Selection-ssl

[1914-TLS 1.3 Ed448 Signature Algorithm Selection-ssl]
server = 1914-TLS 1.3 Ed448 Signature Algorithm Selection-server
client = 1914-TLS 1.3 Ed448 Signature Algorithm Selection-client

[1914-TLS 1.3 Ed448 Signature Algorithm Selection-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
ECDSA.Certificate = ${ENV::TEST_CERTS_DIR}/server-ecdsa-cert.pem
ECDSA.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ecdsa-key.pem
Ed25519.Certificate = ${ENV::TEST_CERTS_DIR}/server-ed25519-cert.pem
Ed25519.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ed25519-key.pem
Ed448.Certificate = ${ENV::TEST_CERTS_DIR}/server-ed448-cert.pem
Ed448.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ed448-key.pem
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1914-TLS 1.3 Ed448 Signature Algorithm Selection-client]
CipherString = DEFAULT
SignatureAlgorithms = ed448
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1914]
ExpectedResult = Success
ExpectedServerCertType = Ed448
ExpectedServerSignType = Ed448
Serialize = Client


# ===========================================================

[1915-TLS 1.3 Ed25519 CipherString and Groups Selection]
ssl_conf = 1915-TLS 1.3 Ed25519 CipherString and Groups Selection-ssl

[1915-TLS 1.3 Ed25519 CipherString and Groups Selection-ssl]
server = 1915-TLS 1.3 Ed25519 CipherString and Groups Selection-server
client = 1915-TLS 1.3 Ed25519 CipherString and Groups Selection-client

[1915-TLS 1.3 Ed25519 CipherString and Groups Selection-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
ECDSA.Certificate = ${ENV::TEST_CERTS_DIR}/server-ecdsa-cert.pem
ECDSA.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ecdsa-key.pem
Ed25519.Certificate = ${ENV::TEST_CERTS_DIR}/server-ed25519-cert.pem
Ed25519.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ed25519-key.pem
Ed448.Certificate = ${ENV::TEST_CERTS_DIR}/server-ed448-cert.pem
Ed448.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ed448-key.pem
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1915-TLS 1.3 Ed25519 CipherString and Groups Selection-client]
CipherString = DEFAULT
Groups = X25519
SignatureAlgorithms = ECDSA+SHA256:ed25519
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1915]
ExpectedResult = Success
ExpectedServerCertType = P-256
ExpectedServerSignType = EC
Serialize = Client


# ===========================================================

[1916-TLS 1.3 Ed448 CipherString and Groups Selection]
ssl_conf = 1916-TLS 1.3 Ed448 CipherString and Groups Selection-ssl

[1916-TLS 1.3 Ed448 CipherString and Groups Selection-ssl]
server = 1916-TLS 1.3 Ed448 CipherString and Groups Selection-server
client = 1916-TLS 1.3 Ed448 CipherString and Groups Selection-client

[1916-TLS 1.3 Ed448 CipherString and Groups Selection-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
ECDSA.Certificate = ${ENV::TEST_CERTS_DIR}/server-ecdsa-cert.pem
ECDSA.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ecdsa-key.pem
Ed25519.Certificate = ${ENV::TEST_CERTS_DIR}/server-ed25519-cert.pem
Ed25519.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ed25519-key.pem
Ed448.Certificate = ${ENV::TEST_CERTS_DIR}/server-ed448-cert.pem
Ed448.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ed448-key.pem
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1916-TLS 1.3 Ed448 CipherString and Groups Selection-client]
CipherString = DEFAULT
Groups = X448
SignatureAlgorithms = ECDSA+SHA256:ed448
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1916]
ExpectedResult = Success
ExpectedServerCertType = P-256
ExpectedServerSignType = EC
Serialize = Client


# ===========================================================

[1917-TLS 1.3 RSA Client Auth Signature Algorithm Selection]
ssl_conf = 1917-TLS 1.3 RSA Client Auth Signature Algorithm Selection-ssl

[1917-TLS 1.3 RSA Client Auth Signature Algorithm Selection-ssl]
server = 1917-TLS 1.3 RSA Client Auth Signature Algorithm Selection-server
client = 1917-TLS 1.3 RSA Client Auth Signature Algorithm Selection-client

[1917-TLS 1.3 RSA Client Auth Signature Algorithm Selection-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
ClientSignatureAlgorithms = PSS+SHA256
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/root-cert.pem
VerifyMode = Require

[1917-TLS 1.3 RSA Client Auth Signature Algorithm Selection-client]
CipherString = DEFAULT
ECDSA.Certificate = ${ENV::TEST_CERTS_DIR}/ee-ecdsa-client-chain.pem
ECDSA.PrivateKey = ${ENV::TEST_CERTS_DIR}/ee-ecdsa-key.pem
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
RSA.Certificate = ${ENV::TEST_CERTS_DIR}/ee-client-chain.pem
RSA.PrivateKey = ${ENV::TEST_CERTS_DIR}/ee-key.pem
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1917]
ExpectedClientCANames = empty
ExpectedClientCertType = RSA
ExpectedClientSignHash = SHA256
ExpectedClientSignType = RSA-PSS
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1918-TLS 1.3 ECDSA Client Auth Signature Algorithm Selection]
ssl_conf = 1918-TLS 1.3 ECDSA Client Auth Signature Algorithm Selection-ssl

[1918-TLS 1.3 ECDSA Client Auth Signature Algorithm Selection-ssl]
server = 1918-TLS 1.3 ECDSA Client Auth Signature Algorithm Selection-server
client = 1918-TLS 1.3 ECDSA Client Auth Signature Algorithm Selection-client

[1918-TLS 1.3 ECDSA Client Auth Signature Algorithm Selection-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
ClientSignatureAlgorithms = ECDSA+SHA256
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/root-cert.pem
VerifyMode = Require

[1918-TLS 1.3 ECDSA Client Auth Signature Algorithm Selection-client]
CipherString = DEFAULT
ECDSA.Certificate = ${ENV::TEST_CERTS_DIR}/ee-ecdsa-client-chain.pem
ECDSA.PrivateKey = ${ENV::TEST_CERTS_DIR}/ee-ecdsa-key.pem
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
RSA.Certificate = ${ENV::TEST_CERTS_DIR}/ee-client-chain.pem
RSA.PrivateKey = ${ENV::TEST_CERTS_DIR}/ee-key.pem
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1918]
ExpectedClientCertType = P-256
ExpectedClientSignHash = SHA256
ExpectedClientSignType = EC
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1919-TLS 1.3 Ed25519 Client Auth]
ssl_conf = 1919-TLS 1.3 Ed25519 Client Auth-ssl

[1919-TLS 1.3 Ed25519 Client Auth-ssl]
server = 1919-TLS 1.3 Ed25519 Client Auth-server
client = 1919-TLS 1.3 Ed25519 Client Auth-client

[1919-TLS 1.3 Ed25519 Client Auth-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/root-cert.pem
VerifyMode = Require

[1919-TLS 1.3 Ed25519 Client Auth-client]
CipherString = DEFAULT
EdDSA.Certificate = ${ENV::TEST_CERTS_DIR}/client-ed25519-cert.pem
EdDSA.PrivateKey = ${ENV::TEST_CERTS_DIR}/client-ed25519-key.pem
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1919]
ExpectedClientCertType = Ed25519
ExpectedClientSignType = Ed25519
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1920-TLS 1.3 Ed448 Client Auth]
ssl_conf = 1920-TLS 1.3 Ed448 Client Auth-ssl

[1920-TLS 1.3 Ed448 Client Auth-ssl]
server = 1920-TLS 1.3 Ed448 Client Auth-server
client = 1920-TLS 1.3 Ed448 Client Auth-client

[1920-TLS 1.3 Ed448 Client Auth-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/root-cert.pem
VerifyMode = Require

[1920-TLS 1.3 Ed448 Client Auth-client]
CipherString = DEFAULT
EdDSA.Certificate = ${ENV::TEST_CERTS_DIR}/client-ed448-cert.pem
EdDSA.PrivateKey = ${ENV::TEST_CERTS_DIR}/client-ed448-key.pem
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1920]
ExpectedClientCertType = Ed448
ExpectedClientSignType = Ed448
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1921-TLS 1.3 ECDSA with brainpool]
ssl_conf = 1921-TLS 1.3 ECDSA with brainpool-ssl

[1921-TLS 1.3 ECDSA with brainpool-ssl]
server = 1921-TLS 1.3 ECDSA with brainpool-server
client = 1921-TLS 1.3 ECDSA with brainpool-client

[1921-TLS 1.3 ECDSA with brainpool-server]
Certificate = ${ENV::TEST_CERTS_DIR}/server-ecdsa-brainpoolP256r1-cert.pem
CipherString = DEFAULT
Groups = brainpoolP256r1
PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ecdsa-brainpoolP256r1-key.pem

[1921-TLS 1.3 ECDSA with brainpool-client]
CipherString = DEFAULT
Groups = brainpoolP256r1
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
RequestCAFile = ${ENV::TEST_CERTS_DIR}/root-cert.pem
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1921]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1922-TLS 1.2 DSA Certificate Test]
ssl_conf = 1922-TLS 1.2 DSA Certificate Test-ssl

[1922-TLS 1.2 DSA Certificate Test-ssl]
server = 1922-TLS 1.2 DSA Certificate Test-server
client = 1922-TLS 1.2 DSA Certificate Test-client

[1922-TLS 1.2 DSA Certificate Test-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = ALL
DHParameters = ${ENV::TEST_CERTS_DIR}/dhp2048.pem
DSA.Certificate = ${ENV::TEST_CERTS_DIR}/server-dsa-cert.pem
DSA.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-dsa-key.pem
MaxProtocol = TLSv1.2
MinProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1922-TLS 1.2 DSA Certificate Test-client]
CipherString = ALL
SignatureAlgorithms = DSA+SHA256:DSA+SHA1
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1922]
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1923-TLS 1.3 Client Auth No TLS 1.3 Signature Algorithms]
ssl_conf = 1923-TLS 1.3 Client Auth No TLS 1.3 Signature Algorithms-ssl

[1923-TLS 1.3 Client Auth No TLS 1.3 Signature Algorithms-ssl]
server = 1923-TLS 1.3 Client Auth No TLS 1.3 Signature Algorithms-server
client = 1923-TLS 1.3 Client Auth No TLS 1.3 Signature Algorithms-client

[1923-TLS 1.3 Client Auth No TLS 1.3 Signature Algorithms-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
ClientSignatureAlgorithms = ECDSA+SHA1:DSA+SHA256:RSA+SHA256
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/root-cert.pem
VerifyMode = Request

[1923-TLS 1.3 Client Auth No TLS 1.3 Signature Algorithms-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1923]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1924-TLS 1.3 DSA Certificate Test]
ssl_conf = 1924-TLS 1.3 DSA Certificate Test-ssl

[1924-TLS 1.3 DSA Certificate Test-ssl]
server = 1924-TLS 1.3 DSA Certificate Test-server
client = 1924-TLS 1.3 DSA Certificate Test-client

[1924-TLS 1.3 DSA Certificate Test-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = ALL
DSA.Certificate = ${ENV::TEST_CERTS_DIR}/server-dsa-cert.pem
DSA.PrivateKey = ${ENV::TEST_CERTS_DIR}/server-dsa-key.pem
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1924-TLS 1.3 DSA Certificate Test-client]
CipherString = ALL
SignatureAlgorithms = DSA+SHA1:DSA+SHA256:ECDSA+SHA256
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1924]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1925-update-key-client-update-not-requested]
ssl_conf = 1925-update-key-client-update-not-requested-ssl

[1925-update-key-client-update-not-requested-ssl]
server = 1925-update-key-client-update-not-requested-server
client = 1925-update-key-client-update-not-requested-client

[1925-update-key-client-update-not-requested-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1925-update-key-client-update-not-requested-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1925]
ExpectedResult = Success
HandshakeMode = KeyUpdateClient
KeyUpdateType = KeyUpdateNotRequested
ResumptionExpected = No
Serialize = Client


# ===========================================================

[1926-update-key-server-update-not-requested]
ssl_conf = 1926-update-key-server-update-not-requested-ssl

[1926-update-key-server-update-not-requested-ssl]
server = 1926-update-key-server-update-not-requested-server
client = 1926-update-key-server-update-not-requested-client

[1926-update-key-server-update-not-requested-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1926-update-key-server-update-not-requested-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1926]
ExpectedResult = Success
HandshakeMode = KeyUpdateServer
KeyUpdateType = KeyUpdateNotRequested
ResumptionExpected = No
Serialize = Client


# ===========================================================

[1927-update-key-client-update-requested]
ssl_conf = 1927-update-key-client-update-requested-ssl

[1927-update-key-client-update-requested-ssl]
server = 1927-update-key-client-update-requested-server
client = 1927-update-key-client-update-requested-client

[1927-update-key-client-update-requested-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1927-update-key-client-update-requested-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1927]
ExpectedResult = Success
HandshakeMode = KeyUpdateClient
KeyUpdateType = KeyUpdateRequested
ResumptionExpected = No
Serialize = Client


# ===========================================================

[1928-update-key-server-update-requested]
ssl_conf = 1928-update-key-server-update-requested-ssl

[1928-update-key-server-update-requested-ssl]
server = 1928-update-key-server-update-requested-server
client = 1928-update-key-server-update-requested-client

[1928-update-key-server-update-requested-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1928-update-key-server-update-requested-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1928]
ExpectedResult = Success
HandshakeMode = KeyUpdateServer
KeyUpdateType = KeyUpdateRequested
ResumptionExpected = No
Serialize = Client


# ===========================================================

[1929-default]
ssl_conf = 1929-default-ssl

[1929-default-ssl]
server = 1929-default-server
client = 1929-default-client

[1929-default-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem
RecordPadding = 64

[1929-default-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
RecordPadding = 11
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1929]
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1930-cipher-server-1]
ssl_conf = 1930-cipher-server-1-ssl

[1930-cipher-server-1-ssl]
server = 1930-cipher-server-1-server
client = 1930-cipher-server-1-client

[1930-cipher-server-1-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1930-cipher-server-1-client]
CipherString = ECDHE-RSA-AES256-SHA384
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1930]
ExpectedCipher = ECDHE-RSA-AES256-SHA384
Serialize = Client


# ===========================================================

[1931-cipher-server-2]
ssl_conf = 1931-cipher-server-2-ssl

[1931-cipher-server-2-ssl]
server = 1931-cipher-server-2-server
client = 1931-cipher-server-2-client

[1931-cipher-server-2-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1931-cipher-server-2-client]
CipherString = ECDHE-RSA-AES128-SHA256
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1931]
ExpectedCipher = ECDHE-RSA-AES128-SHA256
Serialize = Client


# ===========================================================

[1932-cipher-server-client-list]
ssl_conf = 1932-cipher-server-client-list-ssl

[1932-cipher-server-client-list-ssl]
server = 1932-cipher-server-client-list-server
client = 1932-cipher-server-client-list-client

[1932-cipher-server-client-list-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1932-cipher-server-client-list-client]
CipherString = ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1932]
ExpectedCipher = ECDHE-RSA-AES128-SHA256
Serialize = Client


# ===========================================================

[1933-cipher-server-pref-1]
ssl_conf = 1933-cipher-server-pref-1-ssl

[1933-cipher-server-pref-1-ssl]
server = 1933-cipher-server-pref-1-server
client = 1933-cipher-server-pref-1-client

[1933-cipher-server-pref-1-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256
MaxProtocol = TLSv1.2
Options = ServerPreference
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1933-cipher-server-pref-1-client]
CipherString = ECDHE-RSA-AES256-SHA384
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1933]
ExpectedCipher = ECDHE-RSA-AES256-SHA384
Serialize = Client


# ===========================================================

[1934-cipher-server-pref-2]
ssl_conf = 1934-cipher-server-pref-2-ssl

[1934-cipher-server-pref-2-ssl]
server = 1934-cipher-server-pref-2-server
client = 1934-cipher-server-pref-2-client

[1934-cipher-server-pref-2-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256
MaxProtocol = TLSv1.2
Options = ServerPreference
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1934-cipher-server-pref-2-client]
CipherString = ECDHE-RSA-AES128-SHA256
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1934]
ExpectedCipher = ECDHE-RSA-AES128-SHA256
Serialize = Client


# ===========================================================

[1935-cipher-server-pref-client-list]
ssl_conf = 1935-cipher-server-pref-client-list-ssl

[1935-cipher-server-pref-client-list-ssl]
server = 1935-cipher-server-pref-client-list-server
client = 1935-cipher-server-pref-client-list-client

[1935-cipher-server-pref-client-list-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256
MaxProtocol = TLSv1.2
Options = ServerPreference
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1935-cipher-server-pref-client-list-client]
CipherString = ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1935]
ExpectedCipher = ECDHE-RSA-AES256-SHA384
Serialize = Client


# ===========================================================

[1936-cipher-server-pref-not-mobile]
ssl_conf = 1936-cipher-server-pref-not-mobile-ssl

[1936-cipher-server-pref-not-mobile-ssl]
server = 1936-cipher-server-pref-not-mobile-server
client = 1936-cipher-server-pref-not-mobile-client

[1936-cipher-server-pref-not-mobile-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-CHACHA20-POLY1305
MaxProtocol = TLSv1.2
Options = ServerPreference
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1936-cipher-server-pref-not-mobile-client]
CipherString = ECDHE-RSA-CHACHA20-POLY1305:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1936]
ExpectedCipher = ECDHE-RSA-AES256-SHA384
Serialize = Client


# ===========================================================

[1937-cipher-server-pref-mobile]
ssl_conf = 1937-cipher-server-pref-mobile-ssl

[1937-cipher-server-pref-mobile-ssl]
server = 1937-cipher-server-pref-mobile-server
client = 1937-cipher-server-pref-mobile-client

[1937-cipher-server-pref-mobile-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-CHACHA20-POLY1305
MaxProtocol = TLSv1.2
Options = ServerPreference,PrioritizeChaCha
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1937-cipher-server-pref-mobile-client]
CipherString = ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-CHACHA20-POLY1305
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1937]
ExpectedCipher = ECDHE-RSA-AES256-SHA384
Serialize = Client


# ===========================================================

[1938-cipher-server-pref-mobile2]
ssl_conf = 1938-cipher-server-pref-mobile2-ssl

[1938-cipher-server-pref-mobile2-ssl]
server = 1938-cipher-server-pref-mobile2-server
client = 1938-cipher-server-pref-mobile2-client

[1938-cipher-server-pref-mobile2-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-CHACHA20-POLY1305
MaxProtocol = TLSv1.2
Options = ServerPreference,PrioritizeChaCha
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1938-cipher-server-pref-mobile2-client]
CipherString = ECDHE-RSA-CHACHA20-POLY1305:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384
MaxProtocol = TLSv1.2
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1938]
ExpectedCipher = ECDHE-RSA-CHACHA20-POLY1305
Serialize = Client


# ===========================================================

[1939-server-auth-TLSv1.3]
ssl_conf = 1939-server-auth-TLSv1.3-ssl

[1939-server-auth-TLSv1.3-ssl]
server = 1939-server-auth-TLSv1.3-server
client = 1939-server-auth-TLSv1.3-client

[1939-server-auth-TLSv1.3-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1939-server-auth-TLSv1.3-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1939]
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1940-client-auth-TLSv1.3-request]
ssl_conf = 1940-client-auth-TLSv1.3-request-ssl

[1940-client-auth-TLSv1.3-request-ssl]
server = 1940-client-auth-TLSv1.3-request-server
client = 1940-client-auth-TLSv1.3-request-client

[1940-client-auth-TLSv1.3-request-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem
VerifyMode = Request

[1940-client-auth-TLSv1.3-request-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1940]
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1941-client-auth-TLSv1.3-require-fail]
ssl_conf = 1941-client-auth-TLSv1.3-require-fail-ssl

[1941-client-auth-TLSv1.3-require-fail-ssl]
server = 1941-client-auth-TLSv1.3-require-fail-server
client = 1941-client-auth-TLSv1.3-require-fail-client

[1941-client-auth-TLSv1.3-require-fail-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/root-cert.pem
VerifyMode = Require

[1941-client-auth-TLSv1.3-require-fail-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1941]
ExpectedResult = ServerFail
ExpectedServerAlert = CertificateRequired
Serialize = Client


# ===========================================================

[1942-client-auth-TLSv1.3-require]
ssl_conf = 1942-client-auth-TLSv1.3-require-ssl

[1942-client-auth-TLSv1.3-require-ssl]
server = 1942-client-auth-TLSv1.3-require-server
client = 1942-client-auth-TLSv1.3-require-client

[1942-client-auth-TLSv1.3-require-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
ClientSignatureAlgorithms = PSS+SHA256
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/root-cert.pem
VerifyMode = Request

[1942-client-auth-TLSv1.3-require-client]
Certificate = ${ENV::TEST_CERTS_DIR}/ee-client-chain.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/ee-key.pem
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1942]
ExpectedClientCANames = empty
ExpectedClientCertType = RSA
ExpectedClientSignHash = SHA256
ExpectedClientSignType = RSA-PSS
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1943-client-auth-TLSv1.3-noroot]
ssl_conf = 1943-client-auth-TLSv1.3-noroot-ssl

[1943-client-auth-TLSv1.3-noroot-ssl]
server = 1943-client-auth-TLSv1.3-noroot-server
client = 1943-client-auth-TLSv1.3-noroot-client

[1943-client-auth-TLSv1.3-noroot-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem
VerifyMode = Require

[1943-client-auth-TLSv1.3-noroot-client]
Certificate = ${ENV::TEST_CERTS_DIR}/ee-client-chain.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/ee-key.pem
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1943]
ExpectedResult = ServerFail
ExpectedServerAlert = UnknownCA
Serialize = Client


# ===========================================================

[1944-client-auth-TLSv1.3-request-post-handshake]
ssl_conf = 1944-client-auth-TLSv1.3-request-post-handshake-ssl

[1944-client-auth-TLSv1.3-request-post-handshake-ssl]
server = 1944-client-auth-TLSv1.3-request-post-handshake-server
client = 1944-client-auth-TLSv1.3-request-post-handshake-client

[1944-client-auth-TLSv1.3-request-post-handshake-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem
VerifyMode = RequestPostHandshake

[1944-client-auth-TLSv1.3-request-post-handshake-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1944]
ExpectedResult = ServerFail
HandshakeMode = PostHandshakeAuth
Serialize = Client


# ===========================================================

[1945-client-auth-TLSv1.3-require-fail-post-handshake]
ssl_conf = 1945-client-auth-TLSv1.3-require-fail-post-handshake-ssl

[1945-client-auth-TLSv1.3-require-fail-post-handshake-ssl]
server = 1945-client-auth-TLSv1.3-require-fail-post-handshake-server
client = 1945-client-auth-TLSv1.3-require-fail-post-handshake-client

[1945-client-auth-TLSv1.3-require-fail-post-handshake-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/root-cert.pem
VerifyMode = RequirePostHandshake

[1945-client-auth-TLSv1.3-require-fail-post-handshake-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1945]
ExpectedResult = ServerFail
HandshakeMode = PostHandshakeAuth
Serialize = Client


# ===========================================================

[1946-client-auth-TLSv1.3-request-force-server-post-handshake]
ssl_conf = 1946-client-auth-TLSv1.3-request-force-server-post-handshake-ssl

[1946-client-auth-TLSv1.3-request-force-server-post-handshake-ssl]
server = 1946-client-auth-TLSv1.3-request-force-server-post-handshake-server
client = 1946-client-auth-TLSv1.3-request-force-server-post-handshake-client

[1946-client-auth-TLSv1.3-request-force-server-post-handshake-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem
VerifyMode = RequestPostHandshake

[1946-client-auth-TLSv1.3-request-force-server-post-handshake-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1946]
ExpectedResult = ClientFail
HandshakeMode = PostHandshakeAuth
Serialize = Client
server = 1946-client-auth-TLSv1.3-request-force-server-post-handshake-server-extra

[1946-client-auth-TLSv1.3-request-force-server-post-handshake-server-extra]
ForcePHA = Yes


# ===========================================================

[1947-session-ticket-app-data12]
ssl_conf = 1947-session-ticket-app-data12-ssl

[1947-session-ticket-app-data12-ssl]
server = 1947-session-ticket-app-data12-server
client = 1947-session-ticket-app-data12-client
resume-server = 1947-session-ticket-app-data12-server
resume-client = 1947-session-ticket-app-data12-client

[1947-session-ticket-app-data12-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1947-session-ticket-app-data12-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
Options = SessionTicket
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1947]
ExpectedResult = Success
ExpectedSessionTicketAppData = HelloWorld
HandshakeMode = Resume
ResumptionExpected = Yes
Serialize = Client
SessionTicketExpected = Yes
server = 1947-session-ticket-app-data12-server-extra
resume-server = 1947-session-ticket-app-data12-server-extra

[1947-session-ticket-app-data12-server-extra]
SessionTicketAppData = HelloWorld


# ===========================================================

[1948-session-ticket-app-data12]
ssl_conf = 1948-session-ticket-app-data12-ssl

[1948-session-ticket-app-data12-ssl]
server = 1948-session-ticket-app-data12-server
client = 1948-session-ticket-app-data12-client
resume-server = 1948-session-ticket-app-data12-server
resume-client = 1948-session-ticket-app-data12-client

[1948-session-ticket-app-data12-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1948-session-ticket-app-data12-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.2
Options = SessionTicket
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1948]
ExpectedResult = Success
ExpectedSessionTicketAppData = 
HandshakeMode = Resume
ResumptionExpected = Yes
Serialize = Client
SessionTicketExpected = Yes


# ===========================================================

[1949-session-ticket-app-data13]
ssl_conf = 1949-session-ticket-app-data13-ssl

[1949-session-ticket-app-data13-ssl]
server = 1949-session-ticket-app-data13-server
client = 1949-session-ticket-app-data13-client
resume-server = 1949-session-ticket-app-data13-server
resume-client = 1949-session-ticket-app-data13-client

[1949-session-ticket-app-data13-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1949-session-ticket-app-data13-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
Options = SessionTicket
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1949]
ExpectedResult = Success
ExpectedSessionTicketAppData = HelloWorld
HandshakeMode = Resume
ResumptionExpected = Yes
Serialize = Client
SessionTicketExpected = Yes
server = 1949-session-ticket-app-data13-server-extra
resume-server = 1949-session-ticket-app-data13-server-extra

[1949-session-ticket-app-data13-server-extra]
SessionTicketAppData = HelloWorld


# ===========================================================

[1950-session-ticket-app-data13]
ssl_conf = 1950-session-ticket-app-data13-ssl

[1950-session-ticket-app-data13-ssl]
server = 1950-session-ticket-app-data13-server
client = 1950-session-ticket-app-data13-client
resume-server = 1950-session-ticket-app-data13-server
resume-client = 1950-session-ticket-app-data13-client

[1950-session-ticket-app-data13-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Options = SessionTicket
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1950-session-ticket-app-data13-client]
CipherString = DEFAULT
MaxProtocol = TLSv1.3
Options = SessionTicket
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1950]
ExpectedResult = Success
ExpectedSessionTicketAppData = 
HandshakeMode = Resume
ResumptionExpected = Yes
Serialize = Client
SessionTicketExpected = Yes


# ===========================================================

[1951-SECLEVEL 3 with default key]
ssl_conf = 1951-SECLEVEL 3 with default key-ssl

[1951-SECLEVEL 3 with default key-ssl]
server = 1951-SECLEVEL 3 with default key-server
client = 1951-SECLEVEL 3 with default key-client

[1951-SECLEVEL 3 with default key-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT:@SECLEVEL=3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[1951-SECLEVEL 3 with default key-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1951]
ExpectedResult = ServerFail
Serialize = Client


# ===========================================================

[1952-SECLEVEL 3 with ED448 key]
ssl_conf = 1952-SECLEVEL 3 with ED448 key-ssl

[1952-SECLEVEL 3 with ED448 key-ssl]
server = 1952-SECLEVEL 3 with ED448 key-server
client = 1952-SECLEVEL 3 with ED448 key-client

[1952-SECLEVEL 3 with ED448 key-server]
Certificate = ${ENV::TEST_CERTS_DIR}/server-ed448-cert.pem
CipherString = DEFAULT:@SECLEVEL=3
PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ed448-key.pem

[1952-SECLEVEL 3 with ED448 key-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1952]
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1953-SECLEVEL 3 with P-384 key, X25519 ECDHE]
ssl_conf = 1953-SECLEVEL 3 with P-384 key, X25519 ECDHE-ssl

[1953-SECLEVEL 3 with P-384 key, X25519 ECDHE-ssl]
server = 1953-SECLEVEL 3 with P-384 key, X25519 ECDHE-server
client = 1953-SECLEVEL 3 with P-384 key, X25519 ECDHE-client

[1953-SECLEVEL 3 with P-384 key, X25519 ECDHE-server]
Certificate = ${ENV::TEST_CERTS_DIR}/p384-server-cert.pem
CipherString = DEFAULT:@SECLEVEL=3
Groups = X25519
PrivateKey = ${ENV::TEST_CERTS_DIR}/p384-server-key.pem

[1953-SECLEVEL 3 with P-384 key, X25519 ECDHE-client]
CipherString = ECDHE:@SECLEVEL=3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/p384-root.pem
VerifyMode = Peer

[test-1953]
ExpectedResult = Success
Serialize = Client


# ===========================================================

[1954-SECLEVEL 3 with ED448 key, TLSv1.2]
ssl_conf = 1954-SECLEVEL 3 with ED448 key, TLSv1.2-ssl

[1954-SECLEVEL 3 with ED448 key, TLSv1.2-ssl]
server = 1954-SECLEVEL 3 with ED448 key, TLSv1.2-server
client = 1954-SECLEVEL 3 with ED448 key, TLSv1.2-client

[1954-SECLEVEL 3 with ED448 key, TLSv1.2-server]
Certificate = ${ENV::TEST_CERTS_DIR}/server-ed448-cert.pem
CipherString = DEFAULT:@SECLEVEL=3
MaxProtocol = TLSv1.2
PrivateKey = ${ENV::TEST_CERTS_DIR}/server-ed448-key.pem

[1954-SECLEVEL 3 with ED448 key, TLSv1.2-client]
CipherString = DEFAULT
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-1954]
ExpectedResult = Success
Serialize = Client


