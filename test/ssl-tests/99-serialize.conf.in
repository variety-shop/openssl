# -*- mode: perl; -*-
# Copyright 2016-2016 The OpenSSL Project Authors. All Rights Reserved.
#
# Licensed under the OpenSSL license (the "License").  You may not use
# this file except in compliance with the License.  You can obtain a copy
# in the file LICENSE in the source distribution or at
# https://www.openssl.org/source/license.html


## SSL serialization Server test configurations
## Includes most tests, except DTLS, NPN, compression and SRP

use strict;
use warnings;

package ssltests;
use OpenSSL::Test::Utils;
use Storable qw(dclone);

our @mytests;
our @tests;
our @copy;

do "01-simple.conf.in";
push @mytests, @tests;

do "02-protocol-version.conf.in";
push @mytests, @tests;

do "03-custom_verify.conf.in";
push @mytests, @tests;

do "04-client_auth.conf.in";
push @mytests, @tests;

do "05-sni.conf.in";
push @mytests,@tests;

do "06-sni-ticket.conf.in";
push @mytests,@tests;

# 07-dtls-protocol-version
# 08-npn.conf

do "09-alpn.conf.in";
push @mytests,@tests;

do "10-resumption.conf.in";
push @mytests,@tests;

# 11-dtls_resumption

do "12-ct.conf.in";
push @mytests,@tests;

do "13-fragmentation.conf.in";
push @mytests,@tests;

do "14-curves.conf.in";
push @mytests,@tests;

do "15-certstatus.conf.in";
push @mytests,@tests;

# 16-dtls-certstatus

do "17-renegotiate.conf.in";
push @mytests,@tests;

# 18-dtls-renegotiation

do "19-mac-then-encrypt.conf.in";
push @mytests,@tests;

do "20-cert-select.conf.in";
push @mytests,@tests;

do "21-key-update.conf.in";
push @mytests,@tests;

# 22-compression
# 23-srp

do "24-padding.conf.in";
push @mytests,@tests;

do "25-cipher.conf.in";
push @mytests,@tests;

do "26-tls13_client_auth.conf.in";
push @mytests,@tests;

do "27-ticket-appdata.conf.in";
push @mytests,@tests;

do "28-seclevel.conf.in";
push @mytests,@tests;

# 29-dtls-sctp-label-bug

@tests = ();

@copy = @{dclone(\@mytests)};

for my $hash (@copy) {
    $hash->{'test'}->{'Serialize'} = "Server";
}

push @tests,@copy;

for my $hash (@mytests) {
    $hash->{'test'}->{'Serialize'} = "Client";
}

push @tests,@mytests;

# Tests that fail with serialization, usually due to client auth and/or
# certificates and/or renegotiation
for my $index (reverse 0..$#tests) {
    if ($tests[$index]->{'name'} eq 'renegotiate-client-auth-require'
        && $tests[$index]->{'test'}->{'Serialize'} eq "Client") {
        splice(@tests, $index, 1, ());
        next;
    }
    if ($tests[$index]->{'name'} eq 'TLS 1.3 RSA Client Auth Signature Algorithm Selection non-empty CA Names'
        && $tests[$index]->{'test'}->{'Serialize'} eq "Client") {
        splice(@tests, $index, 1, ());
        next;
    }
    if ($tests[$index]->{'name'} eq 'TLS 1.3 ECDSA Signature Algorithm Selection with PSS'
        && $tests[$index]->{'test'}->{'Serialize'} eq "Server") {
        splice(@tests, $index, 1, ());
        next;
    }
    if ($tests[$index]->{'name'} eq 'curve-X25519'
        && $tests[$index]->{'test'}->{'Serialize'} eq "Client") {
        splice(@tests, $index, 1, ());
        next;
    }
    if ($tests[$index]->{'name'} eq 'curve-X448'
        && $tests[$index]->{'test'}->{'Serialize'} eq "Client") {
        splice(@tests, $index, 1, ());
        next;
    }
    if ($tests[$index]->{'name'} =~ /client\-auth\-.*\-require\-non\-empty\-names/
        && $tests[$index]->{'test'}->{'Serialize'} eq "Client") {
        splice(@tests, $index, 1, ());
        next;
    }
    if ($tests[$index]->{'name'} =~ /DTLS/) {
        splice(@tests, $index, 1, ());
        next;
    }
    if ($tests[$index]->{'name'} eq "client-auth-TLSv1.3-require-post-handshake") {
        splice(@tests, $index, 1, ());
        next;
    }
    if ($tests[$index]->{'name'} eq "client-auth-TLSv1.3-require-non-empty-names-post-handshake") {
        splice(@tests, $index, 1, ());
        next;
    }
    if ($tests[$index]->{'name'} eq "client-auth-TLSv1.3-noroot-post-handshake") {
        splice(@tests, $index, 1, ());
        next;
    }
    if ($tests[$index]->{'name'} eq "client-auth-TLSv1.3-request-force-client-post-handshake") {
        splice(@tests, $index, 1, ());
        next;
    }
    if ($tests[$index]->{'name'} eq "client-auth-TLSv1.3-request-force-server-post-handshake"
        && $tests[$index]->{'test'}->{'Serialize'} eq "Server") {
        splice(@tests, $index, 1, ());
        next;
    }
    if ($tests[$index]->{'name'} eq "client-auth-TLSv1.3-request-force-both-post-handshake") {
        splice(@tests, $index, 1, ());
        next;
    }
}
